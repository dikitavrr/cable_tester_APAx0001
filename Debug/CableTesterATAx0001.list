
CableTesterATAx0001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024d4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002590  08002590  00012590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025c8  080025c8  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  080025c8  080025c8  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025c8  080025c8  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025c8  080025c8  000125c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025cc  080025cc  000125cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080025d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000030  08002600  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002600  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008139  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001497  00000000  00000000  00028191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  00029628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  00029ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e60  00000000  00000000  0002a710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b03  00000000  00000000  00044570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a03d7  00000000  00000000  0004e073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee44a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f50  00000000  00000000  000ee49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000030 	.word	0x20000030
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002578 	.word	0x08002578

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000034 	.word	0x20000034
 8000100:	08002578 	.word	0x08002578

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f000 fd63 	bl	8000cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 fae3 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 fb85 	bl	8000938 <MX_GPIO_Init>
  MX_TIM3_Init();
 800022e:	f000 fb2b 	bl	8000888 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Установить все линии в первоначальное положение светодиодов
  HAL_GPIO_WritePin(STP_SR_LED_nCLR_GPIO_Port, STP_SR_LED_nCLR_Pin, GPIO_PIN_SET);
 8000232:	2390      	movs	r3, #144	; 0x90
 8000234:	05db      	lsls	r3, r3, #23
 8000236:	2201      	movs	r2, #1
 8000238:	2140      	movs	r1, #64	; 0x40
 800023a:	0018      	movs	r0, r3
 800023c:	f001 f82d 	bl	800129a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STP_SR_LED_CLK_GPIO_Port, STP_SR_LED_CLK_Pin, GPIO_PIN_RESET);
 8000240:	2390      	movs	r3, #144	; 0x90
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	2200      	movs	r2, #0
 8000246:	2180      	movs	r1, #128	; 0x80
 8000248:	0018      	movs	r0, r3
 800024a:	f001 f826 	bl	800129a <HAL_GPIO_WritePin>
  // Установить все линии в первоначальное положение прозвонки и чтения
  HAL_GPIO_WritePin(LINE_CALL_SR_CLK_GPIO_Port, LINE_CALL_SR_CLK_Pin, GPIO_PIN_RESET);
 800024e:	4b50      	ldr	r3, [pc, #320]	; (8000390 <main+0x174>)
 8000250:	2200      	movs	r2, #0
 8000252:	2140      	movs	r1, #64	; 0x40
 8000254:	0018      	movs	r0, r3
 8000256:	f001 f820 	bl	800129a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LINE_RESPONSE_SR_CLK_GPIO_Port, LINE_RESPONSE_SR_CLK_Pin, GPIO_PIN_RESET);
 800025a:	4b4d      	ldr	r3, [pc, #308]	; (8000390 <main+0x174>)
 800025c:	2200      	movs	r2, #0
 800025e:	2108      	movs	r1, #8
 8000260:	0018      	movs	r0, r3
 8000262:	f001 f81a 	bl	800129a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LINE_CALL_SR_nCLR_GPIO_Port, LINE_CALL_SR_nCLR_Pin, GPIO_PIN_SET);
 8000266:	4b4a      	ldr	r3, [pc, #296]	; (8000390 <main+0x174>)
 8000268:	2201      	movs	r2, #1
 800026a:	2120      	movs	r1, #32
 800026c:	0018      	movs	r0, r3
 800026e:	f001 f814 	bl	800129a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LINE_RESPONSE_SR_SHnLD_GPIO_Port, LINE_RESPONSE_SR_SHnLD_Pin, GPIO_PIN_SET);
 8000272:	2380      	movs	r3, #128	; 0x80
 8000274:	0219      	lsls	r1, r3, #8
 8000276:	2390      	movs	r3, #144	; 0x90
 8000278:	05db      	lsls	r3, r3, #23
 800027a:	2201      	movs	r2, #1
 800027c:	0018      	movs	r0, r3
 800027e:	f001 f80c 	bl	800129a <HAL_GPIO_WritePin>



  ClearLEDSR();
 8000282:	f000 fbe3 	bl	8000a4c <ClearLEDSR>
  ClearCallSR();
 8000286:	f000 fc65 	bl	8000b54 <ClearCallSR>
  // Запустить таймер
  if (USE_TIMER) {

  HAL_TIM_Base_Start_IT(&htim3);
 800028a:	4b42      	ldr	r3, [pc, #264]	; (8000394 <main+0x178>)
 800028c:	0018      	movs	r0, r3
 800028e:	f001 fd63 	bl	8001d58 <HAL_TIM_Base_Start_IT>

  }

                                                   /* TIME SETTINGS*/

  g_frequency = HAL_RCC_GetPCLK1Freq();
 8000292:	f001 fcfb 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 8000296:	0002      	movs	r2, r0
 8000298:	4b3f      	ldr	r3, [pc, #252]	; (8000398 <main+0x17c>)
 800029a:	601a      	str	r2, [r3, #0]

  u32Prescaler = htim3.Init.Prescaler;
 800029c:	4b3d      	ldr	r3, [pc, #244]	; (8000394 <main+0x178>)
 800029e:	685a      	ldr	r2, [r3, #4]
 80002a0:	4b3e      	ldr	r3, [pc, #248]	; (800039c <main+0x180>)
 80002a2:	601a      	str	r2, [r3, #0]
  g_u32TimePeriod = ((g_frequency * TIME_BLINKING_LED_MS) / ((u32Prescaler + 1) * 1000)) - 1;
 80002a4:	4b3c      	ldr	r3, [pc, #240]	; (8000398 <main+0x17c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2264      	movs	r2, #100	; 0x64
 80002aa:	435a      	muls	r2, r3
 80002ac:	0010      	movs	r0, r2
 80002ae:	4b3b      	ldr	r3, [pc, #236]	; (800039c <main+0x180>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	1c5a      	adds	r2, r3, #1
 80002b4:	0013      	movs	r3, r2
 80002b6:	015b      	lsls	r3, r3, #5
 80002b8:	1a9b      	subs	r3, r3, r2
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	189b      	adds	r3, r3, r2
 80002be:	00db      	lsls	r3, r3, #3
 80002c0:	0019      	movs	r1, r3
 80002c2:	f7ff ff1f 	bl	8000104 <__udivsi3>
 80002c6:	0003      	movs	r3, r0
 80002c8:	1e5a      	subs	r2, r3, #1
 80002ca:	4b35      	ldr	r3, [pc, #212]	; (80003a0 <main+0x184>)
 80002cc:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_AUTORELOAD(&htim3, g_u32TimePeriod);
 80002ce:	4b31      	ldr	r3, [pc, #196]	; (8000394 <main+0x178>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a33      	ldr	r2, [pc, #204]	; (80003a0 <main+0x184>)
 80002d4:	6812      	ldr	r2, [r2, #0]
 80002d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80002d8:	4b31      	ldr	r3, [pc, #196]	; (80003a0 <main+0x184>)
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	4b2d      	ldr	r3, [pc, #180]	; (8000394 <main+0x178>)
 80002de:	60da      	str	r2, [r3, #12]

    /* USER CODE BEGIN 3 */

	                                                  /* ringing of lines */
//хочу чтобы 00000001 прошёл поочерёдно по 8 линиям и результат записался в двумерный массив
if (g_u8NeedToRingLine) {
 80002e0:	4b30      	ldr	r3, [pc, #192]	; (80003a4 <main+0x188>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d100      	bne.n	80002ea <main+0xce>
 80002e8:	e097      	b.n	800041a <main+0x1fe>

	ClearCallSR();
 80002ea:	f000 fc33 	bl	8000b54 <ClearCallSR>


	HAL_GPIO_WritePin(LINE_CALL_SR_DATA_GPIO_Port, LINE_CALL_SR_DATA_Pin, GPIO_PIN_SET);
 80002ee:	4b28      	ldr	r3, [pc, #160]	; (8000390 <main+0x174>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	2180      	movs	r1, #128	; 0x80
 80002f4:	0018      	movs	r0, r3
 80002f6:	f000 ffd0 	bl	800129a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LINE_CALL_SR_CLK_GPIO_Port, LINE_CALL_SR_CLK_Pin, GPIO_PIN_SET);
 80002fa:	4b25      	ldr	r3, [pc, #148]	; (8000390 <main+0x174>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	2140      	movs	r1, #64	; 0x40
 8000300:	0018      	movs	r0, r3
 8000302:	f000 ffca 	bl	800129a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LINE_CALL_SR_CLK_GPIO_Port, LINE_CALL_SR_CLK_Pin, GPIO_PIN_RESET);
 8000306:	4b22      	ldr	r3, [pc, #136]	; (8000390 <main+0x174>)
 8000308:	2200      	movs	r2, #0
 800030a:	2140      	movs	r1, #64	; 0x40
 800030c:	0018      	movs	r0, r3
 800030e:	f000 ffc4 	bl	800129a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LINE_RESPONSE_SR_SHnLD_GPIO_Port, LINE_RESPONSE_SR_SHnLD_Pin, GPIO_PIN_RESET);
 8000312:	2380      	movs	r3, #128	; 0x80
 8000314:	0219      	lsls	r1, r3, #8
 8000316:	2390      	movs	r3, #144	; 0x90
 8000318:	05db      	lsls	r3, r3, #23
 800031a:	2200      	movs	r2, #0
 800031c:	0018      	movs	r0, r3
 800031e:	f000 ffbc 	bl	800129a <HAL_GPIO_WritePin>


	for (CallColumn = 0; CallColumn < NUMBER_OF_LINES; CallColumn++) {
 8000322:	4b21      	ldr	r3, [pc, #132]	; (80003a8 <main+0x18c>)
 8000324:	2200      	movs	r2, #0
 8000326:	701a      	strb	r2, [r3, #0]
 8000328:	e073      	b.n	8000412 <main+0x1f6>

		HAL_GPIO_WritePin(LINE_RESPONSE_SR_SHnLD_GPIO_Port, LINE_RESPONSE_SR_SHnLD_Pin, GPIO_PIN_SET);
 800032a:	2380      	movs	r3, #128	; 0x80
 800032c:	0219      	lsls	r1, r3, #8
 800032e:	2390      	movs	r3, #144	; 0x90
 8000330:	05db      	lsls	r3, r3, #23
 8000332:	2201      	movs	r2, #1
 8000334:	0018      	movs	r0, r3
 8000336:	f000 ffb0 	bl	800129a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LINE_CALL_SR_DATA_GPIO_Port, LINE_CALL_SR_DATA_Pin, GPIO_PIN_RESET);
 800033a:	4b15      	ldr	r3, [pc, #84]	; (8000390 <main+0x174>)
 800033c:	2200      	movs	r2, #0
 800033e:	2180      	movs	r1, #128	; 0x80
 8000340:	0018      	movs	r0, r3
 8000342:	f000 ffaa 	bl	800129a <HAL_GPIO_WritePin>

		for (RespString = 0; RespString < NUMBER_OF_LINES; RespString++) {
 8000346:	4b19      	ldr	r3, [pc, #100]	; (80003ac <main+0x190>)
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]
 800034c:	e043      	b.n	80003d6 <main+0x1ba>
			HAL_GPIO_WritePin(LINE_RESPONSE_SR_CLK_GPIO_Port, LINE_RESPONSE_SR_CLK_Pin, GPIO_PIN_SET);
 800034e:	4b10      	ldr	r3, [pc, #64]	; (8000390 <main+0x174>)
 8000350:	2201      	movs	r2, #1
 8000352:	2108      	movs	r1, #8
 8000354:	0018      	movs	r0, r3
 8000356:	f000 ffa0 	bl	800129a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LINE_RESPONSE_SR_CLK_GPIO_Port, LINE_RESPONSE_SR_CLK_Pin, GPIO_PIN_RESET);
 800035a:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <main+0x174>)
 800035c:	2200      	movs	r2, #0
 800035e:	2108      	movs	r1, #8
 8000360:	0018      	movs	r0, r3
 8000362:	f000 ff9a 	bl	800129a <HAL_GPIO_WritePin>

			if (HAL_GPIO_ReadPin(LINE_RESPONSE_SR_DATA_GPIO_Port, LINE_RESPONSE_SR_DATA_Pin) == GPIO_PIN_SET) {
 8000366:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <main+0x174>)
 8000368:	2110      	movs	r1, #16
 800036a:	0018      	movs	r0, r3
 800036c:	f000 ff78 	bl	8001260 <HAL_GPIO_ReadPin>
 8000370:	0003      	movs	r3, r0
 8000372:	2b01      	cmp	r3, #1
 8000374:	d11e      	bne.n	80003b4 <main+0x198>
				g_au8ResponsesData[CallColumn][RespString] = 1;
 8000376:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <main+0x18c>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	0018      	movs	r0, r3
 800037c:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <main+0x190>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	0019      	movs	r1, r3
 8000382:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <main+0x194>)
 8000384:	00c3      	lsls	r3, r0, #3
 8000386:	18d3      	adds	r3, r2, r3
 8000388:	2201      	movs	r2, #1
 800038a:	545a      	strb	r2, [r3, r1]
 800038c:	e01d      	b.n	80003ca <main+0x1ae>
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	48000400 	.word	0x48000400
 8000394:	2000004c 	.word	0x2000004c
 8000398:	200000ac 	.word	0x200000ac
 800039c:	200000a8 	.word	0x200000a8
 80003a0:	200000a4 	.word	0x200000a4
 80003a4:	20000003 	.word	0x20000003
 80003a8:	200000b0 	.word	0x200000b0
 80003ac:	200000b1 	.word	0x200000b1
 80003b0:	200000b4 	.word	0x200000b4
			}
			else {
				g_au8ResponsesData[CallColumn][RespString] = 0;
 80003b4:	4be4      	ldr	r3, [pc, #912]	; (8000748 <main+0x52c>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	0018      	movs	r0, r3
 80003ba:	4be4      	ldr	r3, [pc, #912]	; (800074c <main+0x530>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	0019      	movs	r1, r3
 80003c0:	4ae3      	ldr	r2, [pc, #908]	; (8000750 <main+0x534>)
 80003c2:	00c3      	lsls	r3, r0, #3
 80003c4:	18d3      	adds	r3, r2, r3
 80003c6:	2200      	movs	r2, #0
 80003c8:	545a      	strb	r2, [r3, r1]
		for (RespString = 0; RespString < NUMBER_OF_LINES; RespString++) {
 80003ca:	4be0      	ldr	r3, [pc, #896]	; (800074c <main+0x530>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	3301      	adds	r3, #1
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	4bde      	ldr	r3, [pc, #888]	; (800074c <main+0x530>)
 80003d4:	701a      	strb	r2, [r3, #0]
 80003d6:	4bdd      	ldr	r3, [pc, #884]	; (800074c <main+0x530>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2b07      	cmp	r3, #7
 80003dc:	d9b7      	bls.n	800034e <main+0x132>
			}

		}

		HAL_GPIO_WritePin(LINE_CALL_SR_CLK_GPIO_Port, LINE_CALL_SR_CLK_Pin, GPIO_PIN_SET);
 80003de:	4bdd      	ldr	r3, [pc, #884]	; (8000754 <main+0x538>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	2140      	movs	r1, #64	; 0x40
 80003e4:	0018      	movs	r0, r3
 80003e6:	f000 ff58 	bl	800129a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LINE_CALL_SR_CLK_GPIO_Port, LINE_CALL_SR_CLK_Pin, GPIO_PIN_RESET);
 80003ea:	4bda      	ldr	r3, [pc, #872]	; (8000754 <main+0x538>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	2140      	movs	r1, #64	; 0x40
 80003f0:	0018      	movs	r0, r3
 80003f2:	f000 ff52 	bl	800129a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LINE_RESPONSE_SR_SHnLD_GPIO_Port, LINE_RESPONSE_SR_SHnLD_Pin, GPIO_PIN_RESET);
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	0219      	lsls	r1, r3, #8
 80003fa:	2390      	movs	r3, #144	; 0x90
 80003fc:	05db      	lsls	r3, r3, #23
 80003fe:	2200      	movs	r2, #0
 8000400:	0018      	movs	r0, r3
 8000402:	f000 ff4a 	bl	800129a <HAL_GPIO_WritePin>
	for (CallColumn = 0; CallColumn < NUMBER_OF_LINES; CallColumn++) {
 8000406:	4bd0      	ldr	r3, [pc, #832]	; (8000748 <main+0x52c>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	3301      	adds	r3, #1
 800040c:	b2da      	uxtb	r2, r3
 800040e:	4bce      	ldr	r3, [pc, #824]	; (8000748 <main+0x52c>)
 8000410:	701a      	strb	r2, [r3, #0]
 8000412:	4bcd      	ldr	r3, [pc, #820]	; (8000748 <main+0x52c>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	2b07      	cmp	r3, #7
 8000418:	d987      	bls.n	800032a <main+0x10e>

                                                      /* data processing */
//хочу чтобы двумерный массив обработался и на основе обработки сгенерировались данные для отображения
	  //сформировали что отобразить

	  if (g_u8StepNumber == 0){
 800041a:	4bcf      	ldr	r3, [pc, #828]	; (8000758 <main+0x53c>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d000      	beq.n	8000424 <main+0x208>
 8000422:	e09b      	b.n	800055c <main+0x340>

		  if (g_u8ActiveRowColor == GREEN_COLOR) {
 8000424:	4bcd      	ldr	r3, [pc, #820]	; (800075c <main+0x540>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d129      	bne.n	8000480 <main+0x264>
			  if ((g_u8ActiveLED >= 0) && (g_u8ActiveLED < NUMBER_OF_LEDS/2)) {
 800042c:	4bcc      	ldr	r3, [pc, #816]	; (8000760 <main+0x544>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b07      	cmp	r3, #7
 8000432:	d80d      	bhi.n	8000450 <main+0x234>
				  g_u8LEDCallGreenData = (LED_ON << g_au8GreenCalls[g_u8ActiveRow]);
 8000434:	4bcb      	ldr	r3, [pc, #812]	; (8000764 <main+0x548>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	001a      	movs	r2, r3
 800043a:	4bcb      	ldr	r3, [pc, #812]	; (8000768 <main+0x54c>)
 800043c:	5c9b      	ldrb	r3, [r3, r2]
 800043e:	001a      	movs	r2, r3
 8000440:	2301      	movs	r3, #1
 8000442:	4093      	lsls	r3, r2
 8000444:	b2da      	uxtb	r2, r3
 8000446:	4bc9      	ldr	r3, [pc, #804]	; (800076c <main+0x550>)
 8000448:	701a      	strb	r2, [r3, #0]
				  g_u8LEDCallRedData = LED_OFF;
 800044a:	4bc9      	ldr	r3, [pc, #804]	; (8000770 <main+0x554>)
 800044c:	2200      	movs	r2, #0
 800044e:	701a      	strb	r2, [r3, #0]
			  }
			  if ((g_u8ActiveLED >= NUMBER_OF_LEDS/2) && (g_u8ActiveLED < NUMBER_OF_LEDS)) {
 8000450:	4bc3      	ldr	r3, [pc, #780]	; (8000760 <main+0x544>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b07      	cmp	r3, #7
 8000456:	d913      	bls.n	8000480 <main+0x264>
 8000458:	4bc1      	ldr	r3, [pc, #772]	; (8000760 <main+0x544>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b0f      	cmp	r3, #15
 800045e:	d80f      	bhi.n	8000480 <main+0x264>
			  g_u8LEDRespGreenData = (LED_ON << g_au8GreenResponses[NUMBER_OF_LINES - g_u8ActiveRow - 1]);
 8000460:	4bc0      	ldr	r3, [pc, #768]	; (8000764 <main+0x548>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	001a      	movs	r2, r3
 8000466:	2307      	movs	r3, #7
 8000468:	1a9b      	subs	r3, r3, r2
 800046a:	4ac2      	ldr	r2, [pc, #776]	; (8000774 <main+0x558>)
 800046c:	5cd3      	ldrb	r3, [r2, r3]
 800046e:	001a      	movs	r2, r3
 8000470:	2301      	movs	r3, #1
 8000472:	4093      	lsls	r3, r2
 8000474:	b2da      	uxtb	r2, r3
 8000476:	4bc0      	ldr	r3, [pc, #768]	; (8000778 <main+0x55c>)
 8000478:	701a      	strb	r2, [r3, #0]
			  g_u8LEDRespRedData = LED_OFF;
 800047a:	4bc0      	ldr	r3, [pc, #768]	; (800077c <main+0x560>)
 800047c:	2200      	movs	r2, #0
 800047e:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  if (g_u8ActiveRowColor == RED_COLOR) {
 8000480:	4bb6      	ldr	r3, [pc, #728]	; (800075c <main+0x540>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b02      	cmp	r3, #2
 8000486:	d129      	bne.n	80004dc <main+0x2c0>
			  if ((g_u8ActiveLED >= 0) && (g_u8ActiveLED < NUMBER_OF_LEDS/2)) {
 8000488:	4bb5      	ldr	r3, [pc, #724]	; (8000760 <main+0x544>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b07      	cmp	r3, #7
 800048e:	d80d      	bhi.n	80004ac <main+0x290>
				  g_u8LEDCallRedData = LED_ON << g_au8RedCalls[g_u8ActiveRow];
 8000490:	4bb4      	ldr	r3, [pc, #720]	; (8000764 <main+0x548>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	001a      	movs	r2, r3
 8000496:	4bba      	ldr	r3, [pc, #744]	; (8000780 <main+0x564>)
 8000498:	5c9b      	ldrb	r3, [r3, r2]
 800049a:	001a      	movs	r2, r3
 800049c:	2301      	movs	r3, #1
 800049e:	4093      	lsls	r3, r2
 80004a0:	b2da      	uxtb	r2, r3
 80004a2:	4bb3      	ldr	r3, [pc, #716]	; (8000770 <main+0x554>)
 80004a4:	701a      	strb	r2, [r3, #0]
				  g_u8LEDCallGreenData = LED_OFF;
 80004a6:	4bb1      	ldr	r3, [pc, #708]	; (800076c <main+0x550>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
			  }
			  if ((g_u8ActiveLED >= NUMBER_OF_LEDS/2) && (g_u8ActiveLED < NUMBER_OF_LEDS)) {
 80004ac:	4bac      	ldr	r3, [pc, #688]	; (8000760 <main+0x544>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b07      	cmp	r3, #7
 80004b2:	d913      	bls.n	80004dc <main+0x2c0>
 80004b4:	4baa      	ldr	r3, [pc, #680]	; (8000760 <main+0x544>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b0f      	cmp	r3, #15
 80004ba:	d80f      	bhi.n	80004dc <main+0x2c0>
				  g_u8LEDRespRedData = LED_ON << g_au8RedResponses[NUMBER_OF_LINES - g_u8ActiveRow - 1];
 80004bc:	4ba9      	ldr	r3, [pc, #676]	; (8000764 <main+0x548>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	001a      	movs	r2, r3
 80004c2:	2307      	movs	r3, #7
 80004c4:	1a9b      	subs	r3, r3, r2
 80004c6:	4aaf      	ldr	r2, [pc, #700]	; (8000784 <main+0x568>)
 80004c8:	5cd3      	ldrb	r3, [r2, r3]
 80004ca:	001a      	movs	r2, r3
 80004cc:	2301      	movs	r3, #1
 80004ce:	4093      	lsls	r3, r2
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	4baa      	ldr	r3, [pc, #680]	; (800077c <main+0x560>)
 80004d4:	701a      	strb	r2, [r3, #0]
				  g_u8LEDRespGreenData = LED_OFF;
 80004d6:	4ba8      	ldr	r3, [pc, #672]	; (8000778 <main+0x55c>)
 80004d8:	2200      	movs	r2, #0
 80004da:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  if (g_u8ActiveRowColor == YELLOW_COLOR) {
 80004dc:	4b9f      	ldr	r3, [pc, #636]	; (800075c <main+0x540>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b03      	cmp	r3, #3
 80004e2:	d13b      	bne.n	800055c <main+0x340>
			  if ((g_u8ActiveLED >= 0) && (g_u8ActiveLED < NUMBER_OF_LEDS/2)) {
 80004e4:	4b9e      	ldr	r3, [pc, #632]	; (8000760 <main+0x544>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b07      	cmp	r3, #7
 80004ea:	d815      	bhi.n	8000518 <main+0x2fc>
				  g_u8LEDCallGreenData = LED_ON << g_au8GreenCalls[g_u8ActiveRow];
 80004ec:	4b9d      	ldr	r3, [pc, #628]	; (8000764 <main+0x548>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	001a      	movs	r2, r3
 80004f2:	4b9d      	ldr	r3, [pc, #628]	; (8000768 <main+0x54c>)
 80004f4:	5c9b      	ldrb	r3, [r3, r2]
 80004f6:	001a      	movs	r2, r3
 80004f8:	2301      	movs	r3, #1
 80004fa:	4093      	lsls	r3, r2
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	4b9b      	ldr	r3, [pc, #620]	; (800076c <main+0x550>)
 8000500:	701a      	strb	r2, [r3, #0]
			      g_u8LEDCallRedData = LED_ON << g_au8RedCalls[g_u8ActiveRow];
 8000502:	4b98      	ldr	r3, [pc, #608]	; (8000764 <main+0x548>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	001a      	movs	r2, r3
 8000508:	4b9d      	ldr	r3, [pc, #628]	; (8000780 <main+0x564>)
 800050a:	5c9b      	ldrb	r3, [r3, r2]
 800050c:	001a      	movs	r2, r3
 800050e:	2301      	movs	r3, #1
 8000510:	4093      	lsls	r3, r2
 8000512:	b2da      	uxtb	r2, r3
 8000514:	4b96      	ldr	r3, [pc, #600]	; (8000770 <main+0x554>)
 8000516:	701a      	strb	r2, [r3, #0]
			  }
			  if ((g_u8ActiveLED >= NUMBER_OF_LEDS/2) && (g_u8ActiveLED < NUMBER_OF_LEDS)) {
 8000518:	4b91      	ldr	r3, [pc, #580]	; (8000760 <main+0x544>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b07      	cmp	r3, #7
 800051e:	d91d      	bls.n	800055c <main+0x340>
 8000520:	4b8f      	ldr	r3, [pc, #572]	; (8000760 <main+0x544>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b0f      	cmp	r3, #15
 8000526:	d819      	bhi.n	800055c <main+0x340>
				  g_u8LEDRespGreenData = LED_ON << g_au8GreenResponses[NUMBER_OF_LINES - g_u8ActiveRow - 1];
 8000528:	4b8e      	ldr	r3, [pc, #568]	; (8000764 <main+0x548>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	001a      	movs	r2, r3
 800052e:	2307      	movs	r3, #7
 8000530:	1a9b      	subs	r3, r3, r2
 8000532:	4a90      	ldr	r2, [pc, #576]	; (8000774 <main+0x558>)
 8000534:	5cd3      	ldrb	r3, [r2, r3]
 8000536:	001a      	movs	r2, r3
 8000538:	2301      	movs	r3, #1
 800053a:	4093      	lsls	r3, r2
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4b8e      	ldr	r3, [pc, #568]	; (8000778 <main+0x55c>)
 8000540:	701a      	strb	r2, [r3, #0]
				  g_u8LEDRespRedData = LED_ON << g_au8RedResponses[NUMBER_OF_LINES - g_u8ActiveRow - 1];
 8000542:	4b88      	ldr	r3, [pc, #544]	; (8000764 <main+0x548>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	001a      	movs	r2, r3
 8000548:	2307      	movs	r3, #7
 800054a:	1a9b      	subs	r3, r3, r2
 800054c:	4a8d      	ldr	r2, [pc, #564]	; (8000784 <main+0x568>)
 800054e:	5cd3      	ldrb	r3, [r2, r3]
 8000550:	001a      	movs	r2, r3
 8000552:	2301      	movs	r3, #1
 8000554:	4093      	lsls	r3, r2
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b88      	ldr	r3, [pc, #544]	; (800077c <main+0x560>)
 800055a:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }

	  if (g_u8StepNumber != 0) {
 800055c:	4b7e      	ldr	r3, [pc, #504]	; (8000758 <main+0x53c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d05b      	beq.n	800061c <main+0x400>

	  //g_u8BinaryGreen = g_u8BinaryGreen | (SR_DATA_bm << g_au8GreenCalls[NUMBER_OF_LINES - g_u8StepNumber]); /*для того, чтобы осталось перемигиваться раскомментить*/

	 // g_u8BinaryRed = g_u8BinaryRed | (SR_DATA_bm << g_au8RedCalls[NUMBER_OF_LINES - g_u8StepNumber]);

		  if (g_u8ActiveRowColor == GREEN_COLOR) {
 8000564:	4b7d      	ldr	r3, [pc, #500]	; (800075c <main+0x540>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d129      	bne.n	80005c0 <main+0x3a4>

			  g_u8LEDCallGreenData = (LED_ON << g_au8GreenCalls[g_u8ActiveRow]) | (g_u8ColumnGreen);
 800056c:	4b7d      	ldr	r3, [pc, #500]	; (8000764 <main+0x548>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	001a      	movs	r2, r3
 8000572:	4b7d      	ldr	r3, [pc, #500]	; (8000768 <main+0x54c>)
 8000574:	5c9b      	ldrb	r3, [r3, r2]
 8000576:	001a      	movs	r2, r3
 8000578:	2301      	movs	r3, #1
 800057a:	4093      	lsls	r3, r2
 800057c:	b25a      	sxtb	r2, r3
 800057e:	4b82      	ldr	r3, [pc, #520]	; (8000788 <main+0x56c>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	b25b      	sxtb	r3, r3
 8000584:	4313      	orrs	r3, r2
 8000586:	b25b      	sxtb	r3, r3
 8000588:	b2da      	uxtb	r2, r3
 800058a:	4b78      	ldr	r3, [pc, #480]	; (800076c <main+0x550>)
 800058c:	701a      	strb	r2, [r3, #0]
			  g_u8LEDRespGreenData = (LED_ON << g_au8GreenResponses[NUMBER_OF_LINES - g_u8ActiveRow]) | (g_u8ColumnGreen);
 800058e:	4b75      	ldr	r3, [pc, #468]	; (8000764 <main+0x548>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	001a      	movs	r2, r3
 8000594:	2308      	movs	r3, #8
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	4a76      	ldr	r2, [pc, #472]	; (8000774 <main+0x558>)
 800059a:	5cd3      	ldrb	r3, [r2, r3]
 800059c:	001a      	movs	r2, r3
 800059e:	2301      	movs	r3, #1
 80005a0:	4093      	lsls	r3, r2
 80005a2:	b25a      	sxtb	r2, r3
 80005a4:	4b78      	ldr	r3, [pc, #480]	; (8000788 <main+0x56c>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	b25b      	sxtb	r3, r3
 80005aa:	4313      	orrs	r3, r2
 80005ac:	b25b      	sxtb	r3, r3
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	4b71      	ldr	r3, [pc, #452]	; (8000778 <main+0x55c>)
 80005b2:	701a      	strb	r2, [r3, #0]
			  g_u8LEDCallRedData = LED_OFF /*| (g_u8BinaryRed)*/;
 80005b4:	4b6e      	ldr	r3, [pc, #440]	; (8000770 <main+0x554>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
			  g_u8LEDRespRedData = LED_OFF /*| (g_u8BinaryRed)*/;
 80005ba:	4b70      	ldr	r3, [pc, #448]	; (800077c <main+0x560>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
		  }
		  if (g_u8ActiveRowColor == RED_COLOR) {
 80005c0:	4b66      	ldr	r3, [pc, #408]	; (800075c <main+0x540>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	d129      	bne.n	800061c <main+0x400>

			  g_u8LEDCallRedData = (LED_ON << g_au8RedCalls[g_u8ActiveRow]) | (g_u8ColumnRed);
 80005c8:	4b66      	ldr	r3, [pc, #408]	; (8000764 <main+0x548>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	001a      	movs	r2, r3
 80005ce:	4b6c      	ldr	r3, [pc, #432]	; (8000780 <main+0x564>)
 80005d0:	5c9b      	ldrb	r3, [r3, r2]
 80005d2:	001a      	movs	r2, r3
 80005d4:	2301      	movs	r3, #1
 80005d6:	4093      	lsls	r3, r2
 80005d8:	b25a      	sxtb	r2, r3
 80005da:	4b6c      	ldr	r3, [pc, #432]	; (800078c <main+0x570>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	4313      	orrs	r3, r2
 80005e2:	b25b      	sxtb	r3, r3
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b62      	ldr	r3, [pc, #392]	; (8000770 <main+0x554>)
 80005e8:	701a      	strb	r2, [r3, #0]
			  g_u8LEDRespRedData = (LED_ON << g_au8RedResponses[NUMBER_OF_LINES - g_u8ActiveRow]) | (g_u8ColumnRed);
 80005ea:	4b5e      	ldr	r3, [pc, #376]	; (8000764 <main+0x548>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	001a      	movs	r2, r3
 80005f0:	2308      	movs	r3, #8
 80005f2:	1a9b      	subs	r3, r3, r2
 80005f4:	4a63      	ldr	r2, [pc, #396]	; (8000784 <main+0x568>)
 80005f6:	5cd3      	ldrb	r3, [r2, r3]
 80005f8:	001a      	movs	r2, r3
 80005fa:	2301      	movs	r3, #1
 80005fc:	4093      	lsls	r3, r2
 80005fe:	b25a      	sxtb	r2, r3
 8000600:	4b62      	ldr	r3, [pc, #392]	; (800078c <main+0x570>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b25b      	sxtb	r3, r3
 8000606:	4313      	orrs	r3, r2
 8000608:	b25b      	sxtb	r3, r3
 800060a:	b2da      	uxtb	r2, r3
 800060c:	4b5b      	ldr	r3, [pc, #364]	; (800077c <main+0x560>)
 800060e:	701a      	strb	r2, [r3, #0]
			  g_u8LEDCallGreenData = LED_OFF /*| (g_u8BinaryGreen)*/;
 8000610:	4b56      	ldr	r3, [pc, #344]	; (800076c <main+0x550>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
			  g_u8LEDRespGreenData = LED_OFF /*| (g_u8BinaryGreen)*/;
 8000616:	4b58      	ldr	r3, [pc, #352]	; (8000778 <main+0x55c>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
      }


	  //отобразили

	  if (g_u8NeedToDisplayLEDData) {
 800061c:	4b5c      	ldr	r3, [pc, #368]	; (8000790 <main+0x574>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d03a      	beq.n	800069a <main+0x47e>
		  ClearLEDSR();
 8000624:	f000 fa12 	bl	8000a4c <ClearLEDSR>
		  LoadLEDSR();
 8000628:	f000 fa24 	bl	8000a74 <LoadLEDSR>


		  if (USE_TIMER) {
			  g_u8NeedToDisplayLEDData = 0;
 800062c:	4b58      	ldr	r3, [pc, #352]	; (8000790 <main+0x574>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
		  }
		  g_u8ActiveLED++;
 8000632:	4b4b      	ldr	r3, [pc, #300]	; (8000760 <main+0x544>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	3301      	adds	r3, #1
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b49      	ldr	r3, [pc, #292]	; (8000760 <main+0x544>)
 800063c:	701a      	strb	r2, [r3, #0]
		  if (g_u8ActiveLED == NUMBER_OF_LEDS){
 800063e:	4b48      	ldr	r3, [pc, #288]	; (8000760 <main+0x544>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b10      	cmp	r3, #16
 8000644:	d10f      	bne.n	8000666 <main+0x44a>
		  g_u8ActiveRowColor++;
 8000646:	4b45      	ldr	r3, [pc, #276]	; (800075c <main+0x540>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	3301      	adds	r3, #1
 800064c:	b2da      	uxtb	r2, r3
 800064e:	4b43      	ldr	r3, [pc, #268]	; (800075c <main+0x540>)
 8000650:	701a      	strb	r2, [r3, #0]
		  g_u8ActiveLED = 0;
 8000652:	4b43      	ldr	r3, [pc, #268]	; (8000760 <main+0x544>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
		  if (g_u8ActiveRowColor == NUMBER_OF_COLORS) {
 8000658:	4b40      	ldr	r3, [pc, #256]	; (800075c <main+0x540>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b04      	cmp	r3, #4
 800065e:	d102      	bne.n	8000666 <main+0x44a>
			  g_u8ActiveRowColor = 1;
 8000660:	4b3e      	ldr	r3, [pc, #248]	; (800075c <main+0x540>)
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]

		  }
		  }
		 // g_u8ActiveRow++;

		  if (g_u8ActiveRow/* + g_u8StepNumber */== NUMBER_OF_LINES) {
 8000666:	4b3f      	ldr	r3, [pc, #252]	; (8000764 <main+0x548>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b08      	cmp	r3, #8
 800066c:	d102      	bne.n	8000674 <main+0x458>
			  g_u8ActiveRow = 0;
 800066e:	4b3d      	ldr	r3, [pc, #244]	; (8000764 <main+0x548>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
			  //g_u8StepNumber++;

			  }
		  g_u8ActiveRow++;
 8000674:	4b3b      	ldr	r3, [pc, #236]	; (8000764 <main+0x548>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	b2da      	uxtb	r2, r3
 800067c:	4b39      	ldr	r3, [pc, #228]	; (8000764 <main+0x548>)
 800067e:	701a      	strb	r2, [r3, #0]
		  if (g_u8StepNumber == NUMBER_OF_LINES) {
 8000680:	4b35      	ldr	r3, [pc, #212]	; (8000758 <main+0x53c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b08      	cmp	r3, #8
 8000686:	d108      	bne.n	800069a <main+0x47e>
				  //break;
				  g_u8StepNumber = 0;
 8000688:	4b33      	ldr	r3, [pc, #204]	; (8000758 <main+0x53c>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
				  g_u8ColumnGreen = 0b00000000;
 800068e:	4b3e      	ldr	r3, [pc, #248]	; (8000788 <main+0x56c>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
				  g_u8ColumnRed = 0b00000000;
 8000694:	4b3d      	ldr	r3, [pc, #244]	; (800078c <main+0x570>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
//			    g_u8DisplayAllLinesUnicolor = 1;


	  }

	  if (g_u8AllLinesUnicolor == GREEN_COLOR) {
 800069a:	4b3e      	ldr	r3, [pc, #248]	; (8000794 <main+0x578>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d10b      	bne.n	80006ba <main+0x49e>

		  g_u8AllLEDCallGreenData = LED_ON;
 80006a2:	4b3d      	ldr	r3, [pc, #244]	; (8000798 <main+0x57c>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDRespGreenData = LED_ON;
 80006a8:	4b3c      	ldr	r3, [pc, #240]	; (800079c <main+0x580>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDCallRedData = LED_OFF;
 80006ae:	4b3c      	ldr	r3, [pc, #240]	; (80007a0 <main+0x584>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDRespRedData = LED_OFF;
 80006b4:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <main+0x588>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
	  }

	  if (g_u8AllLinesUnicolor == RED_COLOR) {
 80006ba:	4b36      	ldr	r3, [pc, #216]	; (8000794 <main+0x578>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b02      	cmp	r3, #2
 80006c0:	d10b      	bne.n	80006da <main+0x4be>

		  g_u8AllLEDCallGreenData = LED_OFF;
 80006c2:	4b35      	ldr	r3, [pc, #212]	; (8000798 <main+0x57c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDRespGreenData = LED_OFF;
 80006c8:	4b34      	ldr	r3, [pc, #208]	; (800079c <main+0x580>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDCallRedData = LED_ON;
 80006ce:	4b34      	ldr	r3, [pc, #208]	; (80007a0 <main+0x584>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDRespRedData = LED_ON;
 80006d4:	4b33      	ldr	r3, [pc, #204]	; (80007a4 <main+0x588>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	701a      	strb	r2, [r3, #0]
	  }

	  if (g_u8AllLinesUnicolor == YELLOW_COLOR) {
 80006da:	4b2e      	ldr	r3, [pc, #184]	; (8000794 <main+0x578>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d10b      	bne.n	80006fa <main+0x4de>

		  g_u8AllLEDCallGreenData = LED_ON;            //так горит жёлтый, в зависимости от того, что OFF будет другой цвет - цикл?? условие7??? чтобы по порядку с прерыванием
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <main+0x57c>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDRespGreenData = LED_ON;
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <main+0x580>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDCallRedData = LED_ON;
 80006ee:	4b2c      	ldr	r3, [pc, #176]	; (80007a0 <main+0x584>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDRespRedData = LED_ON;
 80006f4:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <main+0x588>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
	  }


	  if (g_u8DisplayAllLinesUnicolor) {
 80006fa:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <main+0x58c>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d100      	bne.n	8000704 <main+0x4e8>
 8000702:	e5ed      	b.n	80002e0 <main+0xc4>

	      HAL_GPIO_WritePin(LED_CALL_GREEN_SR_DATA_GPIO_Port, LED_CALL_GREEN_SR_DATA_Pin, g_u8AllLEDCallGreenData);
 8000704:	4b24      	ldr	r3, [pc, #144]	; (8000798 <main+0x57c>)
 8000706:	781a      	ldrb	r2, [r3, #0]
 8000708:	2390      	movs	r3, #144	; 0x90
 800070a:	05db      	lsls	r3, r3, #23
 800070c:	2120      	movs	r1, #32
 800070e:	0018      	movs	r0, r3
 8000710:	f000 fdc3 	bl	800129a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_RESP_GREEN_SR_DATA_GPIO_Port, LED_RESP_GREEN_SR_DATA_Pin, g_u8AllLEDRespGreenData);
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <main+0x580>)
 8000716:	781a      	ldrb	r2, [r3, #0]
 8000718:	2390      	movs	r3, #144	; 0x90
 800071a:	05db      	lsls	r3, r3, #23
 800071c:	2108      	movs	r1, #8
 800071e:	0018      	movs	r0, r3
 8000720:	f000 fdbb 	bl	800129a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_CALL_RED_SR_DATA_GPIO_Port, LED_CALL_RED_SR_DATA_Pin, g_u8AllLEDCallRedData);
 8000724:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <main+0x584>)
 8000726:	781a      	ldrb	r2, [r3, #0]
 8000728:	2390      	movs	r3, #144	; 0x90
 800072a:	05db      	lsls	r3, r3, #23
 800072c:	2110      	movs	r1, #16
 800072e:	0018      	movs	r0, r3
 8000730:	f000 fdb3 	bl	800129a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_RESP_RED_SR_DATA_GPIO_Port, LED_RESP_RED_SR_DATA_Pin, g_u8AllLEDRespRedData);
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <main+0x588>)
 8000736:	781a      	ldrb	r2, [r3, #0]
 8000738:	2390      	movs	r3, #144	; 0x90
 800073a:	05db      	lsls	r3, r3, #23
 800073c:	2104      	movs	r1, #4
 800073e:	0018      	movs	r0, r3
 8000740:	f000 fdab 	bl	800129a <HAL_GPIO_WritePin>
 8000744:	e032      	b.n	80007ac <main+0x590>
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	200000b0 	.word	0x200000b0
 800074c:	200000b1 	.word	0x200000b1
 8000750:	200000b4 	.word	0x200000b4
 8000754:	48000400 	.word	0x48000400
 8000758:	2000009e 	.word	0x2000009e
 800075c:	20000000 	.word	0x20000000
 8000760:	2000009d 	.word	0x2000009d
 8000764:	2000009c 	.word	0x2000009c
 8000768:	20000004 	.word	0x20000004
 800076c:	20000094 	.word	0x20000094
 8000770:	20000096 	.word	0x20000096
 8000774:	2000000c 	.word	0x2000000c
 8000778:	20000095 	.word	0x20000095
 800077c:	20000097 	.word	0x20000097
 8000780:	20000014 	.word	0x20000014
 8000784:	2000001c 	.word	0x2000001c
 8000788:	200000a0 	.word	0x200000a0
 800078c:	200000a1 	.word	0x200000a1
 8000790:	20000002 	.word	0x20000002
 8000794:	20000001 	.word	0x20000001
 8000798:	20000098 	.word	0x20000098
 800079c:	20000099 	.word	0x20000099
 80007a0:	2000009a 	.word	0x2000009a
 80007a4:	2000009b 	.word	0x2000009b
 80007a8:	2000009f 	.word	0x2000009f
		  for (uint8_t n = 0; n < NUMBER_OF_LINES; n++) {
 80007ac:	1dfb      	adds	r3, r7, #7
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	e012      	b.n	80007da <main+0x5be>
			  HAL_GPIO_WritePin(STP_SR_LED_CLK_GPIO_Port, STP_SR_LED_CLK_Pin, GPIO_PIN_SET);
 80007b4:	2390      	movs	r3, #144	; 0x90
 80007b6:	05db      	lsls	r3, r3, #23
 80007b8:	2201      	movs	r2, #1
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 fd6c 	bl	800129a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(STP_SR_LED_CLK_GPIO_Port, STP_SR_LED_CLK_Pin, GPIO_PIN_RESET);
 80007c2:	2390      	movs	r3, #144	; 0x90
 80007c4:	05db      	lsls	r3, r3, #23
 80007c6:	2200      	movs	r2, #0
 80007c8:	2180      	movs	r1, #128	; 0x80
 80007ca:	0018      	movs	r0, r3
 80007cc:	f000 fd65 	bl	800129a <HAL_GPIO_WritePin>
		  for (uint8_t n = 0; n < NUMBER_OF_LINES; n++) {
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	781a      	ldrb	r2, [r3, #0]
 80007d4:	1dfb      	adds	r3, r7, #7
 80007d6:	3201      	adds	r2, #1
 80007d8:	701a      	strb	r2, [r3, #0]
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b07      	cmp	r3, #7
 80007e0:	d9e8      	bls.n	80007b4 <main+0x598>
		  }
		  g_u8DisplayAllLinesUnicolor = 0;
 80007e2:	4b02      	ldr	r3, [pc, #8]	; (80007ec <main+0x5d0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
if (g_u8NeedToRingLine) {
 80007e8:	e57a      	b.n	80002e0 <main+0xc4>
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	2000009f 	.word	0x2000009f

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b093      	sub	sp, #76	; 0x4c
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	2414      	movs	r4, #20
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	0018      	movs	r0, r3
 80007fc:	2334      	movs	r3, #52	; 0x34
 80007fe:	001a      	movs	r2, r3
 8000800:	2100      	movs	r1, #0
 8000802:	f001 feb1 	bl	8002568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	0018      	movs	r0, r3
 800080a:	2310      	movs	r3, #16
 800080c:	001a      	movs	r2, r3
 800080e:	2100      	movs	r1, #0
 8000810:	f001 feaa 	bl	8002568 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000814:	0021      	movs	r1, r4
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2202      	movs	r2, #2
 800081a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2201      	movs	r2, #1
 8000820:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2210      	movs	r2, #16
 8000826:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2202      	movs	r2, #2
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	0212      	lsls	r2, r2, #8
 8000834:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	0312      	lsls	r2, r2, #12
 800083c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2200      	movs	r2, #0
 8000842:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000844:	187b      	adds	r3, r7, r1
 8000846:	0018      	movs	r0, r3
 8000848:	f000 fd44 	bl	80012d4 <HAL_RCC_OscConfig>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000850:	f000 f9a8 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2207      	movs	r2, #7
 8000858:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2202      	movs	r2, #2
 800085e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2101      	movs	r1, #1
 8000870:	0018      	movs	r0, r3
 8000872:	f001 f8b5 	bl	80019e0 <HAL_RCC_ClockConfig>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800087a:	f000 f993 	bl	8000ba4 <Error_Handler>
  }
}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b013      	add	sp, #76	; 0x4c
 8000884:	bd90      	pop	{r4, r7, pc}
	...

08000888 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088e:	2308      	movs	r3, #8
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	0018      	movs	r0, r3
 8000894:	2310      	movs	r3, #16
 8000896:	001a      	movs	r2, r3
 8000898:	2100      	movs	r1, #0
 800089a:	f001 fe65 	bl	8002568 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089e:	003b      	movs	r3, r7
 80008a0:	0018      	movs	r0, r3
 80008a2:	2308      	movs	r3, #8
 80008a4:	001a      	movs	r2, r3
 80008a6:	2100      	movs	r1, #0
 80008a8:	f001 fe5e 	bl	8002568 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_TIM3_Init+0xa0>)
 80008ae:	4a1f      	ldr	r2, [pc, #124]	; (800092c <MX_TIM3_Init+0xa4>)
 80008b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 80008b2:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <MX_TIM3_Init+0xa0>)
 80008b4:	4a1e      	ldr	r2, [pc, #120]	; (8000930 <MX_TIM3_Init+0xa8>)
 80008b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_TIM3_Init+0xa0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64999;
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_TIM3_Init+0xa0>)
 80008c0:	4a1c      	ldr	r2, [pc, #112]	; (8000934 <MX_TIM3_Init+0xac>)
 80008c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_TIM3_Init+0xa0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_TIM3_Init+0xa0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <MX_TIM3_Init+0xa0>)
 80008d2:	0018      	movs	r0, r3
 80008d4:	f001 f9f0 	bl	8001cb8 <HAL_TIM_Base_Init>
 80008d8:	1e03      	subs	r3, r0, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80008dc:	f000 f962 	bl	8000ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e0:	2108      	movs	r1, #8
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	0152      	lsls	r2, r2, #5
 80008e8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008ea:	187a      	adds	r2, r7, r1
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_TIM3_Init+0xa0>)
 80008ee:	0011      	movs	r1, r2
 80008f0:	0018      	movs	r0, r3
 80008f2:	f001 fb99 	bl	8002028 <HAL_TIM_ConfigClockSource>
 80008f6:	1e03      	subs	r3, r0, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80008fa:	f000 f953 	bl	8000ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fe:	003b      	movs	r3, r7
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000904:	003b      	movs	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800090a:	003a      	movs	r2, r7
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_TIM3_Init+0xa0>)
 800090e:	0011      	movs	r1, r2
 8000910:	0018      	movs	r0, r3
 8000912:	f001 fd97 	bl	8002444 <HAL_TIMEx_MasterConfigSynchronization>
 8000916:	1e03      	subs	r3, r0, #0
 8000918:	d001      	beq.n	800091e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800091a:	f000 f943 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b006      	add	sp, #24
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	2000004c 	.word	0x2000004c
 800092c:	40000400 	.word	0x40000400
 8000930:	00003e7f 	.word	0x00003e7f
 8000934:	0000fde7 	.word	0x0000fde7

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b089      	sub	sp, #36	; 0x24
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	240c      	movs	r4, #12
 8000940:	193b      	adds	r3, r7, r4
 8000942:	0018      	movs	r0, r3
 8000944:	2314      	movs	r3, #20
 8000946:	001a      	movs	r2, r3
 8000948:	2100      	movs	r1, #0
 800094a:	f001 fe0d 	bl	8002568 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b3c      	ldr	r3, [pc, #240]	; (8000a40 <MX_GPIO_Init+0x108>)
 8000950:	695a      	ldr	r2, [r3, #20]
 8000952:	4b3b      	ldr	r3, [pc, #236]	; (8000a40 <MX_GPIO_Init+0x108>)
 8000954:	2180      	movs	r1, #128	; 0x80
 8000956:	0289      	lsls	r1, r1, #10
 8000958:	430a      	orrs	r2, r1
 800095a:	615a      	str	r2, [r3, #20]
 800095c:	4b38      	ldr	r3, [pc, #224]	; (8000a40 <MX_GPIO_Init+0x108>)
 800095e:	695a      	ldr	r2, [r3, #20]
 8000960:	2380      	movs	r3, #128	; 0x80
 8000962:	029b      	lsls	r3, r3, #10
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	4b35      	ldr	r3, [pc, #212]	; (8000a40 <MX_GPIO_Init+0x108>)
 800096c:	695a      	ldr	r2, [r3, #20]
 800096e:	4b34      	ldr	r3, [pc, #208]	; (8000a40 <MX_GPIO_Init+0x108>)
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	02c9      	lsls	r1, r1, #11
 8000974:	430a      	orrs	r2, r1
 8000976:	615a      	str	r2, [r3, #20]
 8000978:	4b31      	ldr	r3, [pc, #196]	; (8000a40 <MX_GPIO_Init+0x108>)
 800097a:	695a      	ldr	r2, [r3, #20]
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	02db      	lsls	r3, r3, #11
 8000980:	4013      	ands	r3, r2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RESP_RED_SR_DATA_Pin|LED_RESP_GREEN_SR_DATA_Pin|LED_CALL_RED_SR_DATA_Pin|LED_CALL_GREEN_SR_DATA_Pin
 8000986:	492f      	ldr	r1, [pc, #188]	; (8000a44 <MX_GPIO_Init+0x10c>)
 8000988:	2390      	movs	r3, #144	; 0x90
 800098a:	05db      	lsls	r3, r3, #23
 800098c:	2200      	movs	r2, #0
 800098e:	0018      	movs	r0, r3
 8000990:	f000 fc83 	bl	800129a <HAL_GPIO_WritePin>
                          |STP_SR_LED_nCLR_Pin|STP_SR_LED_CLK_Pin|LINE_RESPONSE_SR_SHnLD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LINE_RESPONSE_SR_CLK_Pin|LINE_CALL_SR_nCLR_Pin|LINE_CALL_SR_CLK_Pin|LINE_CALL_SR_DATA_Pin, GPIO_PIN_RESET);
 8000994:	4b2c      	ldr	r3, [pc, #176]	; (8000a48 <MX_GPIO_Init+0x110>)
 8000996:	2200      	movs	r2, #0
 8000998:	21e8      	movs	r1, #232	; 0xe8
 800099a:	0018      	movs	r0, r3
 800099c:	f000 fc7d 	bl	800129a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RESP_RED_SR_DATA_Pin LED_RESP_GREEN_SR_DATA_Pin LED_CALL_RED_SR_DATA_Pin LED_CALL_GREEN_SR_DATA_Pin
                           STP_SR_LED_nCLR_Pin STP_SR_LED_CLK_Pin */
  GPIO_InitStruct.Pin = LED_RESP_RED_SR_DATA_Pin|LED_RESP_GREEN_SR_DATA_Pin|LED_CALL_RED_SR_DATA_Pin|LED_CALL_GREEN_SR_DATA_Pin
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	22fc      	movs	r2, #252	; 0xfc
 80009a4:	601a      	str	r2, [r3, #0]
                          |STP_SR_LED_nCLR_Pin|STP_SR_LED_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	193b      	adds	r3, r7, r4
 80009a8:	2201      	movs	r2, #1
 80009aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	2201      	movs	r2, #1
 80009b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	193a      	adds	r2, r7, r4
 80009ba:	2390      	movs	r3, #144	; 0x90
 80009bc:	05db      	lsls	r3, r3, #23
 80009be:	0011      	movs	r1, r2
 80009c0:	0018      	movs	r0, r3
 80009c2:	f000 fad5 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LINE_RESPONSE_SR_SHnLD_Pin */
  GPIO_InitStruct.Pin = LINE_RESPONSE_SR_SHnLD_Pin;
 80009c6:	0021      	movs	r1, r4
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2280      	movs	r2, #128	; 0x80
 80009cc:	0212      	lsls	r2, r2, #8
 80009ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	000c      	movs	r4, r1
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	2201      	movs	r2, #1
 80009d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	193b      	adds	r3, r7, r4
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LINE_RESPONSE_SR_SHnLD_GPIO_Port, &GPIO_InitStruct);
 80009e4:	193a      	adds	r2, r7, r4
 80009e6:	2390      	movs	r3, #144	; 0x90
 80009e8:	05db      	lsls	r3, r3, #23
 80009ea:	0011      	movs	r1, r2
 80009ec:	0018      	movs	r0, r3
 80009ee:	f000 fabf 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LINE_RESPONSE_SR_CLK_Pin LINE_CALL_SR_nCLR_Pin LINE_CALL_SR_CLK_Pin LINE_CALL_SR_DATA_Pin */
  GPIO_InitStruct.Pin = LINE_RESPONSE_SR_CLK_Pin|LINE_CALL_SR_nCLR_Pin|LINE_CALL_SR_CLK_Pin|LINE_CALL_SR_DATA_Pin;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	22e8      	movs	r2, #232	; 0xe8
 80009f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	193b      	adds	r3, r7, r4
 80009fa:	2201      	movs	r2, #1
 80009fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	193b      	adds	r3, r7, r4
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	193b      	adds	r3, r7, r4
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <MX_GPIO_Init+0x110>)
 8000a0e:	0019      	movs	r1, r3
 8000a10:	0010      	movs	r0, r2
 8000a12:	f000 faad 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LINE_RESPONSE_SR_DATA_Pin */
  GPIO_InitStruct.Pin = LINE_RESPONSE_SR_DATA_Pin;
 8000a16:	0021      	movs	r1, r4
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2210      	movs	r2, #16
 8000a1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LINE_RESPONSE_SR_DATA_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <MX_GPIO_Init+0x110>)
 8000a2e:	0019      	movs	r1, r3
 8000a30:	0010      	movs	r0, r2
 8000a32:	f000 fa9d 	bl	8000f70 <HAL_GPIO_Init>

}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b009      	add	sp, #36	; 0x24
 8000a3c:	bd90      	pop	{r4, r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	40021000 	.word	0x40021000
 8000a44:	000080fc 	.word	0x000080fc
 8000a48:	48000400 	.word	0x48000400

08000a4c <ClearLEDSR>:

/* USER CODE BEGIN 4 */

void ClearLEDSR(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(STP_SR_LED_nCLR_GPIO_Port, STP_SR_LED_nCLR_Pin, GPIO_PIN_RESET);
 8000a50:	2390      	movs	r3, #144	; 0x90
 8000a52:	05db      	lsls	r3, r3, #23
 8000a54:	2200      	movs	r2, #0
 8000a56:	2140      	movs	r1, #64	; 0x40
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f000 fc1e 	bl	800129a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STP_SR_LED_nCLR_GPIO_Port, STP_SR_LED_nCLR_Pin, GPIO_PIN_SET);
 8000a5e:	2390      	movs	r3, #144	; 0x90
 8000a60:	05db      	lsls	r3, r3, #23
 8000a62:	2201      	movs	r2, #1
 8000a64:	2140      	movs	r1, #64	; 0x40
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 fc17 	bl	800129a <HAL_GPIO_WritePin>
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <LoadLEDSR>:

void LoadLEDSR(void) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < NUMBER_OF_LINES; i++) {
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
 8000a80:	e056      	b.n	8000b30 <LoadLEDSR+0xbc>
        HAL_GPIO_WritePin(LED_CALL_GREEN_SR_DATA_GPIO_Port, LED_CALL_GREEN_SR_DATA_Pin, (g_u8LEDCallGreenData & SR_DATA_bm));
 8000a82:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <LoadLEDSR+0xd0>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2201      	movs	r2, #1
 8000a88:	4013      	ands	r3, r2
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	2390      	movs	r3, #144	; 0x90
 8000a8e:	05db      	lsls	r3, r3, #23
 8000a90:	2120      	movs	r1, #32
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 fc01 	bl	800129a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RESP_GREEN_SR_DATA_GPIO_Port, LED_RESP_GREEN_SR_DATA_Pin, (g_u8LEDRespGreenData & SR_DATA_bm));
 8000a98:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <LoadLEDSR+0xd4>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	2390      	movs	r3, #144	; 0x90
 8000aa4:	05db      	lsls	r3, r3, #23
 8000aa6:	2108      	movs	r1, #8
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f000 fbf6 	bl	800129a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_CALL_RED_SR_DATA_GPIO_Port, LED_CALL_RED_SR_DATA_Pin, (g_u8LEDCallRedData & SR_DATA_bm));
 8000aae:	4b27      	ldr	r3, [pc, #156]	; (8000b4c <LoadLEDSR+0xd8>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	2390      	movs	r3, #144	; 0x90
 8000aba:	05db      	lsls	r3, r3, #23
 8000abc:	2110      	movs	r1, #16
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f000 fbeb 	bl	800129a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RESP_RED_SR_DATA_GPIO_Port, LED_RESP_RED_SR_DATA_Pin, (g_u8LEDRespRedData & SR_DATA_bm));
 8000ac4:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <LoadLEDSR+0xdc>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4013      	ands	r3, r2
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	2390      	movs	r3, #144	; 0x90
 8000ad0:	05db      	lsls	r3, r3, #23
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f000 fbe0 	bl	800129a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(STP_SR_LED_CLK_GPIO_Port, STP_SR_LED_CLK_Pin, GPIO_PIN_SET);
 8000ada:	2390      	movs	r3, #144	; 0x90
 8000adc:	05db      	lsls	r3, r3, #23
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 fbd9 	bl	800129a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STP_SR_LED_CLK_GPIO_Port, STP_SR_LED_CLK_Pin, GPIO_PIN_RESET);
 8000ae8:	2390      	movs	r3, #144	; 0x90
 8000aea:	05db      	lsls	r3, r3, #23
 8000aec:	2200      	movs	r2, #0
 8000aee:	2180      	movs	r1, #128	; 0x80
 8000af0:	0018      	movs	r0, r3
 8000af2:	f000 fbd2 	bl	800129a <HAL_GPIO_WritePin>

		g_u8LEDCallGreenData = g_u8LEDCallGreenData >> 1;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <LoadLEDSR+0xd0>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	085b      	lsrs	r3, r3, #1
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <LoadLEDSR+0xd0>)
 8000b00:	701a      	strb	r2, [r3, #0]
		g_u8LEDRespGreenData = g_u8LEDRespGreenData >> 1;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <LoadLEDSR+0xd4>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	085b      	lsrs	r3, r3, #1
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <LoadLEDSR+0xd4>)
 8000b0c:	701a      	strb	r2, [r3, #0]
		g_u8LEDCallRedData = g_u8LEDCallRedData >> 1;
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <LoadLEDSR+0xd8>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	085b      	lsrs	r3, r3, #1
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <LoadLEDSR+0xd8>)
 8000b18:	701a      	strb	r2, [r3, #0]
		g_u8LEDRespRedData = g_u8LEDRespRedData >> 1;
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <LoadLEDSR+0xdc>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	085b      	lsrs	r3, r3, #1
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <LoadLEDSR+0xdc>)
 8000b24:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_LINES; i++) {
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781a      	ldrb	r2, [r3, #0]
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	3201      	adds	r2, #1
 8000b2e:	701a      	strb	r2, [r3, #0]
 8000b30:	1dfb      	adds	r3, r7, #7
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b07      	cmp	r3, #7
 8000b36:	d9a4      	bls.n	8000a82 <LoadLEDSR+0xe>
	}
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b002      	add	sp, #8
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	20000094 	.word	0x20000094
 8000b48:	20000095 	.word	0x20000095
 8000b4c:	20000096 	.word	0x20000096
 8000b50:	20000097 	.word	0x20000097

08000b54 <ClearCallSR>:

void ClearCallSR(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LINE_CALL_SR_nCLR_GPIO_Port, LINE_CALL_SR_nCLR_Pin, GPIO_PIN_RESET);
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <ClearCallSR+0x24>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2120      	movs	r1, #32
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 fb9b 	bl	800129a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LINE_CALL_SR_nCLR_GPIO_Port, LINE_CALL_SR_nCLR_Pin, GPIO_PIN_SET);
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <ClearCallSR+0x24>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	2120      	movs	r1, #32
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 fb95 	bl	800129a <HAL_GPIO_WritePin>
}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	48000400 	.word	0x48000400

08000b7c <HAL_TIM_PeriodElapsedCallback>:
//	if (ActiveRowColor == NUMBER_OF_COLORS){
//		ActiveRowColor = 0;
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]

	if (htim == &htim3)
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d102      	bne.n	8000b92 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		g_u8NeedToDisplayLEDData = 1;
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]


	}
}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b002      	add	sp, #8
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	2000004c 	.word	0x2000004c
 8000ba0:	20000002 	.word	0x20000002

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	e7fe      	b.n	8000bac <Error_Handler+0x8>
	...

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bb8:	699a      	ldr	r2, [r3, #24]
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	619a      	str	r2, [r3, #24]
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4013      	ands	r3, r2
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bd0:	69da      	ldr	r2, [r3, #28]
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	0549      	lsls	r1, r1, #21
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	61da      	str	r2, [r3, #28]
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bde:	69da      	ldr	r2, [r3, #28]
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	055b      	lsls	r3, r3, #21
 8000be4:	4013      	ands	r3, r2
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b002      	add	sp, #8
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <HAL_TIM_Base_MspInit+0x44>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d113      	bne.n	8000c32 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <HAL_TIM_Base_MspInit+0x48>)
 8000c0c:	69da      	ldr	r2, [r3, #28]
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_TIM_Base_MspInit+0x48>)
 8000c10:	2102      	movs	r1, #2
 8000c12:	430a      	orrs	r2, r1
 8000c14:	61da      	str	r2, [r3, #28]
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <HAL_TIM_Base_MspInit+0x48>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	2010      	movs	r0, #16
 8000c28:	f000 f970 	bl	8000f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c2c:	2010      	movs	r0, #16
 8000c2e:	f000 f982 	bl	8000f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b004      	add	sp, #16
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	40000400 	.word	0x40000400
 8000c40:	40021000 	.word	0x40021000

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <NMI_Handler+0x4>

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c68:	f000 f888 	bl	8000d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <TIM3_IRQHandler+0x14>)
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f001 f8be 	bl	8001dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	2000004c 	.word	0x2000004c

08000c8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c9a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c9c:	f7ff fff6 	bl	8000c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ca2:	490d      	ldr	r1, [pc, #52]	; (8000cd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <LoopForever+0xe>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb8:	4c0a      	ldr	r4, [pc, #40]	; (8000ce4 <LoopForever+0x16>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cc6:	f001 fc2b 	bl	8002520 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cca:	f7ff faa7 	bl	800021c <main>

08000cce <LoopForever>:

LoopForever:
    b LoopForever
 8000cce:	e7fe      	b.n	8000cce <LoopForever>
  ldr   r0, =_estack
 8000cd0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000cdc:	080025d0 	.word	0x080025d0
  ldr r2, =_sbss
 8000ce0:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000ce4:	200000f8 	.word	0x200000f8

08000ce8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC1_COMP_IRQHandler>
	...

08000cec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <HAL_Init+0x24>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_Init+0x24>)
 8000cf6:	2110      	movs	r1, #16
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f809 	bl	8000d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d02:	f7ff ff55 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	40022000 	.word	0x40022000

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_InitTick+0x5c>)
 8000d1e:	681c      	ldr	r4, [r3, #0]
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_InitTick+0x60>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	0019      	movs	r1, r3
 8000d26:	23fa      	movs	r3, #250	; 0xfa
 8000d28:	0098      	lsls	r0, r3, #2
 8000d2a:	f7ff f9eb 	bl	8000104 <__udivsi3>
 8000d2e:	0003      	movs	r3, r0
 8000d30:	0019      	movs	r1, r3
 8000d32:	0020      	movs	r0, r4
 8000d34:	f7ff f9e6 	bl	8000104 <__udivsi3>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f000 f90b 	bl	8000f56 <HAL_SYSTICK_Config>
 8000d40:	1e03      	subs	r3, r0, #0
 8000d42:	d001      	beq.n	8000d48 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e00f      	b.n	8000d68 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d80b      	bhi.n	8000d66 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	2301      	movs	r3, #1
 8000d52:	425b      	negs	r3, r3
 8000d54:	2200      	movs	r2, #0
 8000d56:	0018      	movs	r0, r3
 8000d58:	f000 f8d8 	bl	8000f0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_InitTick+0x64>)
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e000      	b.n	8000d68 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	0018      	movs	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b003      	add	sp, #12
 8000d6e:	bd90      	pop	{r4, r7, pc}
 8000d70:	20000024 	.word	0x20000024
 8000d74:	2000002c 	.word	0x2000002c
 8000d78:	20000028 	.word	0x20000028

08000d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <HAL_IncTick+0x1c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	001a      	movs	r2, r3
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <HAL_IncTick+0x20>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	18d2      	adds	r2, r2, r3
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <HAL_IncTick+0x20>)
 8000d8e:	601a      	str	r2, [r3, #0]
}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	2000002c 	.word	0x2000002c
 8000d9c:	200000f4 	.word	0x200000f4

08000da0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b02      	ldr	r3, [pc, #8]	; (8000db0 <HAL_GetTick+0x10>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	0018      	movs	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	200000f4 	.word	0x200000f4

08000db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	0002      	movs	r2, r0
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b7f      	cmp	r3, #127	; 0x7f
 8000dc6:	d809      	bhi.n	8000ddc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc8:	1dfb      	adds	r3, r7, #7
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	001a      	movs	r2, r3
 8000dce:	231f      	movs	r3, #31
 8000dd0:	401a      	ands	r2, r3
 8000dd2:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <__NVIC_EnableIRQ+0x30>)
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	4091      	lsls	r1, r2
 8000dd8:	000a      	movs	r2, r1
 8000dda:	601a      	str	r2, [r3, #0]
  }
}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b002      	add	sp, #8
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	0002      	movs	r2, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8000dfc:	d828      	bhi.n	8000e50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dfe:	4a2f      	ldr	r2, [pc, #188]	; (8000ebc <__NVIC_SetPriority+0xd4>)
 8000e00:	1dfb      	adds	r3, r7, #7
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b25b      	sxtb	r3, r3
 8000e06:	089b      	lsrs	r3, r3, #2
 8000e08:	33c0      	adds	r3, #192	; 0xc0
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	589b      	ldr	r3, [r3, r2]
 8000e0e:	1dfa      	adds	r2, r7, #7
 8000e10:	7812      	ldrb	r2, [r2, #0]
 8000e12:	0011      	movs	r1, r2
 8000e14:	2203      	movs	r2, #3
 8000e16:	400a      	ands	r2, r1
 8000e18:	00d2      	lsls	r2, r2, #3
 8000e1a:	21ff      	movs	r1, #255	; 0xff
 8000e1c:	4091      	lsls	r1, r2
 8000e1e:	000a      	movs	r2, r1
 8000e20:	43d2      	mvns	r2, r2
 8000e22:	401a      	ands	r2, r3
 8000e24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	019b      	lsls	r3, r3, #6
 8000e2a:	22ff      	movs	r2, #255	; 0xff
 8000e2c:	401a      	ands	r2, r3
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	0018      	movs	r0, r3
 8000e34:	2303      	movs	r3, #3
 8000e36:	4003      	ands	r3, r0
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e3c:	481f      	ldr	r0, [pc, #124]	; (8000ebc <__NVIC_SetPriority+0xd4>)
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	b25b      	sxtb	r3, r3
 8000e44:	089b      	lsrs	r3, r3, #2
 8000e46:	430a      	orrs	r2, r1
 8000e48:	33c0      	adds	r3, #192	; 0xc0
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e4e:	e031      	b.n	8000eb4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e50:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <__NVIC_SetPriority+0xd8>)
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	0019      	movs	r1, r3
 8000e58:	230f      	movs	r3, #15
 8000e5a:	400b      	ands	r3, r1
 8000e5c:	3b08      	subs	r3, #8
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3306      	adds	r3, #6
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	18d3      	adds	r3, r2, r3
 8000e66:	3304      	adds	r3, #4
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	1dfa      	adds	r2, r7, #7
 8000e6c:	7812      	ldrb	r2, [r2, #0]
 8000e6e:	0011      	movs	r1, r2
 8000e70:	2203      	movs	r2, #3
 8000e72:	400a      	ands	r2, r1
 8000e74:	00d2      	lsls	r2, r2, #3
 8000e76:	21ff      	movs	r1, #255	; 0xff
 8000e78:	4091      	lsls	r1, r2
 8000e7a:	000a      	movs	r2, r1
 8000e7c:	43d2      	mvns	r2, r2
 8000e7e:	401a      	ands	r2, r3
 8000e80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	019b      	lsls	r3, r3, #6
 8000e86:	22ff      	movs	r2, #255	; 0xff
 8000e88:	401a      	ands	r2, r3
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	0018      	movs	r0, r3
 8000e90:	2303      	movs	r3, #3
 8000e92:	4003      	ands	r3, r0
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e98:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <__NVIC_SetPriority+0xd8>)
 8000e9a:	1dfb      	adds	r3, r7, #7
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	001c      	movs	r4, r3
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	4023      	ands	r3, r4
 8000ea4:	3b08      	subs	r3, #8
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	3306      	adds	r3, #6
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	18c3      	adds	r3, r0, r3
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	601a      	str	r2, [r3, #0]
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b003      	add	sp, #12
 8000eba:	bd90      	pop	{r4, r7, pc}
 8000ebc:	e000e100 	.word	0xe000e100
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	1e5a      	subs	r2, r3, #1
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	045b      	lsls	r3, r3, #17
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d301      	bcc.n	8000edc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e010      	b.n	8000efe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <SysTick_Config+0x44>)
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	3a01      	subs	r2, #1
 8000ee2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	425b      	negs	r3, r3
 8000ee8:	2103      	movs	r1, #3
 8000eea:	0018      	movs	r0, r3
 8000eec:	f7ff ff7c 	bl	8000de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <SysTick_Config+0x44>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <SysTick_Config+0x44>)
 8000ef8:	2207      	movs	r2, #7
 8000efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	0018      	movs	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b002      	add	sp, #8
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	e000e010 	.word	0xe000e010

08000f0c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	210f      	movs	r1, #15
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	1c02      	adds	r2, r0, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	0011      	movs	r1, r2
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f7ff ff5d 	bl	8000de8 <__NVIC_SetPriority>
}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b004      	add	sp, #16
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	0002      	movs	r2, r0
 8000f3e:	1dfb      	adds	r3, r7, #7
 8000f40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f7ff ff33 	bl	8000db4 <__NVIC_EnableIRQ>
}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b002      	add	sp, #8
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	0018      	movs	r0, r3
 8000f62:	f7ff ffaf 	bl	8000ec4 <SysTick_Config>
 8000f66:	0003      	movs	r3, r0
}
 8000f68:	0018      	movs	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b002      	add	sp, #8
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7e:	e155      	b.n	800122c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2101      	movs	r1, #1
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	4091      	lsls	r1, r2
 8000f8a:	000a      	movs	r2, r1
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d100      	bne.n	8000f98 <HAL_GPIO_Init+0x28>
 8000f96:	e146      	b.n	8001226 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d005      	beq.n	8000fb0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2203      	movs	r2, #3
 8000faa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d130      	bne.n	8001012 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	409a      	lsls	r2, r3
 8000fbe:	0013      	movs	r3, r2
 8000fc0:	43da      	mvns	r2, r3
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	409a      	lsls	r2, r3
 8000fd2:	0013      	movs	r3, r2
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	409a      	lsls	r2, r3
 8000fec:	0013      	movs	r3, r2
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
 8001004:	0013      	movs	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2203      	movs	r2, #3
 8001018:	4013      	ands	r3, r2
 800101a:	2b03      	cmp	r3, #3
 800101c:	d017      	beq.n	800104e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	409a      	lsls	r2, r3
 800102c:	0013      	movs	r3, r2
 800102e:	43da      	mvns	r2, r3
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	409a      	lsls	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2203      	movs	r2, #3
 8001054:	4013      	ands	r3, r2
 8001056:	2b02      	cmp	r3, #2
 8001058:	d123      	bne.n	80010a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	08da      	lsrs	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3208      	adds	r2, #8
 8001062:	0092      	lsls	r2, r2, #2
 8001064:	58d3      	ldr	r3, [r2, r3]
 8001066:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2207      	movs	r2, #7
 800106c:	4013      	ands	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	220f      	movs	r2, #15
 8001072:	409a      	lsls	r2, r3
 8001074:	0013      	movs	r3, r2
 8001076:	43da      	mvns	r2, r3
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	691a      	ldr	r2, [r3, #16]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2107      	movs	r1, #7
 8001086:	400b      	ands	r3, r1
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	409a      	lsls	r2, r3
 800108c:	0013      	movs	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	08da      	lsrs	r2, r3, #3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3208      	adds	r2, #8
 800109c:	0092      	lsls	r2, r2, #2
 800109e:	6939      	ldr	r1, [r7, #16]
 80010a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	409a      	lsls	r2, r3
 80010b0:	0013      	movs	r3, r2
 80010b2:	43da      	mvns	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2203      	movs	r2, #3
 80010c0:	401a      	ands	r2, r3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	409a      	lsls	r2, r3
 80010c8:	0013      	movs	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	23c0      	movs	r3, #192	; 0xc0
 80010dc:	029b      	lsls	r3, r3, #10
 80010de:	4013      	ands	r3, r2
 80010e0:	d100      	bne.n	80010e4 <HAL_GPIO_Init+0x174>
 80010e2:	e0a0      	b.n	8001226 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e4:	4b57      	ldr	r3, [pc, #348]	; (8001244 <HAL_GPIO_Init+0x2d4>)
 80010e6:	699a      	ldr	r2, [r3, #24]
 80010e8:	4b56      	ldr	r3, [pc, #344]	; (8001244 <HAL_GPIO_Init+0x2d4>)
 80010ea:	2101      	movs	r1, #1
 80010ec:	430a      	orrs	r2, r1
 80010ee:	619a      	str	r2, [r3, #24]
 80010f0:	4b54      	ldr	r3, [pc, #336]	; (8001244 <HAL_GPIO_Init+0x2d4>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	2201      	movs	r2, #1
 80010f6:	4013      	ands	r3, r2
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010fc:	4a52      	ldr	r2, [pc, #328]	; (8001248 <HAL_GPIO_Init+0x2d8>)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	3302      	adds	r3, #2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	589b      	ldr	r3, [r3, r2]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	2203      	movs	r2, #3
 800110e:	4013      	ands	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	220f      	movs	r2, #15
 8001114:	409a      	lsls	r2, r3
 8001116:	0013      	movs	r3, r2
 8001118:	43da      	mvns	r2, r3
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	2390      	movs	r3, #144	; 0x90
 8001124:	05db      	lsls	r3, r3, #23
 8001126:	429a      	cmp	r2, r3
 8001128:	d019      	beq.n	800115e <HAL_GPIO_Init+0x1ee>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a47      	ldr	r2, [pc, #284]	; (800124c <HAL_GPIO_Init+0x2dc>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d013      	beq.n	800115a <HAL_GPIO_Init+0x1ea>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a46      	ldr	r2, [pc, #280]	; (8001250 <HAL_GPIO_Init+0x2e0>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d00d      	beq.n	8001156 <HAL_GPIO_Init+0x1e6>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a45      	ldr	r2, [pc, #276]	; (8001254 <HAL_GPIO_Init+0x2e4>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d007      	beq.n	8001152 <HAL_GPIO_Init+0x1e2>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a44      	ldr	r2, [pc, #272]	; (8001258 <HAL_GPIO_Init+0x2e8>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d101      	bne.n	800114e <HAL_GPIO_Init+0x1de>
 800114a:	2304      	movs	r3, #4
 800114c:	e008      	b.n	8001160 <HAL_GPIO_Init+0x1f0>
 800114e:	2305      	movs	r3, #5
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x1f0>
 8001152:	2303      	movs	r3, #3
 8001154:	e004      	b.n	8001160 <HAL_GPIO_Init+0x1f0>
 8001156:	2302      	movs	r3, #2
 8001158:	e002      	b.n	8001160 <HAL_GPIO_Init+0x1f0>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <HAL_GPIO_Init+0x1f0>
 800115e:	2300      	movs	r3, #0
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	2103      	movs	r1, #3
 8001164:	400a      	ands	r2, r1
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	4093      	lsls	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001170:	4935      	ldr	r1, [pc, #212]	; (8001248 <HAL_GPIO_Init+0x2d8>)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117e:	4b37      	ldr	r3, [pc, #220]	; (800125c <HAL_GPIO_Init+0x2ec>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	43da      	mvns	r2, r3
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	035b      	lsls	r3, r3, #13
 8001196:	4013      	ands	r3, r2
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011a2:	4b2e      	ldr	r3, [pc, #184]	; (800125c <HAL_GPIO_Init+0x2ec>)
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011a8:	4b2c      	ldr	r3, [pc, #176]	; (800125c <HAL_GPIO_Init+0x2ec>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	43da      	mvns	r2, r3
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	039b      	lsls	r3, r3, #14
 80011c0:	4013      	ands	r3, r2
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <HAL_GPIO_Init+0x2ec>)
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <HAL_GPIO_Init+0x2ec>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	43da      	mvns	r2, r3
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	029b      	lsls	r3, r3, #10
 80011ea:	4013      	ands	r3, r2
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_GPIO_Init+0x2ec>)
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <HAL_GPIO_Init+0x2ec>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	43da      	mvns	r2, r3
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	025b      	lsls	r3, r3, #9
 8001214:	4013      	ands	r3, r2
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_GPIO_Init+0x2ec>)
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3301      	adds	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	40da      	lsrs	r2, r3
 8001234:	1e13      	subs	r3, r2, #0
 8001236:	d000      	beq.n	800123a <HAL_GPIO_Init+0x2ca>
 8001238:	e6a2      	b.n	8000f80 <HAL_GPIO_Init+0x10>
  } 
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46c0      	nop			; (mov r8, r8)
 800123e:	46bd      	mov	sp, r7
 8001240:	b006      	add	sp, #24
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40021000 	.word	0x40021000
 8001248:	40010000 	.word	0x40010000
 800124c:	48000400 	.word	0x48000400
 8001250:	48000800 	.word	0x48000800
 8001254:	48000c00 	.word	0x48000c00
 8001258:	48001000 	.word	0x48001000
 800125c:	40010400 	.word	0x40010400

08001260 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	000a      	movs	r2, r1
 800126a:	1cbb      	adds	r3, r7, #2
 800126c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	1cba      	adds	r2, r7, #2
 8001274:	8812      	ldrh	r2, [r2, #0]
 8001276:	4013      	ands	r3, r2
 8001278:	d004      	beq.n	8001284 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800127a:	230f      	movs	r3, #15
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	e003      	b.n	800128c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001284:	230f      	movs	r3, #15
 8001286:	18fb      	adds	r3, r7, r3
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800128c:	230f      	movs	r3, #15
 800128e:	18fb      	adds	r3, r7, r3
 8001290:	781b      	ldrb	r3, [r3, #0]
  }
 8001292:	0018      	movs	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	b004      	add	sp, #16
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	0008      	movs	r0, r1
 80012a4:	0011      	movs	r1, r2
 80012a6:	1cbb      	adds	r3, r7, #2
 80012a8:	1c02      	adds	r2, r0, #0
 80012aa:	801a      	strh	r2, [r3, #0]
 80012ac:	1c7b      	adds	r3, r7, #1
 80012ae:	1c0a      	adds	r2, r1, #0
 80012b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b2:	1c7b      	adds	r3, r7, #1
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d004      	beq.n	80012c4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ba:	1cbb      	adds	r3, r7, #2
 80012bc:	881a      	ldrh	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c2:	e003      	b.n	80012cc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012c4:	1cbb      	adds	r3, r7, #2
 80012c6:	881a      	ldrh	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b002      	add	sp, #8
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d102      	bne.n	80012e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	f000 fb76 	bl	80019d4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2201      	movs	r2, #1
 80012ee:	4013      	ands	r3, r2
 80012f0:	d100      	bne.n	80012f4 <HAL_RCC_OscConfig+0x20>
 80012f2:	e08e      	b.n	8001412 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012f4:	4bc5      	ldr	r3, [pc, #788]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	220c      	movs	r2, #12
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	d00e      	beq.n	800131e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001300:	4bc2      	ldr	r3, [pc, #776]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	220c      	movs	r2, #12
 8001306:	4013      	ands	r3, r2
 8001308:	2b08      	cmp	r3, #8
 800130a:	d117      	bne.n	800133c <HAL_RCC_OscConfig+0x68>
 800130c:	4bbf      	ldr	r3, [pc, #764]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	23c0      	movs	r3, #192	; 0xc0
 8001312:	025b      	lsls	r3, r3, #9
 8001314:	401a      	ands	r2, r3
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	025b      	lsls	r3, r3, #9
 800131a:	429a      	cmp	r2, r3
 800131c:	d10e      	bne.n	800133c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131e:	4bbb      	ldr	r3, [pc, #748]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	029b      	lsls	r3, r3, #10
 8001326:	4013      	ands	r3, r2
 8001328:	d100      	bne.n	800132c <HAL_RCC_OscConfig+0x58>
 800132a:	e071      	b.n	8001410 <HAL_RCC_OscConfig+0x13c>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d000      	beq.n	8001336 <HAL_RCC_OscConfig+0x62>
 8001334:	e06c      	b.n	8001410 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	f000 fb4c 	bl	80019d4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d107      	bne.n	8001354 <HAL_RCC_OscConfig+0x80>
 8001344:	4bb1      	ldr	r3, [pc, #708]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4bb0      	ldr	r3, [pc, #704]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	0249      	lsls	r1, r1, #9
 800134e:	430a      	orrs	r2, r1
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	e02f      	b.n	80013b4 <HAL_RCC_OscConfig+0xe0>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d10c      	bne.n	8001376 <HAL_RCC_OscConfig+0xa2>
 800135c:	4bab      	ldr	r3, [pc, #684]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4baa      	ldr	r3, [pc, #680]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001362:	49ab      	ldr	r1, [pc, #684]	; (8001610 <HAL_RCC_OscConfig+0x33c>)
 8001364:	400a      	ands	r2, r1
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	4ba8      	ldr	r3, [pc, #672]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4ba7      	ldr	r3, [pc, #668]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800136e:	49a9      	ldr	r1, [pc, #676]	; (8001614 <HAL_RCC_OscConfig+0x340>)
 8001370:	400a      	ands	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e01e      	b.n	80013b4 <HAL_RCC_OscConfig+0xe0>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b05      	cmp	r3, #5
 800137c:	d10e      	bne.n	800139c <HAL_RCC_OscConfig+0xc8>
 800137e:	4ba3      	ldr	r3, [pc, #652]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4ba2      	ldr	r3, [pc, #648]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	02c9      	lsls	r1, r1, #11
 8001388:	430a      	orrs	r2, r1
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	4b9f      	ldr	r3, [pc, #636]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b9e      	ldr	r3, [pc, #632]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	0249      	lsls	r1, r1, #9
 8001396:	430a      	orrs	r2, r1
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	e00b      	b.n	80013b4 <HAL_RCC_OscConfig+0xe0>
 800139c:	4b9b      	ldr	r3, [pc, #620]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b9a      	ldr	r3, [pc, #616]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80013a2:	499b      	ldr	r1, [pc, #620]	; (8001610 <HAL_RCC_OscConfig+0x33c>)
 80013a4:	400a      	ands	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	4b98      	ldr	r3, [pc, #608]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b97      	ldr	r3, [pc, #604]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80013ae:	4999      	ldr	r1, [pc, #612]	; (8001614 <HAL_RCC_OscConfig+0x340>)
 80013b0:	400a      	ands	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d014      	beq.n	80013e6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fcf0 	bl	8000da0 <HAL_GetTick>
 80013c0:	0003      	movs	r3, r0
 80013c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c6:	f7ff fceb 	bl	8000da0 <HAL_GetTick>
 80013ca:	0002      	movs	r2, r0
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b64      	cmp	r3, #100	; 0x64
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e2fd      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d8:	4b8c      	ldr	r3, [pc, #560]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	029b      	lsls	r3, r3, #10
 80013e0:	4013      	ands	r3, r2
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0xf2>
 80013e4:	e015      	b.n	8001412 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e6:	f7ff fcdb 	bl	8000da0 <HAL_GetTick>
 80013ea:	0003      	movs	r3, r0
 80013ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fcd6 	bl	8000da0 <HAL_GetTick>
 80013f4:	0002      	movs	r2, r0
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e2e8      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001402:	4b82      	ldr	r3, [pc, #520]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	029b      	lsls	r3, r3, #10
 800140a:	4013      	ands	r3, r2
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x11c>
 800140e:	e000      	b.n	8001412 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001410:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2202      	movs	r2, #2
 8001418:	4013      	ands	r3, r2
 800141a:	d100      	bne.n	800141e <HAL_RCC_OscConfig+0x14a>
 800141c:	e06c      	b.n	80014f8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800141e:	4b7b      	ldr	r3, [pc, #492]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	220c      	movs	r2, #12
 8001424:	4013      	ands	r3, r2
 8001426:	d00e      	beq.n	8001446 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001428:	4b78      	ldr	r3, [pc, #480]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	220c      	movs	r2, #12
 800142e:	4013      	ands	r3, r2
 8001430:	2b08      	cmp	r3, #8
 8001432:	d11f      	bne.n	8001474 <HAL_RCC_OscConfig+0x1a0>
 8001434:	4b75      	ldr	r3, [pc, #468]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	23c0      	movs	r3, #192	; 0xc0
 800143a:	025b      	lsls	r3, r3, #9
 800143c:	401a      	ands	r2, r3
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	429a      	cmp	r2, r3
 8001444:	d116      	bne.n	8001474 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001446:	4b71      	ldr	r3, [pc, #452]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2202      	movs	r2, #2
 800144c:	4013      	ands	r3, r2
 800144e:	d005      	beq.n	800145c <HAL_RCC_OscConfig+0x188>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d001      	beq.n	800145c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e2bb      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b6b      	ldr	r3, [pc, #428]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	22f8      	movs	r2, #248	; 0xf8
 8001462:	4393      	bics	r3, r2
 8001464:	0019      	movs	r1, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	00da      	lsls	r2, r3, #3
 800146c:	4b67      	ldr	r3, [pc, #412]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800146e:	430a      	orrs	r2, r1
 8001470:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001472:	e041      	b.n	80014f8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d024      	beq.n	80014c6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800147c:	4b63      	ldr	r3, [pc, #396]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b62      	ldr	r3, [pc, #392]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001482:	2101      	movs	r1, #1
 8001484:	430a      	orrs	r2, r1
 8001486:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fc8a 	bl	8000da0 <HAL_GetTick>
 800148c:	0003      	movs	r3, r0
 800148e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001492:	f7ff fc85 	bl	8000da0 <HAL_GetTick>
 8001496:	0002      	movs	r2, r0
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e297      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a4:	4b59      	ldr	r3, [pc, #356]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2202      	movs	r2, #2
 80014aa:	4013      	ands	r3, r2
 80014ac:	d0f1      	beq.n	8001492 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ae:	4b57      	ldr	r3, [pc, #348]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	22f8      	movs	r2, #248	; 0xf8
 80014b4:	4393      	bics	r3, r2
 80014b6:	0019      	movs	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	00da      	lsls	r2, r3, #3
 80014be:	4b53      	ldr	r3, [pc, #332]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80014c0:	430a      	orrs	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	e018      	b.n	80014f8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c6:	4b51      	ldr	r3, [pc, #324]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	4b50      	ldr	r3, [pc, #320]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80014cc:	2101      	movs	r1, #1
 80014ce:	438a      	bics	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fc65 	bl	8000da0 <HAL_GetTick>
 80014d6:	0003      	movs	r3, r0
 80014d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014dc:	f7ff fc60 	bl	8000da0 <HAL_GetTick>
 80014e0:	0002      	movs	r2, r0
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e272      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ee:	4b47      	ldr	r3, [pc, #284]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2202      	movs	r2, #2
 80014f4:	4013      	ands	r3, r2
 80014f6:	d1f1      	bne.n	80014dc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2208      	movs	r2, #8
 80014fe:	4013      	ands	r3, r2
 8001500:	d036      	beq.n	8001570 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d019      	beq.n	800153e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150a:	4b40      	ldr	r3, [pc, #256]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800150c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800150e:	4b3f      	ldr	r3, [pc, #252]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001510:	2101      	movs	r1, #1
 8001512:	430a      	orrs	r2, r1
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001516:	f7ff fc43 	bl	8000da0 <HAL_GetTick>
 800151a:	0003      	movs	r3, r0
 800151c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001520:	f7ff fc3e 	bl	8000da0 <HAL_GetTick>
 8001524:	0002      	movs	r2, r0
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e250      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001532:	4b36      	ldr	r3, [pc, #216]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	2202      	movs	r2, #2
 8001538:	4013      	ands	r3, r2
 800153a:	d0f1      	beq.n	8001520 <HAL_RCC_OscConfig+0x24c>
 800153c:	e018      	b.n	8001570 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153e:	4b33      	ldr	r3, [pc, #204]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001542:	4b32      	ldr	r3, [pc, #200]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001544:	2101      	movs	r1, #1
 8001546:	438a      	bics	r2, r1
 8001548:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154a:	f7ff fc29 	bl	8000da0 <HAL_GetTick>
 800154e:	0003      	movs	r3, r0
 8001550:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001554:	f7ff fc24 	bl	8000da0 <HAL_GetTick>
 8001558:	0002      	movs	r2, r0
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e236      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001566:	4b29      	ldr	r3, [pc, #164]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	2202      	movs	r2, #2
 800156c:	4013      	ands	r3, r2
 800156e:	d1f1      	bne.n	8001554 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2204      	movs	r2, #4
 8001576:	4013      	ands	r3, r2
 8001578:	d100      	bne.n	800157c <HAL_RCC_OscConfig+0x2a8>
 800157a:	e0b5      	b.n	80016e8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157c:	201f      	movs	r0, #31
 800157e:	183b      	adds	r3, r7, r0
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001586:	69da      	ldr	r2, [r3, #28]
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	055b      	lsls	r3, r3, #21
 800158c:	4013      	ands	r3, r2
 800158e:	d110      	bne.n	80015b2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001590:	4b1e      	ldr	r3, [pc, #120]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001592:	69da      	ldr	r2, [r3, #28]
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	0549      	lsls	r1, r1, #21
 800159a:	430a      	orrs	r2, r1
 800159c:	61da      	str	r2, [r3, #28]
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80015a0:	69da      	ldr	r2, [r3, #28]
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	055b      	lsls	r3, r3, #21
 80015a6:	4013      	ands	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015ac:	183b      	adds	r3, r7, r0
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <HAL_RCC_OscConfig+0x344>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4013      	ands	r3, r2
 80015bc:	d11a      	bne.n	80015f4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <HAL_RCC_OscConfig+0x344>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_RCC_OscConfig+0x344>)
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	0049      	lsls	r1, r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015cc:	f7ff fbe8 	bl	8000da0 <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d6:	f7ff fbe3 	bl	8000da0 <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b64      	cmp	r3, #100	; 0x64
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e1f5      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_RCC_OscConfig+0x344>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4013      	ands	r3, r2
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d10f      	bne.n	800161c <HAL_RCC_OscConfig+0x348>
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80015fe:	6a1a      	ldr	r2, [r3, #32]
 8001600:	4b02      	ldr	r3, [pc, #8]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001602:	2101      	movs	r1, #1
 8001604:	430a      	orrs	r2, r1
 8001606:	621a      	str	r2, [r3, #32]
 8001608:	e036      	b.n	8001678 <HAL_RCC_OscConfig+0x3a4>
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	40021000 	.word	0x40021000
 8001610:	fffeffff 	.word	0xfffeffff
 8001614:	fffbffff 	.word	0xfffbffff
 8001618:	40007000 	.word	0x40007000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d10c      	bne.n	800163e <HAL_RCC_OscConfig+0x36a>
 8001624:	4bca      	ldr	r3, [pc, #808]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001626:	6a1a      	ldr	r2, [r3, #32]
 8001628:	4bc9      	ldr	r3, [pc, #804]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800162a:	2101      	movs	r1, #1
 800162c:	438a      	bics	r2, r1
 800162e:	621a      	str	r2, [r3, #32]
 8001630:	4bc7      	ldr	r3, [pc, #796]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001632:	6a1a      	ldr	r2, [r3, #32]
 8001634:	4bc6      	ldr	r3, [pc, #792]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001636:	2104      	movs	r1, #4
 8001638:	438a      	bics	r2, r1
 800163a:	621a      	str	r2, [r3, #32]
 800163c:	e01c      	b.n	8001678 <HAL_RCC_OscConfig+0x3a4>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b05      	cmp	r3, #5
 8001644:	d10c      	bne.n	8001660 <HAL_RCC_OscConfig+0x38c>
 8001646:	4bc2      	ldr	r3, [pc, #776]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001648:	6a1a      	ldr	r2, [r3, #32]
 800164a:	4bc1      	ldr	r3, [pc, #772]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800164c:	2104      	movs	r1, #4
 800164e:	430a      	orrs	r2, r1
 8001650:	621a      	str	r2, [r3, #32]
 8001652:	4bbf      	ldr	r3, [pc, #764]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001654:	6a1a      	ldr	r2, [r3, #32]
 8001656:	4bbe      	ldr	r3, [pc, #760]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001658:	2101      	movs	r1, #1
 800165a:	430a      	orrs	r2, r1
 800165c:	621a      	str	r2, [r3, #32]
 800165e:	e00b      	b.n	8001678 <HAL_RCC_OscConfig+0x3a4>
 8001660:	4bbb      	ldr	r3, [pc, #748]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001662:	6a1a      	ldr	r2, [r3, #32]
 8001664:	4bba      	ldr	r3, [pc, #744]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001666:	2101      	movs	r1, #1
 8001668:	438a      	bics	r2, r1
 800166a:	621a      	str	r2, [r3, #32]
 800166c:	4bb8      	ldr	r3, [pc, #736]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800166e:	6a1a      	ldr	r2, [r3, #32]
 8001670:	4bb7      	ldr	r3, [pc, #732]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001672:	2104      	movs	r1, #4
 8001674:	438a      	bics	r2, r1
 8001676:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d014      	beq.n	80016aa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001680:	f7ff fb8e 	bl	8000da0 <HAL_GetTick>
 8001684:	0003      	movs	r3, r0
 8001686:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001688:	e009      	b.n	800169e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7ff fb89 	bl	8000da0 <HAL_GetTick>
 800168e:	0002      	movs	r2, r0
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	4aaf      	ldr	r2, [pc, #700]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e19a      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169e:	4bac      	ldr	r3, [pc, #688]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	2202      	movs	r2, #2
 80016a4:	4013      	ands	r3, r2
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x3b6>
 80016a8:	e013      	b.n	80016d2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016aa:	f7ff fb79 	bl	8000da0 <HAL_GetTick>
 80016ae:	0003      	movs	r3, r0
 80016b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b2:	e009      	b.n	80016c8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b4:	f7ff fb74 	bl	8000da0 <HAL_GetTick>
 80016b8:	0002      	movs	r2, r0
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	4aa5      	ldr	r2, [pc, #660]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e185      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c8:	4ba1      	ldr	r3, [pc, #644]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	2202      	movs	r2, #2
 80016ce:	4013      	ands	r3, r2
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016d2:	231f      	movs	r3, #31
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d105      	bne.n	80016e8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016dc:	4b9c      	ldr	r3, [pc, #624]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80016de:	69da      	ldr	r2, [r3, #28]
 80016e0:	4b9b      	ldr	r3, [pc, #620]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80016e2:	499d      	ldr	r1, [pc, #628]	; (8001958 <HAL_RCC_OscConfig+0x684>)
 80016e4:	400a      	ands	r2, r1
 80016e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2210      	movs	r2, #16
 80016ee:	4013      	ands	r3, r2
 80016f0:	d063      	beq.n	80017ba <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d12a      	bne.n	8001750 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016fa:	4b95      	ldr	r3, [pc, #596]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80016fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016fe:	4b94      	ldr	r3, [pc, #592]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001700:	2104      	movs	r1, #4
 8001702:	430a      	orrs	r2, r1
 8001704:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001706:	4b92      	ldr	r3, [pc, #584]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800170a:	4b91      	ldr	r3, [pc, #580]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800170c:	2101      	movs	r1, #1
 800170e:	430a      	orrs	r2, r1
 8001710:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001712:	f7ff fb45 	bl	8000da0 <HAL_GetTick>
 8001716:	0003      	movs	r3, r0
 8001718:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800171c:	f7ff fb40 	bl	8000da0 <HAL_GetTick>
 8001720:	0002      	movs	r2, r0
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e152      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800172e:	4b88      	ldr	r3, [pc, #544]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001732:	2202      	movs	r2, #2
 8001734:	4013      	ands	r3, r2
 8001736:	d0f1      	beq.n	800171c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001738:	4b85      	ldr	r3, [pc, #532]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800173a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173c:	22f8      	movs	r2, #248	; 0xf8
 800173e:	4393      	bics	r3, r2
 8001740:	0019      	movs	r1, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	00da      	lsls	r2, r3, #3
 8001748:	4b81      	ldr	r3, [pc, #516]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800174a:	430a      	orrs	r2, r1
 800174c:	635a      	str	r2, [r3, #52]	; 0x34
 800174e:	e034      	b.n	80017ba <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	3305      	adds	r3, #5
 8001756:	d111      	bne.n	800177c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001758:	4b7d      	ldr	r3, [pc, #500]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800175a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800175c:	4b7c      	ldr	r3, [pc, #496]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800175e:	2104      	movs	r1, #4
 8001760:	438a      	bics	r2, r1
 8001762:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001764:	4b7a      	ldr	r3, [pc, #488]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001768:	22f8      	movs	r2, #248	; 0xf8
 800176a:	4393      	bics	r3, r2
 800176c:	0019      	movs	r1, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	00da      	lsls	r2, r3, #3
 8001774:	4b76      	ldr	r3, [pc, #472]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001776:	430a      	orrs	r2, r1
 8001778:	635a      	str	r2, [r3, #52]	; 0x34
 800177a:	e01e      	b.n	80017ba <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800177c:	4b74      	ldr	r3, [pc, #464]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800177e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001780:	4b73      	ldr	r3, [pc, #460]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001782:	2104      	movs	r1, #4
 8001784:	430a      	orrs	r2, r1
 8001786:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001788:	4b71      	ldr	r3, [pc, #452]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800178a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800178c:	4b70      	ldr	r3, [pc, #448]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800178e:	2101      	movs	r1, #1
 8001790:	438a      	bics	r2, r1
 8001792:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001794:	f7ff fb04 	bl	8000da0 <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800179e:	f7ff faff 	bl	8000da0 <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e111      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017b0:	4b67      	ldr	r3, [pc, #412]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80017b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b4:	2202      	movs	r2, #2
 80017b6:	4013      	ands	r3, r2
 80017b8:	d1f1      	bne.n	800179e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2220      	movs	r2, #32
 80017c0:	4013      	ands	r3, r2
 80017c2:	d05c      	beq.n	800187e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80017c4:	4b62      	ldr	r3, [pc, #392]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	220c      	movs	r2, #12
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b0c      	cmp	r3, #12
 80017ce:	d00e      	beq.n	80017ee <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80017d0:	4b5f      	ldr	r3, [pc, #380]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	220c      	movs	r2, #12
 80017d6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d114      	bne.n	8001806 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80017dc:	4b5c      	ldr	r3, [pc, #368]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	23c0      	movs	r3, #192	; 0xc0
 80017e2:	025b      	lsls	r3, r3, #9
 80017e4:	401a      	ands	r2, r3
 80017e6:	23c0      	movs	r3, #192	; 0xc0
 80017e8:	025b      	lsls	r3, r3, #9
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d10b      	bne.n	8001806 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80017ee:	4b58      	ldr	r3, [pc, #352]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80017f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	029b      	lsls	r3, r3, #10
 80017f6:	4013      	ands	r3, r2
 80017f8:	d040      	beq.n	800187c <HAL_RCC_OscConfig+0x5a8>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d03c      	beq.n	800187c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e0e6      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d01b      	beq.n	8001846 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800180e:	4b50      	ldr	r3, [pc, #320]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001812:	4b4f      	ldr	r3, [pc, #316]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	0249      	lsls	r1, r1, #9
 8001818:	430a      	orrs	r2, r1
 800181a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fac0 	bl	8000da0 <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001826:	f7ff fabb 	bl	8000da0 <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e0cd      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001838:	4b45      	ldr	r3, [pc, #276]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800183a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	029b      	lsls	r3, r3, #10
 8001840:	4013      	ands	r3, r2
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x552>
 8001844:	e01b      	b.n	800187e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001846:	4b42      	ldr	r3, [pc, #264]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800184a:	4b41      	ldr	r3, [pc, #260]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800184c:	4943      	ldr	r1, [pc, #268]	; (800195c <HAL_RCC_OscConfig+0x688>)
 800184e:	400a      	ands	r2, r1
 8001850:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7ff faa5 	bl	8000da0 <HAL_GetTick>
 8001856:	0003      	movs	r3, r0
 8001858:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800185c:	f7ff faa0 	bl	8000da0 <HAL_GetTick>
 8001860:	0002      	movs	r2, r0
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e0b2      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800186e:	4b38      	ldr	r3, [pc, #224]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	029b      	lsls	r3, r3, #10
 8001876:	4013      	ands	r3, r2
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x588>
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800187c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	2b00      	cmp	r3, #0
 8001884:	d100      	bne.n	8001888 <HAL_RCC_OscConfig+0x5b4>
 8001886:	e0a4      	b.n	80019d2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001888:	4b31      	ldr	r3, [pc, #196]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	220c      	movs	r2, #12
 800188e:	4013      	ands	r3, r2
 8001890:	2b08      	cmp	r3, #8
 8001892:	d100      	bne.n	8001896 <HAL_RCC_OscConfig+0x5c2>
 8001894:	e078      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	2b02      	cmp	r3, #2
 800189c:	d14c      	bne.n	8001938 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189e:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80018a4:	492e      	ldr	r1, [pc, #184]	; (8001960 <HAL_RCC_OscConfig+0x68c>)
 80018a6:	400a      	ands	r2, r1
 80018a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018aa:	f7ff fa79 	bl	8000da0 <HAL_GetTick>
 80018ae:	0003      	movs	r3, r0
 80018b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b4:	f7ff fa74 	bl	8000da0 <HAL_GetTick>
 80018b8:	0002      	movs	r2, r0
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e086      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	049b      	lsls	r3, r3, #18
 80018ce:	4013      	ands	r3, r2
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d2:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80018d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d6:	220f      	movs	r2, #15
 80018d8:	4393      	bics	r3, r2
 80018da:	0019      	movs	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80018e2:	430a      	orrs	r2, r1
 80018e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	4a1e      	ldr	r2, [pc, #120]	; (8001964 <HAL_RCC_OscConfig+0x690>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	431a      	orrs	r2, r3
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80018fc:	430a      	orrs	r2, r1
 80018fe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	0449      	lsls	r1, r1, #17
 800190a:	430a      	orrs	r2, r1
 800190c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7ff fa47 	bl	8000da0 <HAL_GetTick>
 8001912:	0003      	movs	r3, r0
 8001914:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001918:	f7ff fa42 	bl	8000da0 <HAL_GetTick>
 800191c:	0002      	movs	r2, r0
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e054      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	049b      	lsls	r3, r3, #18
 8001932:	4013      	ands	r3, r2
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x644>
 8001936:	e04c      	b.n	80019d2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800193e:	4908      	ldr	r1, [pc, #32]	; (8001960 <HAL_RCC_OscConfig+0x68c>)
 8001940:	400a      	ands	r2, r1
 8001942:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fa2c 	bl	8000da0 <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194c:	e015      	b.n	800197a <HAL_RCC_OscConfig+0x6a6>
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	40021000 	.word	0x40021000
 8001954:	00001388 	.word	0x00001388
 8001958:	efffffff 	.word	0xefffffff
 800195c:	fffeffff 	.word	0xfffeffff
 8001960:	feffffff 	.word	0xfeffffff
 8001964:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff fa1a 	bl	8000da0 <HAL_GetTick>
 800196c:	0002      	movs	r2, r0
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e02c      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_RCC_OscConfig+0x708>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	049b      	lsls	r3, r3, #18
 8001982:	4013      	ands	r3, r2
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x694>
 8001986:	e024      	b.n	80019d2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e01f      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_RCC_OscConfig+0x708>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <HAL_RCC_OscConfig+0x708>)
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	23c0      	movs	r3, #192	; 0xc0
 80019a4:	025b      	lsls	r3, r3, #9
 80019a6:	401a      	ands	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d10e      	bne.n	80019ce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	220f      	movs	r2, #15
 80019b4:	401a      	ands	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	23f0      	movs	r3, #240	; 0xf0
 80019c2:	039b      	lsls	r3, r3, #14
 80019c4:	401a      	ands	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d001      	beq.n	80019d2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	0018      	movs	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b008      	add	sp, #32
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000

080019e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0bf      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019f4:	4b61      	ldr	r3, [pc, #388]	; (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2201      	movs	r2, #1
 80019fa:	4013      	ands	r3, r2
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d911      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a02:	4b5e      	ldr	r3, [pc, #376]	; (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2201      	movs	r2, #1
 8001a08:	4393      	bics	r3, r2
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	4b5b      	ldr	r3, [pc, #364]	; (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a14:	4b59      	ldr	r3, [pc, #356]	; (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d001      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e0a6      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d015      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2204      	movs	r2, #4
 8001a36:	4013      	ands	r3, r2
 8001a38:	d006      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a3a:	4b51      	ldr	r3, [pc, #324]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	4b50      	ldr	r3, [pc, #320]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001a40:	21e0      	movs	r1, #224	; 0xe0
 8001a42:	00c9      	lsls	r1, r1, #3
 8001a44:	430a      	orrs	r2, r1
 8001a46:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a48:	4b4d      	ldr	r3, [pc, #308]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	22f0      	movs	r2, #240	; 0xf0
 8001a4e:	4393      	bics	r3, r2
 8001a50:	0019      	movs	r1, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	4b4a      	ldr	r3, [pc, #296]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2201      	movs	r2, #1
 8001a62:	4013      	ands	r3, r2
 8001a64:	d04c      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6e:	4b44      	ldr	r3, [pc, #272]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	029b      	lsls	r3, r3, #10
 8001a76:	4013      	ands	r3, r2
 8001a78:	d120      	bne.n	8001abc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e07a      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a86:	4b3e      	ldr	r3, [pc, #248]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	049b      	lsls	r3, r3, #18
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d114      	bne.n	8001abc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e06e      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a9e:	4b38      	ldr	r3, [pc, #224]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	029b      	lsls	r3, r3, #10
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d108      	bne.n	8001abc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e062      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aae:	4b34      	ldr	r3, [pc, #208]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e05b      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001abc:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	4393      	bics	r3, r2
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001acc:	430a      	orrs	r2, r1
 8001ace:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad0:	f7ff f966 	bl	8000da0 <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad8:	e009      	b.n	8001aee <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ada:	f7ff f961 	bl	8000da0 <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	4a27      	ldr	r2, [pc, #156]	; (8001b84 <HAL_RCC_ClockConfig+0x1a4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e042      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	220c      	movs	r2, #12
 8001af4:	401a      	ands	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d1ec      	bne.n	8001ada <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b00:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2201      	movs	r2, #1
 8001b06:	4013      	ands	r3, r2
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d211      	bcs.n	8001b32 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2201      	movs	r2, #1
 8001b14:	4393      	bics	r3, r2
 8001b16:	0019      	movs	r1, r3
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b20:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2201      	movs	r2, #1
 8001b26:	4013      	ands	r3, r2
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d001      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e020      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2204      	movs	r2, #4
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d009      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <HAL_RCC_ClockConfig+0x1a8>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	0019      	movs	r1, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b50:	f000 f820 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8001b54:	0001      	movs	r1, r0
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	091b      	lsrs	r3, r3, #4
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	4013      	ands	r3, r2
 8001b60:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <HAL_RCC_ClockConfig+0x1ac>)
 8001b62:	5cd3      	ldrb	r3, [r2, r3]
 8001b64:	000a      	movs	r2, r1
 8001b66:	40da      	lsrs	r2, r3
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_RCC_ClockConfig+0x1b0>)
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	f7ff f8d1 	bl	8000d14 <HAL_InitTick>
  
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	0018      	movs	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b004      	add	sp, #16
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40022000 	.word	0x40022000
 8001b80:	40021000 	.word	0x40021000
 8001b84:	00001388 	.word	0x00001388
 8001b88:	fffff8ff 	.word	0xfffff8ff
 8001b8c:	08002590 	.word	0x08002590
 8001b90:	20000024 	.word	0x20000024

08001b94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001bae:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b0c      	cmp	r3, #12
 8001bbc:	d046      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0xb8>
 8001bbe:	d848      	bhi.n	8001c52 <HAL_RCC_GetSysClockFreq+0xbe>
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d002      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0x36>
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d003      	beq.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x3c>
 8001bc8:	e043      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bca:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001bcc:	613b      	str	r3, [r7, #16]
      break;
 8001bce:	e043      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	0c9b      	lsrs	r3, r3, #18
 8001bd4:	220f      	movs	r2, #15
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	4a24      	ldr	r2, [pc, #144]	; (8001c6c <HAL_RCC_GetSysClockFreq+0xd8>)
 8001bda:	5cd3      	ldrb	r3, [r2, r3]
 8001bdc:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001bde:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be2:	220f      	movs	r2, #15
 8001be4:	4013      	ands	r3, r2
 8001be6:	4a22      	ldr	r2, [pc, #136]	; (8001c70 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001be8:	5cd3      	ldrb	r3, [r2, r3]
 8001bea:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	23c0      	movs	r3, #192	; 0xc0
 8001bf0:	025b      	lsls	r3, r3, #9
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	025b      	lsls	r3, r3, #9
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d109      	bne.n	8001c10 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	481a      	ldr	r0, [pc, #104]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c00:	f7fe fa80 	bl	8000104 <__udivsi3>
 8001c04:	0003      	movs	r3, r0
 8001c06:	001a      	movs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4353      	muls	r3, r2
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	e01a      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	23c0      	movs	r3, #192	; 0xc0
 8001c14:	025b      	lsls	r3, r3, #9
 8001c16:	401a      	ands	r2, r3
 8001c18:	23c0      	movs	r3, #192	; 0xc0
 8001c1a:	025b      	lsls	r3, r3, #9
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d109      	bne.n	8001c34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	4814      	ldr	r0, [pc, #80]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001c24:	f7fe fa6e 	bl	8000104 <__udivsi3>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	001a      	movs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4353      	muls	r3, r2
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	480c      	ldr	r0, [pc, #48]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c38:	f7fe fa64 	bl	8000104 <__udivsi3>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	001a      	movs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4353      	muls	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	613b      	str	r3, [r7, #16]
      break;
 8001c4a:	e005      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001c4e:	613b      	str	r3, [r7, #16]
      break;
 8001c50:	e002      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c54:	613b      	str	r3, [r7, #16]
      break;
 8001c56:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c58:	693b      	ldr	r3, [r7, #16]
}
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b006      	add	sp, #24
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	40021000 	.word	0x40021000
 8001c68:	007a1200 	.word	0x007a1200
 8001c6c:	080025a8 	.word	0x080025a8
 8001c70:	080025b8 	.word	0x080025b8
 8001c74:	02dc6c00 	.word	0x02dc6c00

08001c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c7c:	4b02      	ldr	r3, [pc, #8]	; (8001c88 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	0018      	movs	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	20000024 	.word	0x20000024

08001c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c90:	f7ff fff2 	bl	8001c78 <HAL_RCC_GetHCLKFreq>
 8001c94:	0001      	movs	r1, r0
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ca2:	5cd3      	ldrb	r3, [r2, r3]
 8001ca4:	40d9      	lsrs	r1, r3
 8001ca6:	000b      	movs	r3, r1
}    
 8001ca8:	0018      	movs	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	080025a0 	.word	0x080025a0

08001cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e042      	b.n	8001d50 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	223d      	movs	r2, #61	; 0x3d
 8001cce:	5c9b      	ldrb	r3, [r3, r2]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d107      	bne.n	8001ce6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	223c      	movs	r2, #60	; 0x3c
 8001cda:	2100      	movs	r1, #0
 8001cdc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f7fe ff89 	bl	8000bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	223d      	movs	r2, #61	; 0x3d
 8001cea:	2102      	movs	r1, #2
 8001cec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	0010      	movs	r0, r2
 8001cfa:	f000 fa89 	bl	8002210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2246      	movs	r2, #70	; 0x46
 8001d02:	2101      	movs	r1, #1
 8001d04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	223e      	movs	r2, #62	; 0x3e
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	5499      	strb	r1, [r3, r2]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	223f      	movs	r2, #63	; 0x3f
 8001d12:	2101      	movs	r1, #1
 8001d14:	5499      	strb	r1, [r3, r2]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2240      	movs	r2, #64	; 0x40
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	5499      	strb	r1, [r3, r2]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2241      	movs	r2, #65	; 0x41
 8001d22:	2101      	movs	r1, #1
 8001d24:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2242      	movs	r2, #66	; 0x42
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	5499      	strb	r1, [r3, r2]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2243      	movs	r2, #67	; 0x43
 8001d32:	2101      	movs	r1, #1
 8001d34:	5499      	strb	r1, [r3, r2]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2244      	movs	r2, #68	; 0x44
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	5499      	strb	r1, [r3, r2]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2245      	movs	r2, #69	; 0x45
 8001d42:	2101      	movs	r1, #1
 8001d44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	223d      	movs	r2, #61	; 0x3d
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	0018      	movs	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b002      	add	sp, #8
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	223d      	movs	r2, #61	; 0x3d
 8001d64:	5c9b      	ldrb	r3, [r3, r2]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d001      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e03b      	b.n	8001de8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	223d      	movs	r2, #61	; 0x3d
 8001d74:	2102      	movs	r1, #2
 8001d76:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2101      	movs	r1, #1
 8001d84:	430a      	orrs	r2, r1
 8001d86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a18      	ldr	r2, [pc, #96]	; (8001df0 <HAL_TIM_Base_Start_IT+0x98>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00f      	beq.n	8001db2 <HAL_TIM_Base_Start_IT+0x5a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	05db      	lsls	r3, r3, #23
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d009      	beq.n	8001db2 <HAL_TIM_Base_Start_IT+0x5a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a14      	ldr	r2, [pc, #80]	; (8001df4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d004      	beq.n	8001db2 <HAL_TIM_Base_Start_IT+0x5a>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <HAL_TIM_Base_Start_IT+0xa0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d111      	bne.n	8001dd6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2207      	movs	r2, #7
 8001dba:	4013      	ands	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b06      	cmp	r3, #6
 8001dc2:	d010      	beq.n	8001de6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2101      	movs	r1, #1
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd4:	e007      	b.n	8001de6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2101      	movs	r1, #1
 8001de2:	430a      	orrs	r2, r1
 8001de4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	0018      	movs	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b004      	add	sp, #16
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40012c00 	.word	0x40012c00
 8001df4:	40000400 	.word	0x40000400
 8001df8:	40014000 	.word	0x40014000

08001dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d124      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2202      	movs	r2, #2
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d11d      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2203      	movs	r2, #3
 8001e26:	4252      	negs	r2, r2
 8001e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2203      	movs	r2, #3
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d004      	beq.n	8001e46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f000 f9ce 	bl	80021e0 <HAL_TIM_IC_CaptureCallback>
 8001e44:	e007      	b.n	8001e56 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f000 f9c1 	bl	80021d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	0018      	movs	r0, r3
 8001e52:	f000 f9cd 	bl	80021f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	2204      	movs	r2, #4
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d125      	bne.n	8001eb6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2204      	movs	r2, #4
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d11e      	bne.n	8001eb6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2205      	movs	r2, #5
 8001e7e:	4252      	negs	r2, r2
 8001e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2202      	movs	r2, #2
 8001e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	23c0      	movs	r3, #192	; 0xc0
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4013      	ands	r3, r2
 8001e94:	d004      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f000 f9a1 	bl	80021e0 <HAL_TIM_IC_CaptureCallback>
 8001e9e:	e007      	b.n	8001eb0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f000 f994 	bl	80021d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	0018      	movs	r0, r3
 8001eac:	f000 f9a0 	bl	80021f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	2208      	movs	r2, #8
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d124      	bne.n	8001f0e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2208      	movs	r2, #8
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d11d      	bne.n	8001f0e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2209      	movs	r2, #9
 8001ed8:	4252      	negs	r2, r2
 8001eda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2204      	movs	r2, #4
 8001ee0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	2203      	movs	r2, #3
 8001eea:	4013      	ands	r3, r2
 8001eec:	d004      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f000 f975 	bl	80021e0 <HAL_TIM_IC_CaptureCallback>
 8001ef6:	e007      	b.n	8001f08 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	0018      	movs	r0, r3
 8001efc:	f000 f968 	bl	80021d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	0018      	movs	r0, r3
 8001f04:	f000 f974 	bl	80021f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	2210      	movs	r2, #16
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b10      	cmp	r3, #16
 8001f1a:	d125      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2210      	movs	r2, #16
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b10      	cmp	r3, #16
 8001f28:	d11e      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2211      	movs	r2, #17
 8001f30:	4252      	negs	r2, r2
 8001f32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2208      	movs	r2, #8
 8001f38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	69da      	ldr	r2, [r3, #28]
 8001f40:	23c0      	movs	r3, #192	; 0xc0
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4013      	ands	r3, r2
 8001f46:	d004      	beq.n	8001f52 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f000 f948 	bl	80021e0 <HAL_TIM_IC_CaptureCallback>
 8001f50:	e007      	b.n	8001f62 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	0018      	movs	r0, r3
 8001f56:	f000 f93b 	bl	80021d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f000 f947 	bl	80021f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d10f      	bne.n	8001f96 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d108      	bne.n	8001f96 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2202      	movs	r2, #2
 8001f8a:	4252      	negs	r2, r2
 8001f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	0018      	movs	r0, r3
 8001f92:	f7fe fdf3 	bl	8000b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	2280      	movs	r2, #128	; 0x80
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b80      	cmp	r3, #128	; 0x80
 8001fa2:	d10f      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	2280      	movs	r2, #128	; 0x80
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b80      	cmp	r3, #128	; 0x80
 8001fb0:	d108      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2281      	movs	r2, #129	; 0x81
 8001fb8:	4252      	negs	r2, r2
 8001fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f000 faa6 	bl	8002510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2240      	movs	r2, #64	; 0x40
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b40      	cmp	r3, #64	; 0x40
 8001fd0:	d10f      	bne.n	8001ff2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	2240      	movs	r2, #64	; 0x40
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b40      	cmp	r3, #64	; 0x40
 8001fde:	d108      	bne.n	8001ff2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2241      	movs	r2, #65	; 0x41
 8001fe6:	4252      	negs	r2, r2
 8001fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	0018      	movs	r0, r3
 8001fee:	f000 f907 	bl	8002200 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d10f      	bne.n	8002020 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	2220      	movs	r2, #32
 8002008:	4013      	ands	r3, r2
 800200a:	2b20      	cmp	r3, #32
 800200c:	d108      	bne.n	8002020 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2221      	movs	r2, #33	; 0x21
 8002014:	4252      	negs	r2, r2
 8002016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	0018      	movs	r0, r3
 800201c:	f000 fa70 	bl	8002500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002020:	46c0      	nop			; (mov r8, r8)
 8002022:	46bd      	mov	sp, r7
 8002024:	b002      	add	sp, #8
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002032:	230f      	movs	r3, #15
 8002034:	18fb      	adds	r3, r7, r3
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	223c      	movs	r2, #60	; 0x3c
 800203e:	5c9b      	ldrb	r3, [r3, r2]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_TIM_ConfigClockSource+0x20>
 8002044:	2302      	movs	r3, #2
 8002046:	e0bc      	b.n	80021c2 <HAL_TIM_ConfigClockSource+0x19a>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	223c      	movs	r2, #60	; 0x3c
 800204c:	2101      	movs	r1, #1
 800204e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	223d      	movs	r2, #61	; 0x3d
 8002054:	2102      	movs	r1, #2
 8002056:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2277      	movs	r2, #119	; 0x77
 8002064:	4393      	bics	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	4a58      	ldr	r2, [pc, #352]	; (80021cc <HAL_TIM_ConfigClockSource+0x1a4>)
 800206c:	4013      	ands	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2280      	movs	r2, #128	; 0x80
 800207e:	0192      	lsls	r2, r2, #6
 8002080:	4293      	cmp	r3, r2
 8002082:	d040      	beq.n	8002106 <HAL_TIM_ConfigClockSource+0xde>
 8002084:	2280      	movs	r2, #128	; 0x80
 8002086:	0192      	lsls	r2, r2, #6
 8002088:	4293      	cmp	r3, r2
 800208a:	d900      	bls.n	800208e <HAL_TIM_ConfigClockSource+0x66>
 800208c:	e088      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x178>
 800208e:	2280      	movs	r2, #128	; 0x80
 8002090:	0152      	lsls	r2, r2, #5
 8002092:	4293      	cmp	r3, r2
 8002094:	d100      	bne.n	8002098 <HAL_TIM_ConfigClockSource+0x70>
 8002096:	e088      	b.n	80021aa <HAL_TIM_ConfigClockSource+0x182>
 8002098:	2280      	movs	r2, #128	; 0x80
 800209a:	0152      	lsls	r2, r2, #5
 800209c:	4293      	cmp	r3, r2
 800209e:	d900      	bls.n	80020a2 <HAL_TIM_ConfigClockSource+0x7a>
 80020a0:	e07e      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x178>
 80020a2:	2b70      	cmp	r3, #112	; 0x70
 80020a4:	d018      	beq.n	80020d8 <HAL_TIM_ConfigClockSource+0xb0>
 80020a6:	d900      	bls.n	80020aa <HAL_TIM_ConfigClockSource+0x82>
 80020a8:	e07a      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x178>
 80020aa:	2b60      	cmp	r3, #96	; 0x60
 80020ac:	d04f      	beq.n	800214e <HAL_TIM_ConfigClockSource+0x126>
 80020ae:	d900      	bls.n	80020b2 <HAL_TIM_ConfigClockSource+0x8a>
 80020b0:	e076      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x178>
 80020b2:	2b50      	cmp	r3, #80	; 0x50
 80020b4:	d03b      	beq.n	800212e <HAL_TIM_ConfigClockSource+0x106>
 80020b6:	d900      	bls.n	80020ba <HAL_TIM_ConfigClockSource+0x92>
 80020b8:	e072      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x178>
 80020ba:	2b40      	cmp	r3, #64	; 0x40
 80020bc:	d057      	beq.n	800216e <HAL_TIM_ConfigClockSource+0x146>
 80020be:	d900      	bls.n	80020c2 <HAL_TIM_ConfigClockSource+0x9a>
 80020c0:	e06e      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x178>
 80020c2:	2b30      	cmp	r3, #48	; 0x30
 80020c4:	d063      	beq.n	800218e <HAL_TIM_ConfigClockSource+0x166>
 80020c6:	d86b      	bhi.n	80021a0 <HAL_TIM_ConfigClockSource+0x178>
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d060      	beq.n	800218e <HAL_TIM_ConfigClockSource+0x166>
 80020cc:	d868      	bhi.n	80021a0 <HAL_TIM_ConfigClockSource+0x178>
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d05d      	beq.n	800218e <HAL_TIM_ConfigClockSource+0x166>
 80020d2:	2b10      	cmp	r3, #16
 80020d4:	d05b      	beq.n	800218e <HAL_TIM_ConfigClockSource+0x166>
 80020d6:	e063      	b.n	80021a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	6899      	ldr	r1, [r3, #8]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f000 f98c 	bl	8002404 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2277      	movs	r2, #119	; 0x77
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	609a      	str	r2, [r3, #8]
      break;
 8002104:	e052      	b.n	80021ac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	6899      	ldr	r1, [r3, #8]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f000 f975 	bl	8002404 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2180      	movs	r1, #128	; 0x80
 8002126:	01c9      	lsls	r1, r1, #7
 8002128:	430a      	orrs	r2, r1
 800212a:	609a      	str	r2, [r3, #8]
      break;
 800212c:	e03e      	b.n	80021ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	6859      	ldr	r1, [r3, #4]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	001a      	movs	r2, r3
 800213c:	f000 f8e8 	bl	8002310 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2150      	movs	r1, #80	; 0x50
 8002146:	0018      	movs	r0, r3
 8002148:	f000 f942 	bl	80023d0 <TIM_ITRx_SetConfig>
      break;
 800214c:	e02e      	b.n	80021ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	6859      	ldr	r1, [r3, #4]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	001a      	movs	r2, r3
 800215c:	f000 f906 	bl	800236c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2160      	movs	r1, #96	; 0x60
 8002166:	0018      	movs	r0, r3
 8002168:	f000 f932 	bl	80023d0 <TIM_ITRx_SetConfig>
      break;
 800216c:	e01e      	b.n	80021ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	6859      	ldr	r1, [r3, #4]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	001a      	movs	r2, r3
 800217c:	f000 f8c8 	bl	8002310 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2140      	movs	r1, #64	; 0x40
 8002186:	0018      	movs	r0, r3
 8002188:	f000 f922 	bl	80023d0 <TIM_ITRx_SetConfig>
      break;
 800218c:	e00e      	b.n	80021ac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	0019      	movs	r1, r3
 8002198:	0010      	movs	r0, r2
 800219a:	f000 f919 	bl	80023d0 <TIM_ITRx_SetConfig>
      break;
 800219e:	e005      	b.n	80021ac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80021a0:	230f      	movs	r3, #15
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
      break;
 80021a8:	e000      	b.n	80021ac <HAL_TIM_ConfigClockSource+0x184>
      break;
 80021aa:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	223d      	movs	r2, #61	; 0x3d
 80021b0:	2101      	movs	r1, #1
 80021b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	223c      	movs	r2, #60	; 0x3c
 80021b8:	2100      	movs	r1, #0
 80021ba:	5499      	strb	r1, [r3, r2]

  return status;
 80021bc:	230f      	movs	r3, #15
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	781b      	ldrb	r3, [r3, #0]
}
 80021c2:	0018      	movs	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b004      	add	sp, #16
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	ffff00ff 	.word	0xffff00ff

080021d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b002      	add	sp, #8
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021f8:	46c0      	nop			; (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b002      	add	sp, #8
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002208:	46c0      	nop			; (mov r8, r8)
 800220a:	46bd      	mov	sp, r7
 800220c:	b002      	add	sp, #8
 800220e:	bd80      	pop	{r7, pc}

08002210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a34      	ldr	r2, [pc, #208]	; (80022f4 <TIM_Base_SetConfig+0xe4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d008      	beq.n	800223a <TIM_Base_SetConfig+0x2a>
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	05db      	lsls	r3, r3, #23
 800222e:	429a      	cmp	r2, r3
 8002230:	d003      	beq.n	800223a <TIM_Base_SetConfig+0x2a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a30      	ldr	r2, [pc, #192]	; (80022f8 <TIM_Base_SetConfig+0xe8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d108      	bne.n	800224c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2270      	movs	r2, #112	; 0x70
 800223e:	4393      	bics	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a29      	ldr	r2, [pc, #164]	; (80022f4 <TIM_Base_SetConfig+0xe4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d018      	beq.n	8002286 <TIM_Base_SetConfig+0x76>
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	05db      	lsls	r3, r3, #23
 800225a:	429a      	cmp	r2, r3
 800225c:	d013      	beq.n	8002286 <TIM_Base_SetConfig+0x76>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a25      	ldr	r2, [pc, #148]	; (80022f8 <TIM_Base_SetConfig+0xe8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00f      	beq.n	8002286 <TIM_Base_SetConfig+0x76>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a24      	ldr	r2, [pc, #144]	; (80022fc <TIM_Base_SetConfig+0xec>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00b      	beq.n	8002286 <TIM_Base_SetConfig+0x76>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a23      	ldr	r2, [pc, #140]	; (8002300 <TIM_Base_SetConfig+0xf0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d007      	beq.n	8002286 <TIM_Base_SetConfig+0x76>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a22      	ldr	r2, [pc, #136]	; (8002304 <TIM_Base_SetConfig+0xf4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d003      	beq.n	8002286 <TIM_Base_SetConfig+0x76>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a21      	ldr	r2, [pc, #132]	; (8002308 <TIM_Base_SetConfig+0xf8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d108      	bne.n	8002298 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4a20      	ldr	r2, [pc, #128]	; (800230c <TIM_Base_SetConfig+0xfc>)
 800228a:	4013      	ands	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4313      	orrs	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2280      	movs	r2, #128	; 0x80
 800229c:	4393      	bics	r3, r2
 800229e:	001a      	movs	r2, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a0c      	ldr	r2, [pc, #48]	; (80022f4 <TIM_Base_SetConfig+0xe4>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00b      	beq.n	80022de <TIM_Base_SetConfig+0xce>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a0d      	ldr	r2, [pc, #52]	; (8002300 <TIM_Base_SetConfig+0xf0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d007      	beq.n	80022de <TIM_Base_SetConfig+0xce>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a0c      	ldr	r2, [pc, #48]	; (8002304 <TIM_Base_SetConfig+0xf4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d003      	beq.n	80022de <TIM_Base_SetConfig+0xce>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a0b      	ldr	r2, [pc, #44]	; (8002308 <TIM_Base_SetConfig+0xf8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d103      	bne.n	80022e6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	615a      	str	r2, [r3, #20]
}
 80022ec:	46c0      	nop			; (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b004      	add	sp, #16
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40012c00 	.word	0x40012c00
 80022f8:	40000400 	.word	0x40000400
 80022fc:	40002000 	.word	0x40002000
 8002300:	40014000 	.word	0x40014000
 8002304:	40014400 	.word	0x40014400
 8002308:	40014800 	.word	0x40014800
 800230c:	fffffcff 	.word	0xfffffcff

08002310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	2201      	movs	r2, #1
 8002328:	4393      	bics	r3, r2
 800232a:	001a      	movs	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	22f0      	movs	r2, #240	; 0xf0
 800233a:	4393      	bics	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	220a      	movs	r2, #10
 800234c:	4393      	bics	r3, r2
 800234e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	4313      	orrs	r3, r2
 8002356:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	621a      	str	r2, [r3, #32]
}
 8002364:	46c0      	nop			; (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	b006      	add	sp, #24
 800236a:	bd80      	pop	{r7, pc}

0800236c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	2210      	movs	r2, #16
 800237e:	4393      	bics	r3, r2
 8002380:	001a      	movs	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	4a0d      	ldr	r2, [pc, #52]	; (80023cc <TIM_TI2_ConfigInputStage+0x60>)
 8002396:	4013      	ands	r3, r2
 8002398:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	031b      	lsls	r3, r3, #12
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	22a0      	movs	r2, #160	; 0xa0
 80023a8:	4393      	bics	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	621a      	str	r2, [r3, #32]
}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b006      	add	sp, #24
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	ffff0fff 	.word	0xffff0fff

080023d0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2270      	movs	r2, #112	; 0x70
 80023e4:	4393      	bics	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	609a      	str	r2, [r3, #8]
}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b004      	add	sp, #16
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	4a09      	ldr	r2, [pc, #36]	; (8002440 <TIM_ETR_SetConfig+0x3c>)
 800241c:	4013      	ands	r3, r2
 800241e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	021a      	lsls	r2, r3, #8
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	431a      	orrs	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4313      	orrs	r3, r2
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	4313      	orrs	r3, r2
 8002430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	609a      	str	r2, [r3, #8]
}
 8002438:	46c0      	nop			; (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b006      	add	sp, #24
 800243e:	bd80      	pop	{r7, pc}
 8002440:	ffff00ff 	.word	0xffff00ff

08002444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	223c      	movs	r2, #60	; 0x3c
 8002452:	5c9b      	ldrb	r3, [r3, r2]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002458:	2302      	movs	r3, #2
 800245a:	e047      	b.n	80024ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	223c      	movs	r2, #60	; 0x3c
 8002460:	2101      	movs	r1, #1
 8002462:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	223d      	movs	r2, #61	; 0x3d
 8002468:	2102      	movs	r1, #2
 800246a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2270      	movs	r2, #112	; 0x70
 8002480:	4393      	bics	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a16      	ldr	r2, [pc, #88]	; (80024f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d00f      	beq.n	80024c0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	05db      	lsls	r3, r3, #23
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d009      	beq.n	80024c0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a11      	ldr	r2, [pc, #68]	; (80024f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d004      	beq.n	80024c0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a10      	ldr	r2, [pc, #64]	; (80024fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d10c      	bne.n	80024da <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	4393      	bics	r3, r2
 80024c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	223d      	movs	r2, #61	; 0x3d
 80024de:	2101      	movs	r1, #1
 80024e0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	223c      	movs	r2, #60	; 0x3c
 80024e6:	2100      	movs	r1, #0
 80024e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b004      	add	sp, #16
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40012c00 	.word	0x40012c00
 80024f8:	40000400 	.word	0x40000400
 80024fc:	40014000 	.word	0x40014000

08002500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002508:	46c0      	nop			; (mov r8, r8)
 800250a:	46bd      	mov	sp, r7
 800250c:	b002      	add	sp, #8
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002518:	46c0      	nop			; (mov r8, r8)
 800251a:	46bd      	mov	sp, r7
 800251c:	b002      	add	sp, #8
 800251e:	bd80      	pop	{r7, pc}

08002520 <__libc_init_array>:
 8002520:	b570      	push	{r4, r5, r6, lr}
 8002522:	2600      	movs	r6, #0
 8002524:	4d0c      	ldr	r5, [pc, #48]	; (8002558 <__libc_init_array+0x38>)
 8002526:	4c0d      	ldr	r4, [pc, #52]	; (800255c <__libc_init_array+0x3c>)
 8002528:	1b64      	subs	r4, r4, r5
 800252a:	10a4      	asrs	r4, r4, #2
 800252c:	42a6      	cmp	r6, r4
 800252e:	d109      	bne.n	8002544 <__libc_init_array+0x24>
 8002530:	2600      	movs	r6, #0
 8002532:	f000 f821 	bl	8002578 <_init>
 8002536:	4d0a      	ldr	r5, [pc, #40]	; (8002560 <__libc_init_array+0x40>)
 8002538:	4c0a      	ldr	r4, [pc, #40]	; (8002564 <__libc_init_array+0x44>)
 800253a:	1b64      	subs	r4, r4, r5
 800253c:	10a4      	asrs	r4, r4, #2
 800253e:	42a6      	cmp	r6, r4
 8002540:	d105      	bne.n	800254e <__libc_init_array+0x2e>
 8002542:	bd70      	pop	{r4, r5, r6, pc}
 8002544:	00b3      	lsls	r3, r6, #2
 8002546:	58eb      	ldr	r3, [r5, r3]
 8002548:	4798      	blx	r3
 800254a:	3601      	adds	r6, #1
 800254c:	e7ee      	b.n	800252c <__libc_init_array+0xc>
 800254e:	00b3      	lsls	r3, r6, #2
 8002550:	58eb      	ldr	r3, [r5, r3]
 8002552:	4798      	blx	r3
 8002554:	3601      	adds	r6, #1
 8002556:	e7f2      	b.n	800253e <__libc_init_array+0x1e>
 8002558:	080025c8 	.word	0x080025c8
 800255c:	080025c8 	.word	0x080025c8
 8002560:	080025c8 	.word	0x080025c8
 8002564:	080025cc 	.word	0x080025cc

08002568 <memset>:
 8002568:	0003      	movs	r3, r0
 800256a:	1882      	adds	r2, r0, r2
 800256c:	4293      	cmp	r3, r2
 800256e:	d100      	bne.n	8002572 <memset+0xa>
 8002570:	4770      	bx	lr
 8002572:	7019      	strb	r1, [r3, #0]
 8002574:	3301      	adds	r3, #1
 8002576:	e7f9      	b.n	800256c <memset+0x4>

08002578 <_init>:
 8002578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800257e:	bc08      	pop	{r3}
 8002580:	469e      	mov	lr, r3
 8002582:	4770      	bx	lr

08002584 <_fini>:
 8002584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258a:	bc08      	pop	{r3}
 800258c:	469e      	mov	lr, r3
 800258e:	4770      	bx	lr

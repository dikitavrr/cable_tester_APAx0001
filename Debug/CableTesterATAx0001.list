
CableTesterATAx0001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002628  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080026e4  080026e4  000126e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800271c  0800271c  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  0800271c  0800271c  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800271c  0800271c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800271c  0800271c  0001271c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002720  08002720  00012720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000030  08002754  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08002754  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007b06  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001520  00000000  00000000  00027ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d8  00000000  00000000  000290c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006dd  00000000  00000000  000299a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019e90  00000000  00000000  0002a07d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a151  00000000  00000000  00043f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a04e3  00000000  00000000  0004e05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f8c  00000000  00000000  000ee544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f04d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000030 	.word	0x20000030
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080026cc 	.word	0x080026cc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000034 	.word	0x20000034
 8000100:	080026cc 	.word	0x080026cc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000222:	f000 fde9 	bl	8000df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
    SystemClock_Config();
 8000226:	f000 fb05 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800022a:	f000 fbe3 	bl	80009f4 <MX_GPIO_Init>
    MX_TIM3_Init();
 800022e:	f000 fb4d 	bl	80008cc <MX_TIM3_Init>
    MX_TIM6_Init();
 8000232:	f000 fba3 	bl	800097c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

// Установить все линии в первоначальное положение светодиодов
    HAL_GPIO_WritePin(STP_SR_LED_nCLR_GPIO_Port, STP_SR_LED_nCLR_Pin,
 8000236:	2390      	movs	r3, #144	; 0x90
 8000238:	05db      	lsls	r3, r3, #23
 800023a:	2201      	movs	r2, #1
 800023c:	2140      	movs	r1, #64	; 0x40
 800023e:	0018      	movs	r0, r3
 8000240:	f001 f8d5 	bl	80013ee <HAL_GPIO_WritePin>
    		GPIO_PIN_SET);
    HAL_GPIO_WritePin(STP_SR_LED_CLK_GPIO_Port, STP_SR_LED_CLK_Pin,
 8000244:	2390      	movs	r3, #144	; 0x90
 8000246:	05db      	lsls	r3, r3, #23
 8000248:	2200      	movs	r2, #0
 800024a:	2180      	movs	r1, #128	; 0x80
 800024c:	0018      	movs	r0, r3
 800024e:	f001 f8ce 	bl	80013ee <HAL_GPIO_WritePin>
    		GPIO_PIN_RESET);
// Установить все линии в первоначальное положение прозвонки и чтения
    HAL_GPIO_WritePin(LINE_CALL_SR_CLK_GPIO_Port, LINE_CALL_SR_CLK_Pin,
 8000252:	4b63      	ldr	r3, [pc, #396]	; (80003e0 <main+0x1c4>)
 8000254:	2200      	movs	r2, #0
 8000256:	2140      	movs	r1, #64	; 0x40
 8000258:	0018      	movs	r0, r3
 800025a:	f001 f8c8 	bl	80013ee <HAL_GPIO_WritePin>
    		GPIO_PIN_RESET);
    HAL_GPIO_WritePin(LINE_RESPONSE_SR_CLK_GPIO_Port, LINE_RESPONSE_SR_CLK_Pin,
 800025e:	4b60      	ldr	r3, [pc, #384]	; (80003e0 <main+0x1c4>)
 8000260:	2200      	movs	r2, #0
 8000262:	2108      	movs	r1, #8
 8000264:	0018      	movs	r0, r3
 8000266:	f001 f8c2 	bl	80013ee <HAL_GPIO_WritePin>
    		GPIO_PIN_RESET);
    HAL_GPIO_WritePin(LINE_CALL_SR_nCLR_GPIO_Port, LINE_CALL_SR_nCLR_Pin,
 800026a:	4b5d      	ldr	r3, [pc, #372]	; (80003e0 <main+0x1c4>)
 800026c:	2201      	movs	r2, #1
 800026e:	2120      	movs	r1, #32
 8000270:	0018      	movs	r0, r3
 8000272:	f001 f8bc 	bl	80013ee <HAL_GPIO_WritePin>
    		GPIO_PIN_SET);
    HAL_GPIO_WritePin(LINE_RESPONSE_SR_SHnLD_GPIO_Port, LINE_RESPONSE_SR_SHnLD_Pin,
 8000276:	2380      	movs	r3, #128	; 0x80
 8000278:	0219      	lsls	r1, r3, #8
 800027a:	2390      	movs	r3, #144	; 0x90
 800027c:	05db      	lsls	r3, r3, #23
 800027e:	2201      	movs	r2, #1
 8000280:	0018      	movs	r0, r3
 8000282:	f001 f8b4 	bl	80013ee <HAL_GPIO_WritePin>
    		GPIO_PIN_SET);

    ClearLEDSR();
 8000286:	f000 fc3f 	bl	8000b08 <ClearLEDSR>
    ClearCallSR();
 800028a:	f000 fcc1 	bl	8000c10 <ClearCallSR>
// Запустить таймер
    if (USE_TIMER) {
        HAL_TIM_Base_Start_IT(&htim3);
 800028e:	4b55      	ldr	r3, [pc, #340]	; (80003e4 <main+0x1c8>)
 8000290:	0018      	movs	r0, r3
 8000292:	f001 fe0b 	bl	8001eac <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim6);
 8000296:	4b54      	ldr	r3, [pc, #336]	; (80003e8 <main+0x1cc>)
 8000298:	0018      	movs	r0, r3
 800029a:	f001 fe07 	bl	8001eac <HAL_TIM_Base_Start_IT>
    }

                               /* TIME SETTINGS*/

    g_u32frequencyTIM3 = HAL_RCC_GetPCLK1Freq();
 800029e:	f001 fd9f 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 80002a2:	0002      	movs	r2, r0
 80002a4:	4b51      	ldr	r3, [pc, #324]	; (80003ec <main+0x1d0>)
 80002a6:	601a      	str	r2, [r3, #0]

    g_u32Prescaler = htim3.Init.Prescaler;
 80002a8:	4b4e      	ldr	r3, [pc, #312]	; (80003e4 <main+0x1c8>)
 80002aa:	685a      	ldr	r2, [r3, #4]
 80002ac:	4b50      	ldr	r3, [pc, #320]	; (80003f0 <main+0x1d4>)
 80002ae:	601a      	str	r2, [r3, #0]
    g_u32TimePeriod = ((g_u32frequencyTIM3 * TIME_BLINKING_LED_MS) /
 80002b0:	4b4e      	ldr	r3, [pc, #312]	; (80003ec <main+0x1d0>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2264      	movs	r2, #100	; 0x64
 80002b6:	435a      	muls	r2, r3
 80002b8:	0010      	movs	r0, r2
    		((g_u32Prescaler + 1) * 1000)) - 1;
 80002ba:	4b4d      	ldr	r3, [pc, #308]	; (80003f0 <main+0x1d4>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	1c5a      	adds	r2, r3, #1
 80002c0:	0013      	movs	r3, r2
 80002c2:	015b      	lsls	r3, r3, #5
 80002c4:	1a9b      	subs	r3, r3, r2
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	189b      	adds	r3, r3, r2
 80002ca:	00db      	lsls	r3, r3, #3
    g_u32TimePeriod = ((g_u32frequencyTIM3 * TIME_BLINKING_LED_MS) /
 80002cc:	0019      	movs	r1, r3
 80002ce:	f7ff ff19 	bl	8000104 <__udivsi3>
 80002d2:	0003      	movs	r3, r0
    		((g_u32Prescaler + 1) * 1000)) - 1;
 80002d4:	1e5a      	subs	r2, r3, #1
    g_u32TimePeriod = ((g_u32frequencyTIM3 * TIME_BLINKING_LED_MS) /
 80002d6:	4b47      	ldr	r3, [pc, #284]	; (80003f4 <main+0x1d8>)
 80002d8:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_AUTORELOAD(&htim3, g_u32TimePeriod);
 80002da:	4b42      	ldr	r3, [pc, #264]	; (80003e4 <main+0x1c8>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a45      	ldr	r2, [pc, #276]	; (80003f4 <main+0x1d8>)
 80002e0:	6812      	ldr	r2, [r2, #0]
 80002e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80002e4:	4b43      	ldr	r3, [pc, #268]	; (80003f4 <main+0x1d8>)
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	4b3e      	ldr	r3, [pc, #248]	; (80003e4 <main+0x1c8>)
 80002ea:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN 3 */

	                           /* ringing of lines */
    	/*хочу чтобы 00000001 прошёл поочерёдно по 8 линиям и
				результат записался в двумерный массив*/
        if (g_u8NeedToRingLine) {
 80002ec:	4b42      	ldr	r3, [pc, #264]	; (80003f8 <main+0x1dc>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d100      	bne.n	80002f6 <main+0xda>
 80002f4:	e0b4      	b.n	8000460 <main+0x244>

            ClearCallSR();
 80002f6:	f000 fc8b 	bl	8000c10 <ClearCallSR>

            for (uint8_t i = 0; i < 8; i++) {
 80002fa:	1dfb      	adds	r3, r7, #7
 80002fc:	2200      	movs	r2, #0
 80002fe:	701a      	strb	r2, [r3, #0]
 8000300:	e016      	b.n	8000330 <main+0x114>
	        HAL_GPIO_WritePin(LINE_CALL_SR_DATA_GPIO_Port, LINE_CALL_SR_DATA_Pin,
 8000302:	4b37      	ldr	r3, [pc, #220]	; (80003e0 <main+0x1c4>)
 8000304:	2201      	movs	r2, #1
 8000306:	2180      	movs	r1, #128	; 0x80
 8000308:	0018      	movs	r0, r3
 800030a:	f001 f870 	bl	80013ee <HAL_GPIO_WritePin>
	                GPIO_PIN_SET);
	        HAL_GPIO_WritePin(LINE_CALL_SR_CLK_GPIO_Port, LINE_CALL_SR_CLK_Pin,
 800030e:	4b34      	ldr	r3, [pc, #208]	; (80003e0 <main+0x1c4>)
 8000310:	2201      	movs	r2, #1
 8000312:	2140      	movs	r1, #64	; 0x40
 8000314:	0018      	movs	r0, r3
 8000316:	f001 f86a 	bl	80013ee <HAL_GPIO_WritePin>
	        		GPIO_PIN_SET);
	        HAL_GPIO_WritePin(LINE_CALL_SR_CLK_GPIO_Port, LINE_CALL_SR_CLK_Pin,
 800031a:	4b31      	ldr	r3, [pc, #196]	; (80003e0 <main+0x1c4>)
 800031c:	2200      	movs	r2, #0
 800031e:	2140      	movs	r1, #64	; 0x40
 8000320:	0018      	movs	r0, r3
 8000322:	f001 f864 	bl	80013ee <HAL_GPIO_WritePin>
            for (uint8_t i = 0; i < 8; i++) {
 8000326:	1dfb      	adds	r3, r7, #7
 8000328:	781a      	ldrb	r2, [r3, #0]
 800032a:	1dfb      	adds	r3, r7, #7
 800032c:	3201      	adds	r2, #1
 800032e:	701a      	strb	r2, [r3, #0]
 8000330:	1dfb      	adds	r3, r7, #7
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b07      	cmp	r3, #7
 8000336:	d9e4      	bls.n	8000302 <main+0xe6>
	        		GPIO_PIN_RESET);
            }
	        HAL_GPIO_WritePin(LINE_CALL_SR_DATA_GPIO_Port, LINE_CALL_SR_DATA_Pin,
 8000338:	4b29      	ldr	r3, [pc, #164]	; (80003e0 <main+0x1c4>)
 800033a:	2200      	movs	r2, #0
 800033c:	2180      	movs	r1, #128	; 0x80
 800033e:	0018      	movs	r0, r3
 8000340:	f001 f855 	bl	80013ee <HAL_GPIO_WritePin>
	                GPIO_PIN_RESET);
	        HAL_GPIO_WritePin(LINE_CALL_SR_CLK_GPIO_Port, LINE_CALL_SR_CLK_Pin,
 8000344:	4b26      	ldr	r3, [pc, #152]	; (80003e0 <main+0x1c4>)
 8000346:	2201      	movs	r2, #1
 8000348:	2140      	movs	r1, #64	; 0x40
 800034a:	0018      	movs	r0, r3
 800034c:	f001 f84f 	bl	80013ee <HAL_GPIO_WritePin>
	        		GPIO_PIN_SET);
	        HAL_GPIO_WritePin(LINE_CALL_SR_CLK_GPIO_Port, LINE_CALL_SR_CLK_Pin,
 8000350:	4b23      	ldr	r3, [pc, #140]	; (80003e0 <main+0x1c4>)
 8000352:	2200      	movs	r2, #0
 8000354:	2140      	movs	r1, #64	; 0x40
 8000356:	0018      	movs	r0, r3
 8000358:	f001 f849 	bl	80013ee <HAL_GPIO_WritePin>
	        		GPIO_PIN_RESET);

            /*сюда флаг для таймера?*/
	        for (g_u8CallColumn = 0; g_u8CallColumn < NUMBER_OF_LINES;
 800035c:	4b27      	ldr	r3, [pc, #156]	; (80003fc <main+0x1e0>)
 800035e:	2200      	movs	r2, #0
 8000360:	701a      	strb	r2, [r3, #0]
 8000362:	e078      	b.n	8000456 <main+0x23a>
	        		g_u8CallColumn++) {

		        HAL_Delay(100);
 8000364:	2064      	movs	r0, #100	; 0x64
 8000366:	f000 fdab 	bl	8000ec0 <HAL_Delay>

	        	HAL_GPIO_WritePin(LINE_RESPONSE_SR_SHnLD_GPIO_Port,
 800036a:	2380      	movs	r3, #128	; 0x80
 800036c:	0219      	lsls	r1, r3, #8
 800036e:	2390      	movs	r3, #144	; 0x90
 8000370:	05db      	lsls	r3, r3, #23
 8000372:	2200      	movs	r2, #0
 8000374:	0018      	movs	r0, r3
 8000376:	f001 f83a 	bl	80013ee <HAL_GPIO_WritePin>
		        		LINE_RESPONSE_SR_SHnLD_Pin, GPIO_PIN_RESET);
		        HAL_GPIO_WritePin(LINE_RESPONSE_SR_SHnLD_GPIO_Port,
 800037a:	2380      	movs	r3, #128	; 0x80
 800037c:	0219      	lsls	r1, r3, #8
 800037e:	2390      	movs	r3, #144	; 0x90
 8000380:	05db      	lsls	r3, r3, #23
 8000382:	2201      	movs	r2, #1
 8000384:	0018      	movs	r0, r3
 8000386:	f001 f832 	bl	80013ee <HAL_GPIO_WritePin>
		        		LINE_RESPONSE_SR_SHnLD_Pin, GPIO_PIN_SET);
		        /*не нужна правда без неё не работает*/
		        HAL_GPIO_WritePin(LINE_CALL_SR_DATA_GPIO_Port,
 800038a:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <main+0x1c4>)
 800038c:	2201      	movs	r2, #1
 800038e:	2180      	movs	r1, #128	; 0x80
 8000390:	0018      	movs	r0, r3
 8000392:	f001 f82c 	bl	80013ee <HAL_GPIO_WritePin>
		        		LINE_CALL_SR_DATA_Pin, GPIO_PIN_SET);

		        for (g_u8RespString = 0; g_u8RespString < NUMBER_OF_LINES;
 8000396:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <main+0x1e4>)
 8000398:	2200      	movs	r2, #0
 800039a:	701a      	strb	r2, [r3, #0]
 800039c:	e045      	b.n	800042a <main+0x20e>
		        		g_u8RespString++) {

		            HAL_GPIO_WritePin(LINE_RESPONSE_SR_CLK_GPIO_Port,
 800039e:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <main+0x1c4>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	2108      	movs	r1, #8
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 f822 	bl	80013ee <HAL_GPIO_WritePin>
		            		LINE_RESPONSE_SR_CLK_Pin, GPIO_PIN_SET);
			        HAL_GPIO_WritePin(LINE_RESPONSE_SR_CLK_GPIO_Port,
 80003aa:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <main+0x1c4>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	2108      	movs	r1, #8
 80003b0:	0018      	movs	r0, r3
 80003b2:	f001 f81c 	bl	80013ee <HAL_GPIO_WritePin>
			        		LINE_RESPONSE_SR_CLK_Pin, GPIO_PIN_RESET);

			        if (HAL_GPIO_ReadPin(LINE_RESPONSE_SR_DATA_GPIO_Port,
 80003b6:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <main+0x1c4>)
 80003b8:	2110      	movs	r1, #16
 80003ba:	0018      	movs	r0, r3
 80003bc:	f000 fffa 	bl	80013b4 <HAL_GPIO_ReadPin>
 80003c0:	0003      	movs	r3, r0
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d120      	bne.n	8000408 <main+0x1ec>
			        		LINE_RESPONSE_SR_DATA_Pin) == GPIO_PIN_SET) {
				        g_au8ResponsesData[g_u8CallColumn][g_u8RespString] = 1;
 80003c6:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <main+0x1e0>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	0018      	movs	r0, r3
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <main+0x1e4>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	0019      	movs	r1, r3
 80003d2:	4a0c      	ldr	r2, [pc, #48]	; (8000404 <main+0x1e8>)
 80003d4:	00c3      	lsls	r3, r0, #3
 80003d6:	18d3      	adds	r3, r2, r3
 80003d8:	2201      	movs	r2, #1
 80003da:	545a      	strb	r2, [r3, r1]
 80003dc:	e01f      	b.n	800041e <main+0x202>
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	48000400 	.word	0x48000400
 80003e4:	2000004c 	.word	0x2000004c
 80003e8:	20000094 	.word	0x20000094
 80003ec:	200000f4 	.word	0x200000f4
 80003f0:	200000f0 	.word	0x200000f0
 80003f4:	200000ec 	.word	0x200000ec
 80003f8:	20000003 	.word	0x20000003
 80003fc:	200000f8 	.word	0x200000f8
 8000400:	200000f9 	.word	0x200000f9
 8000404:	200000fc 	.word	0x200000fc
			        }
			        else {
				        g_au8ResponsesData[g_u8CallColumn][g_u8RespString] = 0;
 8000408:	4be2      	ldr	r3, [pc, #904]	; (8000794 <main+0x578>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	0018      	movs	r0, r3
 800040e:	4be2      	ldr	r3, [pc, #904]	; (8000798 <main+0x57c>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	0019      	movs	r1, r3
 8000414:	4ae1      	ldr	r2, [pc, #900]	; (800079c <main+0x580>)
 8000416:	00c3      	lsls	r3, r0, #3
 8000418:	18d3      	adds	r3, r2, r3
 800041a:	2200      	movs	r2, #0
 800041c:	545a      	strb	r2, [r3, r1]
		        		g_u8RespString++) {
 800041e:	4bde      	ldr	r3, [pc, #888]	; (8000798 <main+0x57c>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	3301      	adds	r3, #1
 8000424:	b2da      	uxtb	r2, r3
 8000426:	4bdc      	ldr	r3, [pc, #880]	; (8000798 <main+0x57c>)
 8000428:	701a      	strb	r2, [r3, #0]
		        for (g_u8RespString = 0; g_u8RespString < NUMBER_OF_LINES;
 800042a:	4bdb      	ldr	r3, [pc, #876]	; (8000798 <main+0x57c>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b07      	cmp	r3, #7
 8000430:	d9b5      	bls.n	800039e <main+0x182>
			        }

		        }
		        // мб иф колколумн = 7 то брейк чтобы было 8 клоков а не 9

		        HAL_GPIO_WritePin(LINE_CALL_SR_CLK_GPIO_Port,
 8000432:	4bdb      	ldr	r3, [pc, #876]	; (80007a0 <main+0x584>)
 8000434:	2201      	movs	r2, #1
 8000436:	2140      	movs	r1, #64	; 0x40
 8000438:	0018      	movs	r0, r3
 800043a:	f000 ffd8 	bl	80013ee <HAL_GPIO_WritePin>
		        		LINE_CALL_SR_CLK_Pin, GPIO_PIN_SET);
		        HAL_GPIO_WritePin(LINE_CALL_SR_CLK_GPIO_Port,
 800043e:	4bd8      	ldr	r3, [pc, #864]	; (80007a0 <main+0x584>)
 8000440:	2200      	movs	r2, #0
 8000442:	2140      	movs	r1, #64	; 0x40
 8000444:	0018      	movs	r0, r3
 8000446:	f000 ffd2 	bl	80013ee <HAL_GPIO_WritePin>
	        		g_u8CallColumn++) {
 800044a:	4bd2      	ldr	r3, [pc, #840]	; (8000794 <main+0x578>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	3301      	adds	r3, #1
 8000450:	b2da      	uxtb	r2, r3
 8000452:	4bd0      	ldr	r3, [pc, #832]	; (8000794 <main+0x578>)
 8000454:	701a      	strb	r2, [r3, #0]
	        for (g_u8CallColumn = 0; g_u8CallColumn < NUMBER_OF_LINES;
 8000456:	4bcf      	ldr	r3, [pc, #828]	; (8000794 <main+0x578>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b07      	cmp	r3, #7
 800045c:	d800      	bhi.n	8000460 <main+0x244>
 800045e:	e781      	b.n	8000364 <main+0x148>
                            /* data processing */
//хочу чтобы двумерный массив обработался и
        //на основе обработки сгенерировались данные для отображения
//сформировали что отобразить

        if (g_u8StepNumber == 0){
 8000460:	4bd0      	ldr	r3, [pc, #832]	; (80007a4 <main+0x588>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d000      	beq.n	800046a <main+0x24e>
 8000468:	e09b      	b.n	80005a2 <main+0x386>

            if (g_u8ActiveRowColor == GREEN_COLOR) {
 800046a:	4bcf      	ldr	r3, [pc, #828]	; (80007a8 <main+0x58c>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d129      	bne.n	80004c6 <main+0x2aa>
                if ((g_u8ActiveLED >= 0) && (g_u8ActiveLED < NUMBER_OF_LEDS / 2)) {
 8000472:	4bce      	ldr	r3, [pc, #824]	; (80007ac <main+0x590>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b07      	cmp	r3, #7
 8000478:	d80d      	bhi.n	8000496 <main+0x27a>
		            g_u8LEDCallGreenData = (LED_ON << g_au8GreenCalls[g_u8ActiveRow]);
 800047a:	4bcd      	ldr	r3, [pc, #820]	; (80007b0 <main+0x594>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	001a      	movs	r2, r3
 8000480:	4bcc      	ldr	r3, [pc, #816]	; (80007b4 <main+0x598>)
 8000482:	5c9b      	ldrb	r3, [r3, r2]
 8000484:	001a      	movs	r2, r3
 8000486:	2301      	movs	r3, #1
 8000488:	4093      	lsls	r3, r2
 800048a:	b2da      	uxtb	r2, r3
 800048c:	4bca      	ldr	r3, [pc, #808]	; (80007b8 <main+0x59c>)
 800048e:	701a      	strb	r2, [r3, #0]
                    g_u8LEDCallRedData = LED_OFF;
 8000490:	4bca      	ldr	r3, [pc, #808]	; (80007bc <main+0x5a0>)
 8000492:	2200      	movs	r2, #0
 8000494:	701a      	strb	r2, [r3, #0]
		        }
                if ((g_u8ActiveLED >= NUMBER_OF_LEDS / 2) &&
 8000496:	4bc5      	ldr	r3, [pc, #788]	; (80007ac <main+0x590>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b07      	cmp	r3, #7
 800049c:	d913      	bls.n	80004c6 <main+0x2aa>
                		(g_u8ActiveLED < NUMBER_OF_LEDS)) {
 800049e:	4bc3      	ldr	r3, [pc, #780]	; (80007ac <main+0x590>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
                if ((g_u8ActiveLED >= NUMBER_OF_LEDS / 2) &&
 80004a2:	2b0f      	cmp	r3, #15
 80004a4:	d80f      	bhi.n	80004c6 <main+0x2aa>
                	g_u8LEDRespGreenData = (LED_ON <<
                			g_au8GreenResponses[NUMBER_OF_LINES - g_u8ActiveRow - 1]);
 80004a6:	4bc2      	ldr	r3, [pc, #776]	; (80007b0 <main+0x594>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	001a      	movs	r2, r3
 80004ac:	2307      	movs	r3, #7
 80004ae:	1a9b      	subs	r3, r3, r2
 80004b0:	4ac3      	ldr	r2, [pc, #780]	; (80007c0 <main+0x5a4>)
 80004b2:	5cd3      	ldrb	r3, [r2, r3]
 80004b4:	001a      	movs	r2, r3
                	g_u8LEDRespGreenData = (LED_ON <<
 80004b6:	2301      	movs	r3, #1
 80004b8:	4093      	lsls	r3, r2
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	4bc1      	ldr	r3, [pc, #772]	; (80007c4 <main+0x5a8>)
 80004be:	701a      	strb	r2, [r3, #0]
                	g_u8LEDRespRedData = LED_OFF;
 80004c0:	4bc1      	ldr	r3, [pc, #772]	; (80007c8 <main+0x5ac>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	701a      	strb	r2, [r3, #0]
                }
            }

            if (g_u8ActiveRowColor == RED_COLOR) {
 80004c6:	4bb8      	ldr	r3, [pc, #736]	; (80007a8 <main+0x58c>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b02      	cmp	r3, #2
 80004cc:	d129      	bne.n	8000522 <main+0x306>
            	if ((g_u8ActiveLED >= 0) && (g_u8ActiveLED < NUMBER_OF_LEDS/2)) {
 80004ce:	4bb7      	ldr	r3, [pc, #732]	; (80007ac <main+0x590>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b07      	cmp	r3, #7
 80004d4:	d80d      	bhi.n	80004f2 <main+0x2d6>
            		g_u8LEDCallRedData = LED_ON << g_au8RedCalls[g_u8ActiveRow];
 80004d6:	4bb6      	ldr	r3, [pc, #728]	; (80007b0 <main+0x594>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	001a      	movs	r2, r3
 80004dc:	4bbb      	ldr	r3, [pc, #748]	; (80007cc <main+0x5b0>)
 80004de:	5c9b      	ldrb	r3, [r3, r2]
 80004e0:	001a      	movs	r2, r3
 80004e2:	2301      	movs	r3, #1
 80004e4:	4093      	lsls	r3, r2
 80004e6:	b2da      	uxtb	r2, r3
 80004e8:	4bb4      	ldr	r3, [pc, #720]	; (80007bc <main+0x5a0>)
 80004ea:	701a      	strb	r2, [r3, #0]
            		g_u8LEDCallGreenData = LED_OFF;
 80004ec:	4bb2      	ldr	r3, [pc, #712]	; (80007b8 <main+0x59c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	701a      	strb	r2, [r3, #0]
            	}
            	if ((g_u8ActiveLED >= NUMBER_OF_LEDS/2) &&
 80004f2:	4bae      	ldr	r3, [pc, #696]	; (80007ac <main+0x590>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b07      	cmp	r3, #7
 80004f8:	d913      	bls.n	8000522 <main+0x306>
            			(g_u8ActiveLED < NUMBER_OF_LEDS)) {
 80004fa:	4bac      	ldr	r3, [pc, #688]	; (80007ac <main+0x590>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
            	if ((g_u8ActiveLED >= NUMBER_OF_LEDS/2) &&
 80004fe:	2b0f      	cmp	r3, #15
 8000500:	d80f      	bhi.n	8000522 <main+0x306>
            		g_u8LEDRespRedData = LED_ON <<
            				g_au8RedResponses[NUMBER_OF_LINES - g_u8ActiveRow - 1];
 8000502:	4bab      	ldr	r3, [pc, #684]	; (80007b0 <main+0x594>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	001a      	movs	r2, r3
 8000508:	2307      	movs	r3, #7
 800050a:	1a9b      	subs	r3, r3, r2
 800050c:	4ab0      	ldr	r2, [pc, #704]	; (80007d0 <main+0x5b4>)
 800050e:	5cd3      	ldrb	r3, [r2, r3]
 8000510:	001a      	movs	r2, r3
            		g_u8LEDRespRedData = LED_ON <<
 8000512:	2301      	movs	r3, #1
 8000514:	4093      	lsls	r3, r2
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4bab      	ldr	r3, [pc, #684]	; (80007c8 <main+0x5ac>)
 800051a:	701a      	strb	r2, [r3, #0]
            		g_u8LEDRespGreenData = LED_OFF;
 800051c:	4ba9      	ldr	r3, [pc, #676]	; (80007c4 <main+0x5a8>)
 800051e:	2200      	movs	r2, #0
 8000520:	701a      	strb	r2, [r3, #0]
            	}
            }

            if (g_u8ActiveRowColor == YELLOW_COLOR) {
 8000522:	4ba1      	ldr	r3, [pc, #644]	; (80007a8 <main+0x58c>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b03      	cmp	r3, #3
 8000528:	d13b      	bne.n	80005a2 <main+0x386>
            	if ((g_u8ActiveLED >= 0) && (g_u8ActiveLED < NUMBER_OF_LEDS/2)) {
 800052a:	4ba0      	ldr	r3, [pc, #640]	; (80007ac <main+0x590>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b07      	cmp	r3, #7
 8000530:	d815      	bhi.n	800055e <main+0x342>
            		g_u8LEDCallGreenData = LED_ON << g_au8GreenCalls[g_u8ActiveRow];
 8000532:	4b9f      	ldr	r3, [pc, #636]	; (80007b0 <main+0x594>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	001a      	movs	r2, r3
 8000538:	4b9e      	ldr	r3, [pc, #632]	; (80007b4 <main+0x598>)
 800053a:	5c9b      	ldrb	r3, [r3, r2]
 800053c:	001a      	movs	r2, r3
 800053e:	2301      	movs	r3, #1
 8000540:	4093      	lsls	r3, r2
 8000542:	b2da      	uxtb	r2, r3
 8000544:	4b9c      	ldr	r3, [pc, #624]	; (80007b8 <main+0x59c>)
 8000546:	701a      	strb	r2, [r3, #0]
            		g_u8LEDCallRedData = LED_ON << g_au8RedCalls[g_u8ActiveRow];
 8000548:	4b99      	ldr	r3, [pc, #612]	; (80007b0 <main+0x594>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	001a      	movs	r2, r3
 800054e:	4b9f      	ldr	r3, [pc, #636]	; (80007cc <main+0x5b0>)
 8000550:	5c9b      	ldrb	r3, [r3, r2]
 8000552:	001a      	movs	r2, r3
 8000554:	2301      	movs	r3, #1
 8000556:	4093      	lsls	r3, r2
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4b98      	ldr	r3, [pc, #608]	; (80007bc <main+0x5a0>)
 800055c:	701a      	strb	r2, [r3, #0]
            	}
            	if ((g_u8ActiveLED >= NUMBER_OF_LEDS/2) &&
 800055e:	4b93      	ldr	r3, [pc, #588]	; (80007ac <main+0x590>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b07      	cmp	r3, #7
 8000564:	d91d      	bls.n	80005a2 <main+0x386>
            			(g_u8ActiveLED < NUMBER_OF_LEDS)) {
 8000566:	4b91      	ldr	r3, [pc, #580]	; (80007ac <main+0x590>)
 8000568:	781b      	ldrb	r3, [r3, #0]
            	if ((g_u8ActiveLED >= NUMBER_OF_LEDS/2) &&
 800056a:	2b0f      	cmp	r3, #15
 800056c:	d819      	bhi.n	80005a2 <main+0x386>
            		g_u8LEDRespGreenData = LED_ON <<
            				g_au8GreenResponses[NUMBER_OF_LINES - g_u8ActiveRow - 1];
 800056e:	4b90      	ldr	r3, [pc, #576]	; (80007b0 <main+0x594>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	001a      	movs	r2, r3
 8000574:	2307      	movs	r3, #7
 8000576:	1a9b      	subs	r3, r3, r2
 8000578:	4a91      	ldr	r2, [pc, #580]	; (80007c0 <main+0x5a4>)
 800057a:	5cd3      	ldrb	r3, [r2, r3]
 800057c:	001a      	movs	r2, r3
            		g_u8LEDRespGreenData = LED_ON <<
 800057e:	2301      	movs	r3, #1
 8000580:	4093      	lsls	r3, r2
 8000582:	b2da      	uxtb	r2, r3
 8000584:	4b8f      	ldr	r3, [pc, #572]	; (80007c4 <main+0x5a8>)
 8000586:	701a      	strb	r2, [r3, #0]
            		g_u8LEDRespRedData = LED_ON <<
            				g_au8RedResponses[NUMBER_OF_LINES - g_u8ActiveRow - 1];
 8000588:	4b89      	ldr	r3, [pc, #548]	; (80007b0 <main+0x594>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	001a      	movs	r2, r3
 800058e:	2307      	movs	r3, #7
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	4a8f      	ldr	r2, [pc, #572]	; (80007d0 <main+0x5b4>)
 8000594:	5cd3      	ldrb	r3, [r2, r3]
 8000596:	001a      	movs	r2, r3
            		g_u8LEDRespRedData = LED_ON <<
 8000598:	2301      	movs	r3, #1
 800059a:	4093      	lsls	r3, r2
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b8a      	ldr	r3, [pc, #552]	; (80007c8 <main+0x5ac>)
 80005a0:	701a      	strb	r2, [r3, #0]
            	}
            }
        }

        if (g_u8StepNumber != 0) {
 80005a2:	4b80      	ldr	r3, [pc, #512]	; (80007a4 <main+0x588>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d05b      	beq.n	8000662 <main+0x446>
        	[NUMBER_OF_LINES - g_u8StepNumber]);*/

	 /* g_u8BinaryRed = g_u8BinaryRed | (SR_DATA_bm << g_au8RedCalls
        	[NUMBER_OF_LINES - g_u8StepNumber]);*/

        	if (g_u8ActiveRowColor == GREEN_COLOR) {
 80005aa:	4b7f      	ldr	r3, [pc, #508]	; (80007a8 <main+0x58c>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d129      	bne.n	8000606 <main+0x3ea>

        		g_u8LEDCallGreenData = (LED_ON << g_au8GreenCalls[g_u8ActiveRow]) |
 80005b2:	4b7f      	ldr	r3, [pc, #508]	; (80007b0 <main+0x594>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	001a      	movs	r2, r3
 80005b8:	4b7e      	ldr	r3, [pc, #504]	; (80007b4 <main+0x598>)
 80005ba:	5c9b      	ldrb	r3, [r3, r2]
 80005bc:	001a      	movs	r2, r3
 80005be:	2301      	movs	r3, #1
 80005c0:	4093      	lsls	r3, r2
 80005c2:	b25a      	sxtb	r2, r3
 80005c4:	4b83      	ldr	r3, [pc, #524]	; (80007d4 <main+0x5b8>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b25b      	sxtb	r3, r3
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	4b79      	ldr	r3, [pc, #484]	; (80007b8 <main+0x59c>)
 80005d2:	701a      	strb	r2, [r3, #0]
        				(g_u8ColumnGreen);
        		g_u8LEDRespGreenData = (LED_ON << g_au8GreenResponses
        				[NUMBER_OF_LINES - g_u8ActiveRow]) | (g_u8ColumnGreen);
 80005d4:	4b76      	ldr	r3, [pc, #472]	; (80007b0 <main+0x594>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	001a      	movs	r2, r3
 80005da:	2308      	movs	r3, #8
 80005dc:	1a9b      	subs	r3, r3, r2
 80005de:	4a78      	ldr	r2, [pc, #480]	; (80007c0 <main+0x5a4>)
 80005e0:	5cd3      	ldrb	r3, [r2, r3]
 80005e2:	001a      	movs	r2, r3
        		g_u8LEDRespGreenData = (LED_ON << g_au8GreenResponses
 80005e4:	2301      	movs	r3, #1
 80005e6:	4093      	lsls	r3, r2
        				[NUMBER_OF_LINES - g_u8ActiveRow]) | (g_u8ColumnGreen);
 80005e8:	b25a      	sxtb	r2, r3
 80005ea:	4b7a      	ldr	r3, [pc, #488]	; (80007d4 <main+0x5b8>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	b25b      	sxtb	r3, r3
 80005f0:	4313      	orrs	r3, r2
 80005f2:	b25b      	sxtb	r3, r3
 80005f4:	b2da      	uxtb	r2, r3
        		g_u8LEDRespGreenData = (LED_ON << g_au8GreenResponses
 80005f6:	4b73      	ldr	r3, [pc, #460]	; (80007c4 <main+0x5a8>)
 80005f8:	701a      	strb	r2, [r3, #0]
			  	g_u8LEDCallRedData = LED_OFF /*| (g_u8BinaryRed)*/;
 80005fa:	4b70      	ldr	r3, [pc, #448]	; (80007bc <main+0x5a0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
			  	g_u8LEDRespRedData = LED_OFF /*| (g_u8BinaryRed)*/;
 8000600:	4b71      	ldr	r3, [pc, #452]	; (80007c8 <main+0x5ac>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
        	}
        	if (g_u8ActiveRowColor == RED_COLOR) {
 8000606:	4b68      	ldr	r3, [pc, #416]	; (80007a8 <main+0x58c>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b02      	cmp	r3, #2
 800060c:	d129      	bne.n	8000662 <main+0x446>

        		g_u8LEDCallRedData = (LED_ON << g_au8RedCalls[g_u8ActiveRow]) |
 800060e:	4b68      	ldr	r3, [pc, #416]	; (80007b0 <main+0x594>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	001a      	movs	r2, r3
 8000614:	4b6d      	ldr	r3, [pc, #436]	; (80007cc <main+0x5b0>)
 8000616:	5c9b      	ldrb	r3, [r3, r2]
 8000618:	001a      	movs	r2, r3
 800061a:	2301      	movs	r3, #1
 800061c:	4093      	lsls	r3, r2
 800061e:	b25a      	sxtb	r2, r3
 8000620:	4b6d      	ldr	r3, [pc, #436]	; (80007d8 <main+0x5bc>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b25b      	sxtb	r3, r3
 8000626:	4313      	orrs	r3, r2
 8000628:	b25b      	sxtb	r3, r3
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b63      	ldr	r3, [pc, #396]	; (80007bc <main+0x5a0>)
 800062e:	701a      	strb	r2, [r3, #0]
        				(g_u8ColumnRed);
        		g_u8LEDRespRedData = (LED_ON << g_au8RedResponses
        				[NUMBER_OF_LINES - g_u8ActiveRow]) | (g_u8ColumnRed);
 8000630:	4b5f      	ldr	r3, [pc, #380]	; (80007b0 <main+0x594>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	001a      	movs	r2, r3
 8000636:	2308      	movs	r3, #8
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	4a65      	ldr	r2, [pc, #404]	; (80007d0 <main+0x5b4>)
 800063c:	5cd3      	ldrb	r3, [r2, r3]
 800063e:	001a      	movs	r2, r3
        		g_u8LEDRespRedData = (LED_ON << g_au8RedResponses
 8000640:	2301      	movs	r3, #1
 8000642:	4093      	lsls	r3, r2
        				[NUMBER_OF_LINES - g_u8ActiveRow]) | (g_u8ColumnRed);
 8000644:	b25a      	sxtb	r2, r3
 8000646:	4b64      	ldr	r3, [pc, #400]	; (80007d8 <main+0x5bc>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b25b      	sxtb	r3, r3
 800064c:	4313      	orrs	r3, r2
 800064e:	b25b      	sxtb	r3, r3
 8000650:	b2da      	uxtb	r2, r3
        		g_u8LEDRespRedData = (LED_ON << g_au8RedResponses
 8000652:	4b5d      	ldr	r3, [pc, #372]	; (80007c8 <main+0x5ac>)
 8000654:	701a      	strb	r2, [r3, #0]
        		g_u8LEDCallGreenData = LED_OFF /*| (g_u8BinaryGreen)*/;
 8000656:	4b58      	ldr	r3, [pc, #352]	; (80007b8 <main+0x59c>)
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
        		g_u8LEDRespGreenData = LED_OFF /*| (g_u8BinaryGreen)*/;
 800065c:	4b59      	ldr	r3, [pc, #356]	; (80007c4 <main+0x5a8>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
        }


	  //отобразили

        if (g_u8NeedToDisplayLEDData) {
 8000662:	4b5e      	ldr	r3, [pc, #376]	; (80007dc <main+0x5c0>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d03a      	beq.n	80006e0 <main+0x4c4>
        	ClearLEDSR();
 800066a:	f000 fa4d 	bl	8000b08 <ClearLEDSR>
        	LoadLEDSR();
 800066e:	f000 fa5f 	bl	8000b30 <LoadLEDSR>


        	if (USE_TIMER) {
        		g_u8NeedToDisplayLEDData = 0;
 8000672:	4b5a      	ldr	r3, [pc, #360]	; (80007dc <main+0x5c0>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
        	}
        	g_u8ActiveLED++;
 8000678:	4b4c      	ldr	r3, [pc, #304]	; (80007ac <main+0x590>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	3301      	adds	r3, #1
 800067e:	b2da      	uxtb	r2, r3
 8000680:	4b4a      	ldr	r3, [pc, #296]	; (80007ac <main+0x590>)
 8000682:	701a      	strb	r2, [r3, #0]
        	if (g_u8ActiveLED == NUMBER_OF_LEDS){
 8000684:	4b49      	ldr	r3, [pc, #292]	; (80007ac <main+0x590>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b10      	cmp	r3, #16
 800068a:	d10f      	bne.n	80006ac <main+0x490>
        		g_u8ActiveRowColor++;
 800068c:	4b46      	ldr	r3, [pc, #280]	; (80007a8 <main+0x58c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	b2da      	uxtb	r2, r3
 8000694:	4b44      	ldr	r3, [pc, #272]	; (80007a8 <main+0x58c>)
 8000696:	701a      	strb	r2, [r3, #0]
        		g_u8ActiveLED = 0;
 8000698:	4b44      	ldr	r3, [pc, #272]	; (80007ac <main+0x590>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
        		if (g_u8ActiveRowColor == NUMBER_OF_COLORS) {
 800069e:	4b42      	ldr	r3, [pc, #264]	; (80007a8 <main+0x58c>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b04      	cmp	r3, #4
 80006a4:	d102      	bne.n	80006ac <main+0x490>
        			g_u8ActiveRowColor = 1;
 80006a6:	4b40      	ldr	r3, [pc, #256]	; (80007a8 <main+0x58c>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]

        		}
        	}
		 // g_u8ActiveRow++;

        	if (g_u8ActiveRow/* + g_u8StepNumber */== NUMBER_OF_LINES) {
 80006ac:	4b40      	ldr	r3, [pc, #256]	; (80007b0 <main+0x594>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b08      	cmp	r3, #8
 80006b2:	d102      	bne.n	80006ba <main+0x49e>
        		g_u8ActiveRow = 0;
 80006b4:	4b3e      	ldr	r3, [pc, #248]	; (80007b0 <main+0x594>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
			  //g_u8StepNumber++;
			}
        	g_u8ActiveRow++;
 80006ba:	4b3d      	ldr	r3, [pc, #244]	; (80007b0 <main+0x594>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b3b      	ldr	r3, [pc, #236]	; (80007b0 <main+0x594>)
 80006c4:	701a      	strb	r2, [r3, #0]
        	if (g_u8StepNumber == NUMBER_OF_LINES) {
 80006c6:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <main+0x588>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b08      	cmp	r3, #8
 80006cc:	d108      	bne.n	80006e0 <main+0x4c4>
				//break;
        		g_u8StepNumber = 0;
 80006ce:	4b35      	ldr	r3, [pc, #212]	; (80007a4 <main+0x588>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
				g_u8ColumnGreen = 0b00000000;
 80006d4:	4b3f      	ldr	r3, [pc, #252]	; (80007d4 <main+0x5b8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
				g_u8ColumnRed = 0b00000000;
 80006da:	4b3f      	ldr	r3, [pc, #252]	; (80007d8 <main+0x5bc>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
//			    g_u8DisplayAllLinesUnicolor = 1;


        }

        if (g_u8AllLinesUnicolor == GREEN_COLOR) {
 80006e0:	4b3f      	ldr	r3, [pc, #252]	; (80007e0 <main+0x5c4>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d10b      	bne.n	8000700 <main+0x4e4>

        	g_u8AllLEDCallGreenData = LED_ON;
 80006e8:	4b3e      	ldr	r3, [pc, #248]	; (80007e4 <main+0x5c8>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]
        	g_u8AllLEDRespGreenData = LED_ON;
 80006ee:	4b3e      	ldr	r3, [pc, #248]	; (80007e8 <main+0x5cc>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	701a      	strb	r2, [r3, #0]
        	g_u8AllLEDCallRedData = LED_OFF;
 80006f4:	4b3d      	ldr	r3, [pc, #244]	; (80007ec <main+0x5d0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
        	g_u8AllLEDRespRedData = LED_OFF;
 80006fa:	4b3d      	ldr	r3, [pc, #244]	; (80007f0 <main+0x5d4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
        }

        if (g_u8AllLinesUnicolor == RED_COLOR) {
 8000700:	4b37      	ldr	r3, [pc, #220]	; (80007e0 <main+0x5c4>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b02      	cmp	r3, #2
 8000706:	d10b      	bne.n	8000720 <main+0x504>

        	g_u8AllLEDCallGreenData = LED_OFF;
 8000708:	4b36      	ldr	r3, [pc, #216]	; (80007e4 <main+0x5c8>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
        	g_u8AllLEDRespGreenData = LED_OFF;
 800070e:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <main+0x5cc>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
        	g_u8AllLEDCallRedData = LED_ON;
 8000714:	4b35      	ldr	r3, [pc, #212]	; (80007ec <main+0x5d0>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
        	g_u8AllLEDRespRedData = LED_ON;
 800071a:	4b35      	ldr	r3, [pc, #212]	; (80007f0 <main+0x5d4>)
 800071c:	2201      	movs	r2, #1
 800071e:	701a      	strb	r2, [r3, #0]
        }

        if (g_u8AllLinesUnicolor == YELLOW_COLOR) {
 8000720:	4b2f      	ldr	r3, [pc, #188]	; (80007e0 <main+0x5c4>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b03      	cmp	r3, #3
 8000726:	d10b      	bne.n	8000740 <main+0x524>

        	/*так горит жёлтый, в зависимости от того, что OFF будет другой
         	 	 цвет - цикл?? условие7??? чтобы по порядку с прерыванием*/
        	g_u8AllLEDCallGreenData = LED_ON;
 8000728:	4b2e      	ldr	r3, [pc, #184]	; (80007e4 <main+0x5c8>)
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
        	g_u8AllLEDRespGreenData = LED_ON;
 800072e:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <main+0x5cc>)
 8000730:	2201      	movs	r2, #1
 8000732:	701a      	strb	r2, [r3, #0]
        	g_u8AllLEDCallRedData = LED_ON;
 8000734:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <main+0x5d0>)
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]
        	g_u8AllLEDRespRedData = LED_ON;
 800073a:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <main+0x5d4>)
 800073c:	2201      	movs	r2, #1
 800073e:	701a      	strb	r2, [r3, #0]
        }


        if (g_u8DisplayAllLinesUnicolor) {
 8000740:	4b2c      	ldr	r3, [pc, #176]	; (80007f4 <main+0x5d8>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d100      	bne.n	800074a <main+0x52e>
 8000748:	e5d0      	b.n	80002ec <main+0xd0>

        	HAL_GPIO_WritePin(LED_CALL_GREEN_SR_DATA_GPIO_Port,
 800074a:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <main+0x5c8>)
 800074c:	781a      	ldrb	r2, [r3, #0]
 800074e:	2390      	movs	r3, #144	; 0x90
 8000750:	05db      	lsls	r3, r3, #23
 8000752:	2120      	movs	r1, #32
 8000754:	0018      	movs	r0, r3
 8000756:	f000 fe4a 	bl	80013ee <HAL_GPIO_WritePin>
        			LED_CALL_GREEN_SR_DATA_Pin, g_u8AllLEDCallGreenData);
        	HAL_GPIO_WritePin(LED_RESP_GREEN_SR_DATA_GPIO_Port,
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <main+0x5cc>)
 800075c:	781a      	ldrb	r2, [r3, #0]
 800075e:	2390      	movs	r3, #144	; 0x90
 8000760:	05db      	lsls	r3, r3, #23
 8000762:	2108      	movs	r1, #8
 8000764:	0018      	movs	r0, r3
 8000766:	f000 fe42 	bl	80013ee <HAL_GPIO_WritePin>
        			LED_RESP_GREEN_SR_DATA_Pin, g_u8AllLEDRespGreenData);
        	HAL_GPIO_WritePin(LED_CALL_RED_SR_DATA_GPIO_Port,
 800076a:	4b20      	ldr	r3, [pc, #128]	; (80007ec <main+0x5d0>)
 800076c:	781a      	ldrb	r2, [r3, #0]
 800076e:	2390      	movs	r3, #144	; 0x90
 8000770:	05db      	lsls	r3, r3, #23
 8000772:	2110      	movs	r1, #16
 8000774:	0018      	movs	r0, r3
 8000776:	f000 fe3a 	bl	80013ee <HAL_GPIO_WritePin>
        			LED_CALL_RED_SR_DATA_Pin, g_u8AllLEDCallRedData);
        	HAL_GPIO_WritePin(LED_RESP_RED_SR_DATA_GPIO_Port,
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <main+0x5d4>)
 800077c:	781a      	ldrb	r2, [r3, #0]
 800077e:	2390      	movs	r3, #144	; 0x90
 8000780:	05db      	lsls	r3, r3, #23
 8000782:	2104      	movs	r1, #4
 8000784:	0018      	movs	r0, r3
 8000786:	f000 fe32 	bl	80013ee <HAL_GPIO_WritePin>
        			LED_RESP_RED_SR_DATA_Pin, g_u8AllLEDRespRedData);
        	for (uint8_t n = 0; n < NUMBER_OF_LINES; n++) {
 800078a:	1dbb      	adds	r3, r7, #6
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
 8000790:	e045      	b.n	800081e <main+0x602>
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	200000f8 	.word	0x200000f8
 8000798:	200000f9 	.word	0x200000f9
 800079c:	200000fc 	.word	0x200000fc
 80007a0:	48000400 	.word	0x48000400
 80007a4:	200000e6 	.word	0x200000e6
 80007a8:	20000000 	.word	0x20000000
 80007ac:	200000e5 	.word	0x200000e5
 80007b0:	200000e4 	.word	0x200000e4
 80007b4:	20000004 	.word	0x20000004
 80007b8:	200000dc 	.word	0x200000dc
 80007bc:	200000de 	.word	0x200000de
 80007c0:	2000000c 	.word	0x2000000c
 80007c4:	200000dd 	.word	0x200000dd
 80007c8:	200000df 	.word	0x200000df
 80007cc:	20000014 	.word	0x20000014
 80007d0:	2000001c 	.word	0x2000001c
 80007d4:	200000e8 	.word	0x200000e8
 80007d8:	200000e9 	.word	0x200000e9
 80007dc:	20000002 	.word	0x20000002
 80007e0:	20000001 	.word	0x20000001
 80007e4:	200000e0 	.word	0x200000e0
 80007e8:	200000e1 	.word	0x200000e1
 80007ec:	200000e2 	.word	0x200000e2
 80007f0:	200000e3 	.word	0x200000e3
 80007f4:	200000e7 	.word	0x200000e7
        		HAL_GPIO_WritePin(STP_SR_LED_CLK_GPIO_Port, STP_SR_LED_CLK_Pin,
 80007f8:	2390      	movs	r3, #144	; 0x90
 80007fa:	05db      	lsls	r3, r3, #23
 80007fc:	2201      	movs	r2, #1
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	0018      	movs	r0, r3
 8000802:	f000 fdf4 	bl	80013ee <HAL_GPIO_WritePin>
        				GPIO_PIN_SET);
        		HAL_GPIO_WritePin(STP_SR_LED_CLK_GPIO_Port, STP_SR_LED_CLK_Pin,
 8000806:	2390      	movs	r3, #144	; 0x90
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	2200      	movs	r2, #0
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	0018      	movs	r0, r3
 8000810:	f000 fded 	bl	80013ee <HAL_GPIO_WritePin>
        	for (uint8_t n = 0; n < NUMBER_OF_LINES; n++) {
 8000814:	1dbb      	adds	r3, r7, #6
 8000816:	781a      	ldrb	r2, [r3, #0]
 8000818:	1dbb      	adds	r3, r7, #6
 800081a:	3201      	adds	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	1dbb      	adds	r3, r7, #6
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b07      	cmp	r3, #7
 8000824:	d9e8      	bls.n	80007f8 <main+0x5dc>
        				GPIO_PIN_RESET);
        	}
        	g_u8DisplayAllLinesUnicolor = 0;
 8000826:	4b02      	ldr	r3, [pc, #8]	; (8000830 <main+0x614>)
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
        if (g_u8NeedToRingLine) {
 800082c:	e55e      	b.n	80002ec <main+0xd0>
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	200000e7 	.word	0x200000e7

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b093      	sub	sp, #76	; 0x4c
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	2414      	movs	r4, #20
 800083c:	193b      	adds	r3, r7, r4
 800083e:	0018      	movs	r0, r3
 8000840:	2334      	movs	r3, #52	; 0x34
 8000842:	001a      	movs	r2, r3
 8000844:	2100      	movs	r1, #0
 8000846:	f001 ff15 	bl	8002674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	0018      	movs	r0, r3
 800084e:	2310      	movs	r3, #16
 8000850:	001a      	movs	r2, r3
 8000852:	2100      	movs	r1, #0
 8000854:	f001 ff0e 	bl	8002674 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000858:	0021      	movs	r1, r4
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2202      	movs	r2, #2
 800085e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2201      	movs	r2, #1
 8000864:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2210      	movs	r2, #16
 800086a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2202      	movs	r2, #2
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2280      	movs	r2, #128	; 0x80
 8000876:	0212      	lsls	r2, r2, #8
 8000878:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2280      	movs	r2, #128	; 0x80
 800087e:	0312      	lsls	r2, r2, #12
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000888:	187b      	adds	r3, r7, r1
 800088a:	0018      	movs	r0, r3
 800088c:	f000 fdcc 	bl	8001428 <HAL_RCC_OscConfig>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000894:	f000 f9e4 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2207      	movs	r2, #7
 800089c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2202      	movs	r2, #2
 80008a2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2101      	movs	r1, #1
 80008b4:	0018      	movs	r0, r3
 80008b6:	f001 f93d 	bl	8001b34 <HAL_RCC_ClockConfig>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008be:	f000 f9cf 	bl	8000c60 <Error_Handler>
  }
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b013      	add	sp, #76	; 0x4c
 80008c8:	bd90      	pop	{r4, r7, pc}
	...

080008cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	2308      	movs	r3, #8
 80008d4:	18fb      	adds	r3, r7, r3
 80008d6:	0018      	movs	r0, r3
 80008d8:	2310      	movs	r3, #16
 80008da:	001a      	movs	r2, r3
 80008dc:	2100      	movs	r1, #0
 80008de:	f001 fec9 	bl	8002674 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e2:	003b      	movs	r3, r7
 80008e4:	0018      	movs	r0, r3
 80008e6:	2308      	movs	r3, #8
 80008e8:	001a      	movs	r2, r3
 80008ea:	2100      	movs	r1, #0
 80008ec:	f001 fec2 	bl	8002674 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008f0:	4b1e      	ldr	r3, [pc, #120]	; (800096c <MX_TIM3_Init+0xa0>)
 80008f2:	4a1f      	ldr	r2, [pc, #124]	; (8000970 <MX_TIM3_Init+0xa4>)
 80008f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_TIM3_Init+0xa0>)
 80008f8:	4a1e      	ldr	r2, [pc, #120]	; (8000974 <MX_TIM3_Init+0xa8>)
 80008fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_TIM3_Init+0xa0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64999;
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_TIM3_Init+0xa0>)
 8000904:	4a1c      	ldr	r2, [pc, #112]	; (8000978 <MX_TIM3_Init+0xac>)
 8000906:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000908:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_TIM3_Init+0xa0>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_TIM3_Init+0xa0>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_TIM3_Init+0xa0>)
 8000916:	0018      	movs	r0, r3
 8000918:	f001 fa78 	bl	8001e0c <HAL_TIM_Base_Init>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000920:	f000 f99e 	bl	8000c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000924:	2108      	movs	r1, #8
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	0152      	lsls	r2, r2, #5
 800092c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800092e:	187a      	adds	r2, r7, r1
 8000930:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_TIM3_Init+0xa0>)
 8000932:	0011      	movs	r1, r2
 8000934:	0018      	movs	r0, r3
 8000936:	f001 fc21 	bl	800217c <HAL_TIM_ConfigClockSource>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800093e:	f000 f98f 	bl	8000c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000942:	003b      	movs	r3, r7
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000948:	003b      	movs	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800094e:	003a      	movs	r2, r7
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_TIM3_Init+0xa0>)
 8000952:	0011      	movs	r1, r2
 8000954:	0018      	movs	r0, r3
 8000956:	f001 fe1f 	bl	8002598 <HAL_TIMEx_MasterConfigSynchronization>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800095e:	f000 f97f 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b006      	add	sp, #24
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	2000004c 	.word	0x2000004c
 8000970:	40000400 	.word	0x40000400
 8000974:	00003e7f 	.word	0x00003e7f
 8000978:	0000fde7 	.word	0x0000fde7

0800097c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000982:	003b      	movs	r3, r7
 8000984:	0018      	movs	r0, r3
 8000986:	2308      	movs	r3, #8
 8000988:	001a      	movs	r2, r3
 800098a:	2100      	movs	r1, #0
 800098c:	f001 fe72 	bl	8002674 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_TIM6_Init+0x6c>)
 8000992:	4a16      	ldr	r2, [pc, #88]	; (80009ec <MX_TIM6_Init+0x70>)
 8000994:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1600;
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_TIM6_Init+0x6c>)
 8000998:	22c8      	movs	r2, #200	; 0xc8
 800099a:	00d2      	lsls	r2, r2, #3
 800099c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_TIM6_Init+0x6c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80009a4:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_TIM6_Init+0x6c>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <MX_TIM6_Init+0x74>)
 80009a8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_TIM6_Init+0x6c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <MX_TIM6_Init+0x6c>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f001 fa2a 	bl	8001e0c <HAL_TIM_Base_Init>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 80009bc:	f000 f950 	bl	8000c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c0:	003b      	movs	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c6:	003b      	movs	r3, r7
 80009c8:	2200      	movs	r2, #0
 80009ca:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009cc:	003a      	movs	r2, r7
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_TIM6_Init+0x6c>)
 80009d0:	0011      	movs	r1, r2
 80009d2:	0018      	movs	r0, r3
 80009d4:	f001 fde0 	bl	8002598 <HAL_TIMEx_MasterConfigSynchronization>
 80009d8:	1e03      	subs	r3, r0, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 80009dc:	f000 f940 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b002      	add	sp, #8
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000094 	.word	0x20000094
 80009ec:	40001000 	.word	0x40001000
 80009f0:	0000ffff 	.word	0x0000ffff

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b590      	push	{r4, r7, lr}
 80009f6:	b089      	sub	sp, #36	; 0x24
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	240c      	movs	r4, #12
 80009fc:	193b      	adds	r3, r7, r4
 80009fe:	0018      	movs	r0, r3
 8000a00:	2314      	movs	r3, #20
 8000a02:	001a      	movs	r2, r3
 8000a04:	2100      	movs	r1, #0
 8000a06:	f001 fe35 	bl	8002674 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b3c      	ldr	r3, [pc, #240]	; (8000afc <MX_GPIO_Init+0x108>)
 8000a0c:	695a      	ldr	r2, [r3, #20]
 8000a0e:	4b3b      	ldr	r3, [pc, #236]	; (8000afc <MX_GPIO_Init+0x108>)
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	0289      	lsls	r1, r1, #10
 8000a14:	430a      	orrs	r2, r1
 8000a16:	615a      	str	r2, [r3, #20]
 8000a18:	4b38      	ldr	r3, [pc, #224]	; (8000afc <MX_GPIO_Init+0x108>)
 8000a1a:	695a      	ldr	r2, [r3, #20]
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	029b      	lsls	r3, r3, #10
 8000a20:	4013      	ands	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	4b35      	ldr	r3, [pc, #212]	; (8000afc <MX_GPIO_Init+0x108>)
 8000a28:	695a      	ldr	r2, [r3, #20]
 8000a2a:	4b34      	ldr	r3, [pc, #208]	; (8000afc <MX_GPIO_Init+0x108>)
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	02c9      	lsls	r1, r1, #11
 8000a30:	430a      	orrs	r2, r1
 8000a32:	615a      	str	r2, [r3, #20]
 8000a34:	4b31      	ldr	r3, [pc, #196]	; (8000afc <MX_GPIO_Init+0x108>)
 8000a36:	695a      	ldr	r2, [r3, #20]
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	02db      	lsls	r3, r3, #11
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RESP_RED_SR_DATA_Pin|LED_RESP_GREEN_SR_DATA_Pin|LED_CALL_RED_SR_DATA_Pin|LED_CALL_GREEN_SR_DATA_Pin
 8000a42:	492f      	ldr	r1, [pc, #188]	; (8000b00 <MX_GPIO_Init+0x10c>)
 8000a44:	2390      	movs	r3, #144	; 0x90
 8000a46:	05db      	lsls	r3, r3, #23
 8000a48:	2200      	movs	r2, #0
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 fccf 	bl	80013ee <HAL_GPIO_WritePin>
                          |STP_SR_LED_nCLR_Pin|STP_SR_LED_CLK_Pin|LINE_RESPONSE_SR_SHnLD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LINE_RESPONSE_SR_CLK_Pin|LINE_CALL_SR_nCLR_Pin|LINE_CALL_SR_CLK_Pin|LINE_CALL_SR_DATA_Pin, GPIO_PIN_RESET);
 8000a50:	4b2c      	ldr	r3, [pc, #176]	; (8000b04 <MX_GPIO_Init+0x110>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	21e8      	movs	r1, #232	; 0xe8
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 fcc9 	bl	80013ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RESP_RED_SR_DATA_Pin LED_RESP_GREEN_SR_DATA_Pin LED_CALL_RED_SR_DATA_Pin LED_CALL_GREEN_SR_DATA_Pin
                           STP_SR_LED_nCLR_Pin STP_SR_LED_CLK_Pin */
  GPIO_InitStruct.Pin = LED_RESP_RED_SR_DATA_Pin|LED_RESP_GREEN_SR_DATA_Pin|LED_CALL_RED_SR_DATA_Pin|LED_CALL_GREEN_SR_DATA_Pin
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	22fc      	movs	r2, #252	; 0xfc
 8000a60:	601a      	str	r2, [r3, #0]
                          |STP_SR_LED_nCLR_Pin|STP_SR_LED_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	2201      	movs	r2, #1
 8000a66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2201      	movs	r2, #1
 8000a72:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	193a      	adds	r2, r7, r4
 8000a76:	2390      	movs	r3, #144	; 0x90
 8000a78:	05db      	lsls	r3, r3, #23
 8000a7a:	0011      	movs	r1, r2
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f000 fb21 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LINE_RESPONSE_SR_SHnLD_Pin */
  GPIO_InitStruct.Pin = LINE_RESPONSE_SR_SHnLD_Pin;
 8000a82:	0021      	movs	r1, r4
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	0212      	lsls	r2, r2, #8
 8000a8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	000c      	movs	r4, r1
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	2201      	movs	r2, #1
 8000a92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LINE_RESPONSE_SR_SHnLD_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	193a      	adds	r2, r7, r4
 8000aa2:	2390      	movs	r3, #144	; 0x90
 8000aa4:	05db      	lsls	r3, r3, #23
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f000 fb0b 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LINE_RESPONSE_SR_CLK_Pin LINE_CALL_SR_nCLR_Pin LINE_CALL_SR_CLK_Pin LINE_CALL_SR_DATA_Pin */
  GPIO_InitStruct.Pin = LINE_RESPONSE_SR_CLK_Pin|LINE_CALL_SR_nCLR_Pin|LINE_CALL_SR_CLK_Pin|LINE_CALL_SR_DATA_Pin;
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	22e8      	movs	r2, #232	; 0xe8
 8000ab2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <MX_GPIO_Init+0x110>)
 8000aca:	0019      	movs	r1, r3
 8000acc:	0010      	movs	r0, r2
 8000ace:	f000 faf9 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LINE_RESPONSE_SR_DATA_Pin */
  GPIO_InitStruct.Pin = LINE_RESPONSE_SR_DATA_Pin;
 8000ad2:	0021      	movs	r1, r4
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2210      	movs	r2, #16
 8000ad8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2200      	movs	r2, #0
 8000ade:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LINE_RESPONSE_SR_DATA_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	4a06      	ldr	r2, [pc, #24]	; (8000b04 <MX_GPIO_Init+0x110>)
 8000aea:	0019      	movs	r1, r3
 8000aec:	0010      	movs	r0, r2
 8000aee:	f000 fae9 	bl	80010c4 <HAL_GPIO_Init>

}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b009      	add	sp, #36	; 0x24
 8000af8:	bd90      	pop	{r4, r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	40021000 	.word	0x40021000
 8000b00:	000080fc 	.word	0x000080fc
 8000b04:	48000400 	.word	0x48000400

08000b08 <ClearLEDSR>:

/* USER CODE BEGIN 4 */

void ClearLEDSR(void) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(STP_SR_LED_nCLR_GPIO_Port, STP_SR_LED_nCLR_Pin,
 8000b0c:	2390      	movs	r3, #144	; 0x90
 8000b0e:	05db      	lsls	r3, r3, #23
 8000b10:	2200      	movs	r2, #0
 8000b12:	2140      	movs	r1, #64	; 0x40
 8000b14:	0018      	movs	r0, r3
 8000b16:	f000 fc6a 	bl	80013ee <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(STP_SR_LED_nCLR_GPIO_Port, STP_SR_LED_nCLR_Pin,
 8000b1a:	2390      	movs	r3, #144	; 0x90
 8000b1c:	05db      	lsls	r3, r3, #23
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2140      	movs	r1, #64	; 0x40
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 fc63 	bl	80013ee <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <LoadLEDSR>:

void LoadLEDSR(void) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < NUMBER_OF_LINES; i++) {
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	e056      	b.n	8000bec <LoadLEDSR+0xbc>
        HAL_GPIO_WritePin(LED_CALL_GREEN_SR_DATA_GPIO_Port,
        		LED_CALL_GREEN_SR_DATA_Pin, (g_u8LEDCallGreenData & SR_DATA_bm));
 8000b3e:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <LoadLEDSR+0xd0>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2201      	movs	r2, #1
 8000b44:	4013      	ands	r3, r2
 8000b46:	b2da      	uxtb	r2, r3
        HAL_GPIO_WritePin(LED_CALL_GREEN_SR_DATA_GPIO_Port,
 8000b48:	2390      	movs	r3, #144	; 0x90
 8000b4a:	05db      	lsls	r3, r3, #23
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f000 fc4d 	bl	80013ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RESP_GREEN_SR_DATA_GPIO_Port,
				LED_RESP_GREEN_SR_DATA_Pin, (g_u8LEDRespGreenData & SR_DATA_bm));
 8000b54:	4b2b      	ldr	r3, [pc, #172]	; (8000c04 <LoadLEDSR+0xd4>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2201      	movs	r2, #1
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	b2da      	uxtb	r2, r3
		HAL_GPIO_WritePin(LED_RESP_GREEN_SR_DATA_GPIO_Port,
 8000b5e:	2390      	movs	r3, #144	; 0x90
 8000b60:	05db      	lsls	r3, r3, #23
 8000b62:	2108      	movs	r1, #8
 8000b64:	0018      	movs	r0, r3
 8000b66:	f000 fc42 	bl	80013ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_CALL_RED_SR_DATA_GPIO_Port,
				LED_CALL_RED_SR_DATA_Pin, (g_u8LEDCallRedData & SR_DATA_bm));
 8000b6a:	4b27      	ldr	r3, [pc, #156]	; (8000c08 <LoadLEDSR+0xd8>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4013      	ands	r3, r2
 8000b72:	b2da      	uxtb	r2, r3
		HAL_GPIO_WritePin(LED_CALL_RED_SR_DATA_GPIO_Port,
 8000b74:	2390      	movs	r3, #144	; 0x90
 8000b76:	05db      	lsls	r3, r3, #23
 8000b78:	2110      	movs	r1, #16
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 fc37 	bl	80013ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RESP_RED_SR_DATA_GPIO_Port,
				LED_RESP_RED_SR_DATA_Pin, (g_u8LEDRespRedData & SR_DATA_bm));
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <LoadLEDSR+0xdc>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2201      	movs	r2, #1
 8000b86:	4013      	ands	r3, r2
 8000b88:	b2da      	uxtb	r2, r3
		HAL_GPIO_WritePin(LED_RESP_RED_SR_DATA_GPIO_Port,
 8000b8a:	2390      	movs	r3, #144	; 0x90
 8000b8c:	05db      	lsls	r3, r3, #23
 8000b8e:	2104      	movs	r1, #4
 8000b90:	0018      	movs	r0, r3
 8000b92:	f000 fc2c 	bl	80013ee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(STP_SR_LED_CLK_GPIO_Port, STP_SR_LED_CLK_Pin,
 8000b96:	2390      	movs	r3, #144	; 0x90
 8000b98:	05db      	lsls	r3, r3, #23
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f000 fc25 	bl	80013ee <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		HAL_GPIO_WritePin(STP_SR_LED_CLK_GPIO_Port, STP_SR_LED_CLK_Pin,
 8000ba4:	2390      	movs	r3, #144	; 0x90
 8000ba6:	05db      	lsls	r3, r3, #23
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2180      	movs	r1, #128	; 0x80
 8000bac:	0018      	movs	r0, r3
 8000bae:	f000 fc1e 	bl	80013ee <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);

		g_u8LEDCallGreenData = g_u8LEDCallGreenData >> 1;
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <LoadLEDSR+0xd0>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	085b      	lsrs	r3, r3, #1
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <LoadLEDSR+0xd0>)
 8000bbc:	701a      	strb	r2, [r3, #0]
		g_u8LEDRespGreenData = g_u8LEDRespGreenData >> 1;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <LoadLEDSR+0xd4>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	085b      	lsrs	r3, r3, #1
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <LoadLEDSR+0xd4>)
 8000bc8:	701a      	strb	r2, [r3, #0]
		g_u8LEDCallRedData = g_u8LEDCallRedData >> 1;
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <LoadLEDSR+0xd8>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	085b      	lsrs	r3, r3, #1
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <LoadLEDSR+0xd8>)
 8000bd4:	701a      	strb	r2, [r3, #0]
		g_u8LEDRespRedData = g_u8LEDRespRedData >> 1;
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <LoadLEDSR+0xdc>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	085b      	lsrs	r3, r3, #1
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <LoadLEDSR+0xdc>)
 8000be0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_LINES; i++) {
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	781a      	ldrb	r2, [r3, #0]
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	3201      	adds	r2, #1
 8000bea:	701a      	strb	r2, [r3, #0]
 8000bec:	1dfb      	adds	r3, r7, #7
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b07      	cmp	r3, #7
 8000bf2:	d9a4      	bls.n	8000b3e <LoadLEDSR+0xe>
	}
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	200000dc 	.word	0x200000dc
 8000c04:	200000dd 	.word	0x200000dd
 8000c08:	200000de 	.word	0x200000de
 8000c0c:	200000df 	.word	0x200000df

08000c10 <ClearCallSR>:

void ClearCallSR(void) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LINE_CALL_SR_nCLR_GPIO_Port, LINE_CALL_SR_nCLR_Pin,
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <ClearCallSR+0x24>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	2120      	movs	r1, #32
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f000 fbe7 	bl	80013ee <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LINE_CALL_SR_nCLR_GPIO_Port, LINE_CALL_SR_nCLR_Pin,
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <ClearCallSR+0x24>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	2120      	movs	r1, #32
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 fbe1 	bl	80013ee <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	48000400 	.word	0x48000400

08000c38 <HAL_TIM_PeriodElapsedCallback>:
//	if (ActiveRowColor == NUMBER_OF_COLORS){
//		ActiveRowColor = 0;
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

	if (htim == &htim3)
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d102      	bne.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		g_u8NeedToDisplayLEDData = 1;
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
	{
		/**/


	}
}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b002      	add	sp, #8
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	2000004c 	.word	0x2000004c
 8000c5c:	20000002 	.word	0x20000002

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <Error_Handler+0x8>
	...

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c74:	699a      	ldr	r2, [r3, #24]
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c78:	2101      	movs	r1, #1
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	619a      	str	r2, [r3, #24]
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	2201      	movs	r2, #1
 8000c84:	4013      	ands	r3, r2
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c8c:	69da      	ldr	r2, [r3, #28]
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	0549      	lsls	r1, r1, #21
 8000c94:	430a      	orrs	r2, r1
 8000c96:	61da      	str	r2, [r3, #28]
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c9a:	69da      	ldr	r2, [r3, #28]
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	055b      	lsls	r3, r3, #21
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b002      	add	sp, #8
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a1a      	ldr	r2, [pc, #104]	; (8000d2c <HAL_TIM_Base_MspInit+0x78>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d114      	bne.n	8000cf0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <HAL_TIM_Base_MspInit+0x7c>)
 8000cc8:	69da      	ldr	r2, [r3, #28]
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <HAL_TIM_Base_MspInit+0x7c>)
 8000ccc:	2102      	movs	r1, #2
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	61da      	str	r2, [r3, #28]
 8000cd2:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <HAL_TIM_Base_MspInit+0x7c>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2010      	movs	r0, #16
 8000ce4:	f000 f9bc 	bl	8001060 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ce8:	2010      	movs	r0, #16
 8000cea:	f000 f9ce 	bl	800108a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000cee:	e018      	b.n	8000d22 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <HAL_TIM_Base_MspInit+0x80>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d113      	bne.n	8000d22 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <HAL_TIM_Base_MspInit+0x7c>)
 8000cfc:	69da      	ldr	r2, [r3, #28]
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_TIM_Base_MspInit+0x7c>)
 8000d00:	2110      	movs	r1, #16
 8000d02:	430a      	orrs	r2, r1
 8000d04:	61da      	str	r2, [r3, #28]
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_TIM_Base_MspInit+0x7c>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	2210      	movs	r2, #16
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	2011      	movs	r0, #17
 8000d18:	f000 f9a2 	bl	8001060 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d1c:	2011      	movs	r0, #17
 8000d1e:	f000 f9b4 	bl	800108a <HAL_NVIC_EnableIRQ>
}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b004      	add	sp, #16
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	40000400 	.word	0x40000400
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40001000 	.word	0x40001000

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5c:	f000 f894 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <TIM3_IRQHandler+0x14>)
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f001 f8ee 	bl	8001f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	2000004c 	.word	0x2000004c

08000d80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <TIM6_DAC_IRQHandler+0x14>)
 8000d86:	0018      	movs	r0, r3
 8000d88:	f001 f8e2 	bl	8001f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	20000094 	.word	0x20000094

08000d98 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000da6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000da8:	f7ff fff6 	bl	8000d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dae:	490d      	ldr	r1, [pc, #52]	; (8000de4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <LoopForever+0xe>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc4:	4c0a      	ldr	r4, [pc, #40]	; (8000df0 <LoopForever+0x16>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dd2:	f001 fc57 	bl	8002684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dd6:	f7ff fa21 	bl	800021c <main>

08000dda <LoopForever>:

LoopForever:
    b LoopForever
 8000dda:	e7fe      	b.n	8000dda <LoopForever>
  ldr   r0, =_estack
 8000ddc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000de8:	08002724 	.word	0x08002724
  ldr r2, =_sbss
 8000dec:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000df0:	20000140 	.word	0x20000140

08000df4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC1_COMP_IRQHandler>
	...

08000df8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <HAL_Init+0x24>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_Init+0x24>)
 8000e02:	2110      	movs	r1, #16
 8000e04:	430a      	orrs	r2, r1
 8000e06:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f000 f809 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e0e:	f7ff ff2d 	bl	8000c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	40022000 	.word	0x40022000

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <HAL_InitTick+0x5c>)
 8000e2a:	681c      	ldr	r4, [r3, #0]
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_InitTick+0x60>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	0019      	movs	r1, r3
 8000e32:	23fa      	movs	r3, #250	; 0xfa
 8000e34:	0098      	lsls	r0, r3, #2
 8000e36:	f7ff f965 	bl	8000104 <__udivsi3>
 8000e3a:	0003      	movs	r3, r0
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	0020      	movs	r0, r4
 8000e40:	f7ff f960 	bl	8000104 <__udivsi3>
 8000e44:	0003      	movs	r3, r0
 8000e46:	0018      	movs	r0, r3
 8000e48:	f000 f92f 	bl	80010aa <HAL_SYSTICK_Config>
 8000e4c:	1e03      	subs	r3, r0, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e00f      	b.n	8000e74 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	d80b      	bhi.n	8000e72 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	425b      	negs	r3, r3
 8000e60:	2200      	movs	r2, #0
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 f8fc 	bl	8001060 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_InitTick+0x64>)
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e000      	b.n	8000e74 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b003      	add	sp, #12
 8000e7a:	bd90      	pop	{r4, r7, pc}
 8000e7c:	20000024 	.word	0x20000024
 8000e80:	2000002c 	.word	0x2000002c
 8000e84:	20000028 	.word	0x20000028

08000e88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_IncTick+0x1c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	001a      	movs	r2, r3
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	18d2      	adds	r2, r2, r3
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e9a:	601a      	str	r2, [r3, #0]
}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	2000002c 	.word	0x2000002c
 8000ea8:	2000013c 	.word	0x2000013c

08000eac <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b02      	ldr	r3, [pc, #8]	; (8000ebc <HAL_GetTick+0x10>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	2000013c 	.word	0x2000013c

08000ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff fff0 	bl	8000eac <HAL_GetTick>
 8000ecc:	0003      	movs	r3, r0
 8000ece:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	d005      	beq.n	8000ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_Delay+0x44>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	001a      	movs	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	189b      	adds	r3, r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	f7ff ffe0 	bl	8000eac <HAL_GetTick>
 8000eec:	0002      	movs	r2, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d8f7      	bhi.n	8000ee8 <HAL_Delay+0x28>
  {
  }
}
 8000ef8:	46c0      	nop			; (mov r8, r8)
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b004      	add	sp, #16
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	2000002c 	.word	0x2000002c

08000f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	0002      	movs	r2, r0
 8000f10:	1dfb      	adds	r3, r7, #7
 8000f12:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	1dfb      	adds	r3, r7, #7
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b7f      	cmp	r3, #127	; 0x7f
 8000f1a:	d809      	bhi.n	8000f30 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1c:	1dfb      	adds	r3, r7, #7
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	001a      	movs	r2, r3
 8000f22:	231f      	movs	r3, #31
 8000f24:	401a      	ands	r2, r3
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <__NVIC_EnableIRQ+0x30>)
 8000f28:	2101      	movs	r1, #1
 8000f2a:	4091      	lsls	r1, r2
 8000f2c:	000a      	movs	r2, r1
 8000f2e:	601a      	str	r2, [r3, #0]
  }
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b002      	add	sp, #8
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	e000e100 	.word	0xe000e100

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	0002      	movs	r2, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f50:	d828      	bhi.n	8000fa4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f52:	4a2f      	ldr	r2, [pc, #188]	; (8001010 <__NVIC_SetPriority+0xd4>)
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	089b      	lsrs	r3, r3, #2
 8000f5c:	33c0      	adds	r3, #192	; 0xc0
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	589b      	ldr	r3, [r3, r2]
 8000f62:	1dfa      	adds	r2, r7, #7
 8000f64:	7812      	ldrb	r2, [r2, #0]
 8000f66:	0011      	movs	r1, r2
 8000f68:	2203      	movs	r2, #3
 8000f6a:	400a      	ands	r2, r1
 8000f6c:	00d2      	lsls	r2, r2, #3
 8000f6e:	21ff      	movs	r1, #255	; 0xff
 8000f70:	4091      	lsls	r1, r2
 8000f72:	000a      	movs	r2, r1
 8000f74:	43d2      	mvns	r2, r2
 8000f76:	401a      	ands	r2, r3
 8000f78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	019b      	lsls	r3, r3, #6
 8000f7e:	22ff      	movs	r2, #255	; 0xff
 8000f80:	401a      	ands	r2, r3
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	0018      	movs	r0, r3
 8000f88:	2303      	movs	r3, #3
 8000f8a:	4003      	ands	r3, r0
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f90:	481f      	ldr	r0, [pc, #124]	; (8001010 <__NVIC_SetPriority+0xd4>)
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	33c0      	adds	r3, #192	; 0xc0
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fa2:	e031      	b.n	8001008 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <__NVIC_SetPriority+0xd8>)
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	0019      	movs	r1, r3
 8000fac:	230f      	movs	r3, #15
 8000fae:	400b      	ands	r3, r1
 8000fb0:	3b08      	subs	r3, #8
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3306      	adds	r3, #6
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	18d3      	adds	r3, r2, r3
 8000fba:	3304      	adds	r3, #4
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	1dfa      	adds	r2, r7, #7
 8000fc0:	7812      	ldrb	r2, [r2, #0]
 8000fc2:	0011      	movs	r1, r2
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	400a      	ands	r2, r1
 8000fc8:	00d2      	lsls	r2, r2, #3
 8000fca:	21ff      	movs	r1, #255	; 0xff
 8000fcc:	4091      	lsls	r1, r2
 8000fce:	000a      	movs	r2, r1
 8000fd0:	43d2      	mvns	r2, r2
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	019b      	lsls	r3, r3, #6
 8000fda:	22ff      	movs	r2, #255	; 0xff
 8000fdc:	401a      	ands	r2, r3
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	4003      	ands	r3, r0
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fec:	4809      	ldr	r0, [pc, #36]	; (8001014 <__NVIC_SetPriority+0xd8>)
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	001c      	movs	r4, r3
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	4023      	ands	r3, r4
 8000ff8:	3b08      	subs	r3, #8
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	3306      	adds	r3, #6
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	18c3      	adds	r3, r0, r3
 8001004:	3304      	adds	r3, #4
 8001006:	601a      	str	r2, [r3, #0]
}
 8001008:	46c0      	nop			; (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	b003      	add	sp, #12
 800100e:	bd90      	pop	{r4, r7, pc}
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	1e5a      	subs	r2, r3, #1
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	045b      	lsls	r3, r3, #17
 8001028:	429a      	cmp	r2, r3
 800102a:	d301      	bcc.n	8001030 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102c:	2301      	movs	r3, #1
 800102e:	e010      	b.n	8001052 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <SysTick_Config+0x44>)
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	3a01      	subs	r2, #1
 8001036:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001038:	2301      	movs	r3, #1
 800103a:	425b      	negs	r3, r3
 800103c:	2103      	movs	r1, #3
 800103e:	0018      	movs	r0, r3
 8001040:	f7ff ff7c 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <SysTick_Config+0x44>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <SysTick_Config+0x44>)
 800104c:	2207      	movs	r2, #7
 800104e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001050:	2300      	movs	r3, #0
}
 8001052:	0018      	movs	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	b002      	add	sp, #8
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	e000e010 	.word	0xe000e010

08001060 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	210f      	movs	r1, #15
 800106c:	187b      	adds	r3, r7, r1
 800106e:	1c02      	adds	r2, r0, #0
 8001070:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	187b      	adds	r3, r7, r1
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b25b      	sxtb	r3, r3
 800107a:	0011      	movs	r1, r2
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff ff5d 	bl	8000f3c <__NVIC_SetPriority>
}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b004      	add	sp, #16
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	0002      	movs	r2, r0
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b25b      	sxtb	r3, r3
 800109c:	0018      	movs	r0, r3
 800109e:	f7ff ff33 	bl	8000f08 <__NVIC_EnableIRQ>
}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b002      	add	sp, #8
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	0018      	movs	r0, r3
 80010b6:	f7ff ffaf 	bl	8001018 <SysTick_Config>
 80010ba:	0003      	movs	r3, r0
}
 80010bc:	0018      	movs	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	b002      	add	sp, #8
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d2:	e155      	b.n	8001380 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2101      	movs	r1, #1
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	4091      	lsls	r1, r2
 80010de:	000a      	movs	r2, r1
 80010e0:	4013      	ands	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d100      	bne.n	80010ec <HAL_GPIO_Init+0x28>
 80010ea:	e146      	b.n	800137a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2203      	movs	r2, #3
 80010f2:	4013      	ands	r3, r2
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d005      	beq.n	8001104 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2203      	movs	r2, #3
 80010fe:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001100:	2b02      	cmp	r3, #2
 8001102:	d130      	bne.n	8001166 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	409a      	lsls	r2, r3
 8001112:	0013      	movs	r3, r2
 8001114:	43da      	mvns	r2, r3
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68da      	ldr	r2, [r3, #12]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	409a      	lsls	r2, r3
 8001126:	0013      	movs	r3, r2
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800113a:	2201      	movs	r2, #1
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	409a      	lsls	r2, r3
 8001140:	0013      	movs	r3, r2
 8001142:	43da      	mvns	r2, r3
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	091b      	lsrs	r3, r3, #4
 8001150:	2201      	movs	r2, #1
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
 8001158:	0013      	movs	r3, r2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2203      	movs	r2, #3
 800116c:	4013      	ands	r3, r2
 800116e:	2b03      	cmp	r3, #3
 8001170:	d017      	beq.n	80011a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	409a      	lsls	r2, r3
 8001180:	0013      	movs	r3, r2
 8001182:	43da      	mvns	r2, r3
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2203      	movs	r2, #3
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d123      	bne.n	80011f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	08da      	lsrs	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3208      	adds	r2, #8
 80011b6:	0092      	lsls	r2, r2, #2
 80011b8:	58d3      	ldr	r3, [r2, r3]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	2207      	movs	r2, #7
 80011c0:	4013      	ands	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	220f      	movs	r2, #15
 80011c6:	409a      	lsls	r2, r3
 80011c8:	0013      	movs	r3, r2
 80011ca:	43da      	mvns	r2, r3
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	691a      	ldr	r2, [r3, #16]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	2107      	movs	r1, #7
 80011da:	400b      	ands	r3, r1
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	409a      	lsls	r2, r3
 80011e0:	0013      	movs	r3, r2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	08da      	lsrs	r2, r3, #3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3208      	adds	r2, #8
 80011f0:	0092      	lsls	r2, r2, #2
 80011f2:	6939      	ldr	r1, [r7, #16]
 80011f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	2203      	movs	r2, #3
 8001202:	409a      	lsls	r2, r3
 8001204:	0013      	movs	r3, r2
 8001206:	43da      	mvns	r2, r3
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2203      	movs	r2, #3
 8001214:	401a      	ands	r2, r3
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	409a      	lsls	r2, r3
 800121c:	0013      	movs	r3, r2
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	23c0      	movs	r3, #192	; 0xc0
 8001230:	029b      	lsls	r3, r3, #10
 8001232:	4013      	ands	r3, r2
 8001234:	d100      	bne.n	8001238 <HAL_GPIO_Init+0x174>
 8001236:	e0a0      	b.n	800137a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001238:	4b57      	ldr	r3, [pc, #348]	; (8001398 <HAL_GPIO_Init+0x2d4>)
 800123a:	699a      	ldr	r2, [r3, #24]
 800123c:	4b56      	ldr	r3, [pc, #344]	; (8001398 <HAL_GPIO_Init+0x2d4>)
 800123e:	2101      	movs	r1, #1
 8001240:	430a      	orrs	r2, r1
 8001242:	619a      	str	r2, [r3, #24]
 8001244:	4b54      	ldr	r3, [pc, #336]	; (8001398 <HAL_GPIO_Init+0x2d4>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	2201      	movs	r2, #1
 800124a:	4013      	ands	r3, r2
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001250:	4a52      	ldr	r2, [pc, #328]	; (800139c <HAL_GPIO_Init+0x2d8>)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	089b      	lsrs	r3, r3, #2
 8001256:	3302      	adds	r3, #2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	589b      	ldr	r3, [r3, r2]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	2203      	movs	r2, #3
 8001262:	4013      	ands	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	220f      	movs	r2, #15
 8001268:	409a      	lsls	r2, r3
 800126a:	0013      	movs	r3, r2
 800126c:	43da      	mvns	r2, r3
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	2390      	movs	r3, #144	; 0x90
 8001278:	05db      	lsls	r3, r3, #23
 800127a:	429a      	cmp	r2, r3
 800127c:	d019      	beq.n	80012b2 <HAL_GPIO_Init+0x1ee>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a47      	ldr	r2, [pc, #284]	; (80013a0 <HAL_GPIO_Init+0x2dc>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d013      	beq.n	80012ae <HAL_GPIO_Init+0x1ea>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a46      	ldr	r2, [pc, #280]	; (80013a4 <HAL_GPIO_Init+0x2e0>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00d      	beq.n	80012aa <HAL_GPIO_Init+0x1e6>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a45      	ldr	r2, [pc, #276]	; (80013a8 <HAL_GPIO_Init+0x2e4>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d007      	beq.n	80012a6 <HAL_GPIO_Init+0x1e2>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a44      	ldr	r2, [pc, #272]	; (80013ac <HAL_GPIO_Init+0x2e8>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d101      	bne.n	80012a2 <HAL_GPIO_Init+0x1de>
 800129e:	2304      	movs	r3, #4
 80012a0:	e008      	b.n	80012b4 <HAL_GPIO_Init+0x1f0>
 80012a2:	2305      	movs	r3, #5
 80012a4:	e006      	b.n	80012b4 <HAL_GPIO_Init+0x1f0>
 80012a6:	2303      	movs	r3, #3
 80012a8:	e004      	b.n	80012b4 <HAL_GPIO_Init+0x1f0>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e002      	b.n	80012b4 <HAL_GPIO_Init+0x1f0>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <HAL_GPIO_Init+0x1f0>
 80012b2:	2300      	movs	r3, #0
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	2103      	movs	r1, #3
 80012b8:	400a      	ands	r2, r1
 80012ba:	0092      	lsls	r2, r2, #2
 80012bc:	4093      	lsls	r3, r2
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012c4:	4935      	ldr	r1, [pc, #212]	; (800139c <HAL_GPIO_Init+0x2d8>)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	3302      	adds	r3, #2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d2:	4b37      	ldr	r3, [pc, #220]	; (80013b0 <HAL_GPIO_Init+0x2ec>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	43da      	mvns	r2, r3
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	035b      	lsls	r3, r3, #13
 80012ea:	4013      	ands	r3, r2
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012f6:	4b2e      	ldr	r3, [pc, #184]	; (80013b0 <HAL_GPIO_Init+0x2ec>)
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012fc:	4b2c      	ldr	r3, [pc, #176]	; (80013b0 <HAL_GPIO_Init+0x2ec>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	43da      	mvns	r2, r3
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	039b      	lsls	r3, r3, #14
 8001314:	4013      	ands	r3, r2
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001320:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <HAL_GPIO_Init+0x2ec>)
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001326:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <HAL_GPIO_Init+0x2ec>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	43da      	mvns	r2, r3
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	029b      	lsls	r3, r3, #10
 800133e:	4013      	ands	r3, r2
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800134a:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_GPIO_Init+0x2ec>)
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <HAL_GPIO_Init+0x2ec>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	43da      	mvns	r2, r3
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	025b      	lsls	r3, r3, #9
 8001368:	4013      	ands	r3, r2
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001374:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_GPIO_Init+0x2ec>)
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3301      	adds	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	40da      	lsrs	r2, r3
 8001388:	1e13      	subs	r3, r2, #0
 800138a:	d000      	beq.n	800138e <HAL_GPIO_Init+0x2ca>
 800138c:	e6a2      	b.n	80010d4 <HAL_GPIO_Init+0x10>
  } 
}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b006      	add	sp, #24
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021000 	.word	0x40021000
 800139c:	40010000 	.word	0x40010000
 80013a0:	48000400 	.word	0x48000400
 80013a4:	48000800 	.word	0x48000800
 80013a8:	48000c00 	.word	0x48000c00
 80013ac:	48001000 	.word	0x48001000
 80013b0:	40010400 	.word	0x40010400

080013b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	000a      	movs	r2, r1
 80013be:	1cbb      	adds	r3, r7, #2
 80013c0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	1cba      	adds	r2, r7, #2
 80013c8:	8812      	ldrh	r2, [r2, #0]
 80013ca:	4013      	ands	r3, r2
 80013cc:	d004      	beq.n	80013d8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80013ce:	230f      	movs	r3, #15
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	e003      	b.n	80013e0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013d8:	230f      	movs	r3, #15
 80013da:	18fb      	adds	r3, r7, r3
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80013e0:	230f      	movs	r3, #15
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	781b      	ldrb	r3, [r3, #0]
  }
 80013e6:	0018      	movs	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b004      	add	sp, #16
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	0008      	movs	r0, r1
 80013f8:	0011      	movs	r1, r2
 80013fa:	1cbb      	adds	r3, r7, #2
 80013fc:	1c02      	adds	r2, r0, #0
 80013fe:	801a      	strh	r2, [r3, #0]
 8001400:	1c7b      	adds	r3, r7, #1
 8001402:	1c0a      	adds	r2, r1, #0
 8001404:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001406:	1c7b      	adds	r3, r7, #1
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d004      	beq.n	8001418 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800140e:	1cbb      	adds	r3, r7, #2
 8001410:	881a      	ldrh	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001416:	e003      	b.n	8001420 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001418:	1cbb      	adds	r3, r7, #2
 800141a:	881a      	ldrh	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	46bd      	mov	sp, r7
 8001424:	b002      	add	sp, #8
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	f000 fb76 	bl	8001b28 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2201      	movs	r2, #1
 8001442:	4013      	ands	r3, r2
 8001444:	d100      	bne.n	8001448 <HAL_RCC_OscConfig+0x20>
 8001446:	e08e      	b.n	8001566 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001448:	4bc5      	ldr	r3, [pc, #788]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	220c      	movs	r2, #12
 800144e:	4013      	ands	r3, r2
 8001450:	2b04      	cmp	r3, #4
 8001452:	d00e      	beq.n	8001472 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001454:	4bc2      	ldr	r3, [pc, #776]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	220c      	movs	r2, #12
 800145a:	4013      	ands	r3, r2
 800145c:	2b08      	cmp	r3, #8
 800145e:	d117      	bne.n	8001490 <HAL_RCC_OscConfig+0x68>
 8001460:	4bbf      	ldr	r3, [pc, #764]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	23c0      	movs	r3, #192	; 0xc0
 8001466:	025b      	lsls	r3, r3, #9
 8001468:	401a      	ands	r2, r3
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	025b      	lsls	r3, r3, #9
 800146e:	429a      	cmp	r2, r3
 8001470:	d10e      	bne.n	8001490 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001472:	4bbb      	ldr	r3, [pc, #748]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	029b      	lsls	r3, r3, #10
 800147a:	4013      	ands	r3, r2
 800147c:	d100      	bne.n	8001480 <HAL_RCC_OscConfig+0x58>
 800147e:	e071      	b.n	8001564 <HAL_RCC_OscConfig+0x13c>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d000      	beq.n	800148a <HAL_RCC_OscConfig+0x62>
 8001488:	e06c      	b.n	8001564 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	f000 fb4c 	bl	8001b28 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d107      	bne.n	80014a8 <HAL_RCC_OscConfig+0x80>
 8001498:	4bb1      	ldr	r3, [pc, #708]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4bb0      	ldr	r3, [pc, #704]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	0249      	lsls	r1, r1, #9
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	e02f      	b.n	8001508 <HAL_RCC_OscConfig+0xe0>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10c      	bne.n	80014ca <HAL_RCC_OscConfig+0xa2>
 80014b0:	4bab      	ldr	r3, [pc, #684]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4baa      	ldr	r3, [pc, #680]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014b6:	49ab      	ldr	r1, [pc, #684]	; (8001764 <HAL_RCC_OscConfig+0x33c>)
 80014b8:	400a      	ands	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	4ba8      	ldr	r3, [pc, #672]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4ba7      	ldr	r3, [pc, #668]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014c2:	49a9      	ldr	r1, [pc, #676]	; (8001768 <HAL_RCC_OscConfig+0x340>)
 80014c4:	400a      	ands	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	e01e      	b.n	8001508 <HAL_RCC_OscConfig+0xe0>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	d10e      	bne.n	80014f0 <HAL_RCC_OscConfig+0xc8>
 80014d2:	4ba3      	ldr	r3, [pc, #652]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4ba2      	ldr	r3, [pc, #648]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014d8:	2180      	movs	r1, #128	; 0x80
 80014da:	02c9      	lsls	r1, r1, #11
 80014dc:	430a      	orrs	r2, r1
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	4b9f      	ldr	r3, [pc, #636]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b9e      	ldr	r3, [pc, #632]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014e6:	2180      	movs	r1, #128	; 0x80
 80014e8:	0249      	lsls	r1, r1, #9
 80014ea:	430a      	orrs	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	e00b      	b.n	8001508 <HAL_RCC_OscConfig+0xe0>
 80014f0:	4b9b      	ldr	r3, [pc, #620]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b9a      	ldr	r3, [pc, #616]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014f6:	499b      	ldr	r1, [pc, #620]	; (8001764 <HAL_RCC_OscConfig+0x33c>)
 80014f8:	400a      	ands	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	4b98      	ldr	r3, [pc, #608]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b97      	ldr	r3, [pc, #604]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001502:	4999      	ldr	r1, [pc, #612]	; (8001768 <HAL_RCC_OscConfig+0x340>)
 8001504:	400a      	ands	r2, r1
 8001506:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d014      	beq.n	800153a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fccc 	bl	8000eac <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800151a:	f7ff fcc7 	bl	8000eac <HAL_GetTick>
 800151e:	0002      	movs	r2, r0
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b64      	cmp	r3, #100	; 0x64
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e2fd      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152c:	4b8c      	ldr	r3, [pc, #560]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	029b      	lsls	r3, r3, #10
 8001534:	4013      	ands	r3, r2
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0xf2>
 8001538:	e015      	b.n	8001566 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153a:	f7ff fcb7 	bl	8000eac <HAL_GetTick>
 800153e:	0003      	movs	r3, r0
 8001540:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fcb2 	bl	8000eac <HAL_GetTick>
 8001548:	0002      	movs	r2, r0
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e2e8      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	4b82      	ldr	r3, [pc, #520]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	029b      	lsls	r3, r3, #10
 800155e:	4013      	ands	r3, r2
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x11c>
 8001562:	e000      	b.n	8001566 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2202      	movs	r2, #2
 800156c:	4013      	ands	r3, r2
 800156e:	d100      	bne.n	8001572 <HAL_RCC_OscConfig+0x14a>
 8001570:	e06c      	b.n	800164c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001572:	4b7b      	ldr	r3, [pc, #492]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	220c      	movs	r2, #12
 8001578:	4013      	ands	r3, r2
 800157a:	d00e      	beq.n	800159a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800157c:	4b78      	ldr	r3, [pc, #480]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	220c      	movs	r2, #12
 8001582:	4013      	ands	r3, r2
 8001584:	2b08      	cmp	r3, #8
 8001586:	d11f      	bne.n	80015c8 <HAL_RCC_OscConfig+0x1a0>
 8001588:	4b75      	ldr	r3, [pc, #468]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	23c0      	movs	r3, #192	; 0xc0
 800158e:	025b      	lsls	r3, r3, #9
 8001590:	401a      	ands	r2, r3
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	429a      	cmp	r2, r3
 8001598:	d116      	bne.n	80015c8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	4b71      	ldr	r3, [pc, #452]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2202      	movs	r2, #2
 80015a0:	4013      	ands	r3, r2
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_OscConfig+0x188>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d001      	beq.n	80015b0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e2bb      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b0:	4b6b      	ldr	r3, [pc, #428]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	22f8      	movs	r2, #248	; 0xf8
 80015b6:	4393      	bics	r3, r2
 80015b8:	0019      	movs	r1, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	00da      	lsls	r2, r3, #3
 80015c0:	4b67      	ldr	r3, [pc, #412]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80015c2:	430a      	orrs	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c6:	e041      	b.n	800164c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d024      	beq.n	800161a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d0:	4b63      	ldr	r3, [pc, #396]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b62      	ldr	r3, [pc, #392]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80015d6:	2101      	movs	r1, #1
 80015d8:	430a      	orrs	r2, r1
 80015da:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fc66 	bl	8000eac <HAL_GetTick>
 80015e0:	0003      	movs	r3, r0
 80015e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff fc61 	bl	8000eac <HAL_GetTick>
 80015ea:	0002      	movs	r2, r0
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e297      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f8:	4b59      	ldr	r3, [pc, #356]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2202      	movs	r2, #2
 80015fe:	4013      	ands	r3, r2
 8001600:	d0f1      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001602:	4b57      	ldr	r3, [pc, #348]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	22f8      	movs	r2, #248	; 0xf8
 8001608:	4393      	bics	r3, r2
 800160a:	0019      	movs	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	00da      	lsls	r2, r3, #3
 8001612:	4b53      	ldr	r3, [pc, #332]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001614:	430a      	orrs	r2, r1
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	e018      	b.n	800164c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800161a:	4b51      	ldr	r3, [pc, #324]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4b50      	ldr	r3, [pc, #320]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001620:	2101      	movs	r1, #1
 8001622:	438a      	bics	r2, r1
 8001624:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff fc41 	bl	8000eac <HAL_GetTick>
 800162a:	0003      	movs	r3, r0
 800162c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001630:	f7ff fc3c 	bl	8000eac <HAL_GetTick>
 8001634:	0002      	movs	r2, r0
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e272      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	4b47      	ldr	r3, [pc, #284]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2202      	movs	r2, #2
 8001648:	4013      	ands	r3, r2
 800164a:	d1f1      	bne.n	8001630 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2208      	movs	r2, #8
 8001652:	4013      	ands	r3, r2
 8001654:	d036      	beq.n	80016c4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d019      	beq.n	8001692 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800165e:	4b40      	ldr	r3, [pc, #256]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001662:	4b3f      	ldr	r3, [pc, #252]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001664:	2101      	movs	r1, #1
 8001666:	430a      	orrs	r2, r1
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166a:	f7ff fc1f 	bl	8000eac <HAL_GetTick>
 800166e:	0003      	movs	r3, r0
 8001670:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001674:	f7ff fc1a 	bl	8000eac <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e250      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001686:	4b36      	ldr	r3, [pc, #216]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	2202      	movs	r2, #2
 800168c:	4013      	ands	r3, r2
 800168e:	d0f1      	beq.n	8001674 <HAL_RCC_OscConfig+0x24c>
 8001690:	e018      	b.n	80016c4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001692:	4b33      	ldr	r3, [pc, #204]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001696:	4b32      	ldr	r3, [pc, #200]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001698:	2101      	movs	r1, #1
 800169a:	438a      	bics	r2, r1
 800169c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169e:	f7ff fc05 	bl	8000eac <HAL_GetTick>
 80016a2:	0003      	movs	r3, r0
 80016a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a8:	f7ff fc00 	bl	8000eac <HAL_GetTick>
 80016ac:	0002      	movs	r2, r0
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e236      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ba:	4b29      	ldr	r3, [pc, #164]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	2202      	movs	r2, #2
 80016c0:	4013      	ands	r3, r2
 80016c2:	d1f1      	bne.n	80016a8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2204      	movs	r2, #4
 80016ca:	4013      	ands	r3, r2
 80016cc:	d100      	bne.n	80016d0 <HAL_RCC_OscConfig+0x2a8>
 80016ce:	e0b5      	b.n	800183c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d0:	201f      	movs	r0, #31
 80016d2:	183b      	adds	r3, r7, r0
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80016da:	69da      	ldr	r2, [r3, #28]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	055b      	lsls	r3, r3, #21
 80016e0:	4013      	ands	r3, r2
 80016e2:	d110      	bne.n	8001706 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80016e6:	69da      	ldr	r2, [r3, #28]
 80016e8:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	0549      	lsls	r1, r1, #21
 80016ee:	430a      	orrs	r2, r1
 80016f0:	61da      	str	r2, [r3, #28]
 80016f2:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80016f4:	69da      	ldr	r2, [r3, #28]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	055b      	lsls	r3, r3, #21
 80016fa:	4013      	ands	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001700:	183b      	adds	r3, r7, r0
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_RCC_OscConfig+0x344>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4013      	ands	r3, r2
 8001710:	d11a      	bne.n	8001748 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <HAL_RCC_OscConfig+0x344>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_RCC_OscConfig+0x344>)
 8001718:	2180      	movs	r1, #128	; 0x80
 800171a:	0049      	lsls	r1, r1, #1
 800171c:	430a      	orrs	r2, r1
 800171e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001720:	f7ff fbc4 	bl	8000eac <HAL_GetTick>
 8001724:	0003      	movs	r3, r0
 8001726:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172a:	f7ff fbbf 	bl	8000eac <HAL_GetTick>
 800172e:	0002      	movs	r2, r0
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b64      	cmp	r3, #100	; 0x64
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e1f5      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_RCC_OscConfig+0x344>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4013      	ands	r3, r2
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d10f      	bne.n	8001770 <HAL_RCC_OscConfig+0x348>
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001752:	6a1a      	ldr	r2, [r3, #32]
 8001754:	4b02      	ldr	r3, [pc, #8]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001756:	2101      	movs	r1, #1
 8001758:	430a      	orrs	r2, r1
 800175a:	621a      	str	r2, [r3, #32]
 800175c:	e036      	b.n	80017cc <HAL_RCC_OscConfig+0x3a4>
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	40021000 	.word	0x40021000
 8001764:	fffeffff 	.word	0xfffeffff
 8001768:	fffbffff 	.word	0xfffbffff
 800176c:	40007000 	.word	0x40007000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10c      	bne.n	8001792 <HAL_RCC_OscConfig+0x36a>
 8001778:	4bca      	ldr	r3, [pc, #808]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800177a:	6a1a      	ldr	r2, [r3, #32]
 800177c:	4bc9      	ldr	r3, [pc, #804]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800177e:	2101      	movs	r1, #1
 8001780:	438a      	bics	r2, r1
 8001782:	621a      	str	r2, [r3, #32]
 8001784:	4bc7      	ldr	r3, [pc, #796]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001786:	6a1a      	ldr	r2, [r3, #32]
 8001788:	4bc6      	ldr	r3, [pc, #792]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800178a:	2104      	movs	r1, #4
 800178c:	438a      	bics	r2, r1
 800178e:	621a      	str	r2, [r3, #32]
 8001790:	e01c      	b.n	80017cc <HAL_RCC_OscConfig+0x3a4>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b05      	cmp	r3, #5
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x38c>
 800179a:	4bc2      	ldr	r3, [pc, #776]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800179c:	6a1a      	ldr	r2, [r3, #32]
 800179e:	4bc1      	ldr	r3, [pc, #772]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80017a0:	2104      	movs	r1, #4
 80017a2:	430a      	orrs	r2, r1
 80017a4:	621a      	str	r2, [r3, #32]
 80017a6:	4bbf      	ldr	r3, [pc, #764]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80017a8:	6a1a      	ldr	r2, [r3, #32]
 80017aa:	4bbe      	ldr	r3, [pc, #760]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80017ac:	2101      	movs	r1, #1
 80017ae:	430a      	orrs	r2, r1
 80017b0:	621a      	str	r2, [r3, #32]
 80017b2:	e00b      	b.n	80017cc <HAL_RCC_OscConfig+0x3a4>
 80017b4:	4bbb      	ldr	r3, [pc, #748]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80017b6:	6a1a      	ldr	r2, [r3, #32]
 80017b8:	4bba      	ldr	r3, [pc, #744]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80017ba:	2101      	movs	r1, #1
 80017bc:	438a      	bics	r2, r1
 80017be:	621a      	str	r2, [r3, #32]
 80017c0:	4bb8      	ldr	r3, [pc, #736]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80017c2:	6a1a      	ldr	r2, [r3, #32]
 80017c4:	4bb7      	ldr	r3, [pc, #732]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80017c6:	2104      	movs	r1, #4
 80017c8:	438a      	bics	r2, r1
 80017ca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d014      	beq.n	80017fe <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d4:	f7ff fb6a 	bl	8000eac <HAL_GetTick>
 80017d8:	0003      	movs	r3, r0
 80017da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017dc:	e009      	b.n	80017f2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017de:	f7ff fb65 	bl	8000eac <HAL_GetTick>
 80017e2:	0002      	movs	r2, r0
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	4aaf      	ldr	r2, [pc, #700]	; (8001aa8 <HAL_RCC_OscConfig+0x680>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e19a      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f2:	4bac      	ldr	r3, [pc, #688]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	2202      	movs	r2, #2
 80017f8:	4013      	ands	r3, r2
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x3b6>
 80017fc:	e013      	b.n	8001826 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fe:	f7ff fb55 	bl	8000eac <HAL_GetTick>
 8001802:	0003      	movs	r3, r0
 8001804:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001806:	e009      	b.n	800181c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001808:	f7ff fb50 	bl	8000eac <HAL_GetTick>
 800180c:	0002      	movs	r2, r0
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	4aa5      	ldr	r2, [pc, #660]	; (8001aa8 <HAL_RCC_OscConfig+0x680>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e185      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181c:	4ba1      	ldr	r3, [pc, #644]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	2202      	movs	r2, #2
 8001822:	4013      	ands	r3, r2
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001826:	231f      	movs	r3, #31
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d105      	bne.n	800183c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001830:	4b9c      	ldr	r3, [pc, #624]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001832:	69da      	ldr	r2, [r3, #28]
 8001834:	4b9b      	ldr	r3, [pc, #620]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001836:	499d      	ldr	r1, [pc, #628]	; (8001aac <HAL_RCC_OscConfig+0x684>)
 8001838:	400a      	ands	r2, r1
 800183a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2210      	movs	r2, #16
 8001842:	4013      	ands	r3, r2
 8001844:	d063      	beq.n	800190e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d12a      	bne.n	80018a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800184e:	4b95      	ldr	r3, [pc, #596]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001852:	4b94      	ldr	r3, [pc, #592]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001854:	2104      	movs	r1, #4
 8001856:	430a      	orrs	r2, r1
 8001858:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800185a:	4b92      	ldr	r3, [pc, #584]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800185c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800185e:	4b91      	ldr	r3, [pc, #580]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001860:	2101      	movs	r1, #1
 8001862:	430a      	orrs	r2, r1
 8001864:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001866:	f7ff fb21 	bl	8000eac <HAL_GetTick>
 800186a:	0003      	movs	r3, r0
 800186c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001870:	f7ff fb1c 	bl	8000eac <HAL_GetTick>
 8001874:	0002      	movs	r2, r0
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e152      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001882:	4b88      	ldr	r3, [pc, #544]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001886:	2202      	movs	r2, #2
 8001888:	4013      	ands	r3, r2
 800188a:	d0f1      	beq.n	8001870 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800188c:	4b85      	ldr	r3, [pc, #532]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800188e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001890:	22f8      	movs	r2, #248	; 0xf8
 8001892:	4393      	bics	r3, r2
 8001894:	0019      	movs	r1, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	00da      	lsls	r2, r3, #3
 800189c:	4b81      	ldr	r3, [pc, #516]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800189e:	430a      	orrs	r2, r1
 80018a0:	635a      	str	r2, [r3, #52]	; 0x34
 80018a2:	e034      	b.n	800190e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	3305      	adds	r3, #5
 80018aa:	d111      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018ac:	4b7d      	ldr	r3, [pc, #500]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80018ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b0:	4b7c      	ldr	r3, [pc, #496]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80018b2:	2104      	movs	r1, #4
 80018b4:	438a      	bics	r2, r1
 80018b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018b8:	4b7a      	ldr	r3, [pc, #488]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80018ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018bc:	22f8      	movs	r2, #248	; 0xf8
 80018be:	4393      	bics	r3, r2
 80018c0:	0019      	movs	r1, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	00da      	lsls	r2, r3, #3
 80018c8:	4b76      	ldr	r3, [pc, #472]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80018ca:	430a      	orrs	r2, r1
 80018cc:	635a      	str	r2, [r3, #52]	; 0x34
 80018ce:	e01e      	b.n	800190e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018d0:	4b74      	ldr	r3, [pc, #464]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80018d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018d4:	4b73      	ldr	r3, [pc, #460]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80018d6:	2104      	movs	r1, #4
 80018d8:	430a      	orrs	r2, r1
 80018da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80018dc:	4b71      	ldr	r3, [pc, #452]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80018de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e0:	4b70      	ldr	r3, [pc, #448]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80018e2:	2101      	movs	r1, #1
 80018e4:	438a      	bics	r2, r1
 80018e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e8:	f7ff fae0 	bl	8000eac <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018f2:	f7ff fadb 	bl	8000eac <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e111      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001904:	4b67      	ldr	r3, [pc, #412]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001908:	2202      	movs	r2, #2
 800190a:	4013      	ands	r3, r2
 800190c:	d1f1      	bne.n	80018f2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2220      	movs	r2, #32
 8001914:	4013      	ands	r3, r2
 8001916:	d05c      	beq.n	80019d2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001918:	4b62      	ldr	r3, [pc, #392]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	220c      	movs	r2, #12
 800191e:	4013      	ands	r3, r2
 8001920:	2b0c      	cmp	r3, #12
 8001922:	d00e      	beq.n	8001942 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001924:	4b5f      	ldr	r3, [pc, #380]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	220c      	movs	r2, #12
 800192a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800192c:	2b08      	cmp	r3, #8
 800192e:	d114      	bne.n	800195a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001930:	4b5c      	ldr	r3, [pc, #368]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	23c0      	movs	r3, #192	; 0xc0
 8001936:	025b      	lsls	r3, r3, #9
 8001938:	401a      	ands	r2, r3
 800193a:	23c0      	movs	r3, #192	; 0xc0
 800193c:	025b      	lsls	r3, r3, #9
 800193e:	429a      	cmp	r2, r3
 8001940:	d10b      	bne.n	800195a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001942:	4b58      	ldr	r3, [pc, #352]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	029b      	lsls	r3, r3, #10
 800194a:	4013      	ands	r3, r2
 800194c:	d040      	beq.n	80019d0 <HAL_RCC_OscConfig+0x5a8>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d03c      	beq.n	80019d0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e0e6      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d01b      	beq.n	800199a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001962:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001966:	4b4f      	ldr	r3, [pc, #316]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001968:	2180      	movs	r1, #128	; 0x80
 800196a:	0249      	lsls	r1, r1, #9
 800196c:	430a      	orrs	r2, r1
 800196e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff fa9c 	bl	8000eac <HAL_GetTick>
 8001974:	0003      	movs	r3, r0
 8001976:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800197a:	f7ff fa97 	bl	8000eac <HAL_GetTick>
 800197e:	0002      	movs	r2, r0
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e0cd      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800198c:	4b45      	ldr	r3, [pc, #276]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800198e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	029b      	lsls	r3, r3, #10
 8001994:	4013      	ands	r3, r2
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0x552>
 8001998:	e01b      	b.n	80019d2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800199a:	4b42      	ldr	r3, [pc, #264]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800199c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800199e:	4b41      	ldr	r3, [pc, #260]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80019a0:	4943      	ldr	r1, [pc, #268]	; (8001ab0 <HAL_RCC_OscConfig+0x688>)
 80019a2:	400a      	ands	r2, r1
 80019a4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a6:	f7ff fa81 	bl	8000eac <HAL_GetTick>
 80019aa:	0003      	movs	r3, r0
 80019ac:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019b0:	f7ff fa7c 	bl	8000eac <HAL_GetTick>
 80019b4:	0002      	movs	r2, r0
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e0b2      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019c2:	4b38      	ldr	r3, [pc, #224]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80019c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c6:	2380      	movs	r3, #128	; 0x80
 80019c8:	029b      	lsls	r3, r3, #10
 80019ca:	4013      	ands	r3, r2
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x588>
 80019ce:	e000      	b.n	80019d2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80019d0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d100      	bne.n	80019dc <HAL_RCC_OscConfig+0x5b4>
 80019da:	e0a4      	b.n	8001b26 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019dc:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	220c      	movs	r2, #12
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d100      	bne.n	80019ea <HAL_RCC_OscConfig+0x5c2>
 80019e8:	e078      	b.n	8001adc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d14c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f2:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80019f8:	492e      	ldr	r1, [pc, #184]	; (8001ab4 <HAL_RCC_OscConfig+0x68c>)
 80019fa:	400a      	ands	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff fa55 	bl	8000eac <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a08:	f7ff fa50 	bl	8000eac <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e086      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a1a:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	049b      	lsls	r3, r3, #18
 8001a22:	4013      	ands	r3, r2
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a26:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	220f      	movs	r2, #15
 8001a2c:	4393      	bics	r3, r2
 8001a2e:	0019      	movs	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001a36:	430a      	orrs	r2, r1
 8001a38:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4a1e      	ldr	r2, [pc, #120]	; (8001ab8 <HAL_RCC_OscConfig+0x690>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	0019      	movs	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001a50:	430a      	orrs	r2, r1
 8001a52:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001a5a:	2180      	movs	r1, #128	; 0x80
 8001a5c:	0449      	lsls	r1, r1, #17
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a62:	f7ff fa23 	bl	8000eac <HAL_GetTick>
 8001a66:	0003      	movs	r3, r0
 8001a68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6c:	f7ff fa1e 	bl	8000eac <HAL_GetTick>
 8001a70:	0002      	movs	r2, r0
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e054      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	049b      	lsls	r3, r3, #18
 8001a86:	4013      	ands	r3, r2
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0x644>
 8001a8a:	e04c      	b.n	8001b26 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001a92:	4908      	ldr	r1, [pc, #32]	; (8001ab4 <HAL_RCC_OscConfig+0x68c>)
 8001a94:	400a      	ands	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff fa08 	bl	8000eac <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa0:	e015      	b.n	8001ace <HAL_RCC_OscConfig+0x6a6>
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	00001388 	.word	0x00001388
 8001aac:	efffffff 	.word	0xefffffff
 8001ab0:	fffeffff 	.word	0xfffeffff
 8001ab4:	feffffff 	.word	0xfeffffff
 8001ab8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001abc:	f7ff f9f6 	bl	8000eac <HAL_GetTick>
 8001ac0:	0002      	movs	r2, r0
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e02c      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_RCC_OscConfig+0x708>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	049b      	lsls	r3, r3, #18
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x694>
 8001ada:	e024      	b.n	8001b26 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e01f      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_RCC_OscConfig+0x708>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_RCC_OscConfig+0x708>)
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	23c0      	movs	r3, #192	; 0xc0
 8001af8:	025b      	lsls	r3, r3, #9
 8001afa:	401a      	ands	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d10e      	bne.n	8001b22 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	220f      	movs	r2, #15
 8001b08:	401a      	ands	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	23f0      	movs	r3, #240	; 0xf0
 8001b16:	039b      	lsls	r3, r3, #14
 8001b18:	401a      	ands	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d001      	beq.n	8001b26 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	0018      	movs	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b008      	add	sp, #32
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021000 	.word	0x40021000

08001b34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0bf      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b48:	4b61      	ldr	r3, [pc, #388]	; (8001cd0 <HAL_RCC_ClockConfig+0x19c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4013      	ands	r3, r2
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d911      	bls.n	8001b7a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b5e      	ldr	r3, [pc, #376]	; (8001cd0 <HAL_RCC_ClockConfig+0x19c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4393      	bics	r3, r2
 8001b5e:	0019      	movs	r1, r3
 8001b60:	4b5b      	ldr	r3, [pc, #364]	; (8001cd0 <HAL_RCC_ClockConfig+0x19c>)
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b68:	4b59      	ldr	r3, [pc, #356]	; (8001cd0 <HAL_RCC_ClockConfig+0x19c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4013      	ands	r3, r2
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e0a6      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d015      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2204      	movs	r2, #4
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d006      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b8e:	4b51      	ldr	r3, [pc, #324]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001b94:	21e0      	movs	r1, #224	; 0xe0
 8001b96:	00c9      	lsls	r1, r1, #3
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b9c:	4b4d      	ldr	r3, [pc, #308]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	22f0      	movs	r2, #240	; 0xf0
 8001ba2:	4393      	bics	r3, r2
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	4b4a      	ldr	r3, [pc, #296]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001bac:	430a      	orrs	r2, r1
 8001bae:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d04c      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	4b44      	ldr	r3, [pc, #272]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	029b      	lsls	r3, r3, #10
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d120      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e07a      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d107      	bne.n	8001bea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bda:	4b3e      	ldr	r3, [pc, #248]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	049b      	lsls	r3, r3, #18
 8001be2:	4013      	ands	r3, r2
 8001be4:	d114      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e06e      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001bf2:	4b38      	ldr	r3, [pc, #224]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	029b      	lsls	r3, r3, #10
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d108      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e062      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c02:	4b34      	ldr	r3, [pc, #208]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2202      	movs	r2, #2
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e05b      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c10:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2203      	movs	r2, #3
 8001c16:	4393      	bics	r3, r2
 8001c18:	0019      	movs	r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c20:	430a      	orrs	r2, r1
 8001c22:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c24:	f7ff f942 	bl	8000eac <HAL_GetTick>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2c:	e009      	b.n	8001c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2e:	f7ff f93d 	bl	8000eac <HAL_GetTick>
 8001c32:	0002      	movs	r2, r0
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	4a27      	ldr	r2, [pc, #156]	; (8001cd8 <HAL_RCC_ClockConfig+0x1a4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e042      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	220c      	movs	r2, #12
 8001c48:	401a      	ands	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d1ec      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c54:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <HAL_RCC_ClockConfig+0x19c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d211      	bcs.n	8001c86 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <HAL_RCC_ClockConfig+0x19c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2201      	movs	r2, #1
 8001c68:	4393      	bics	r3, r2
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <HAL_RCC_ClockConfig+0x19c>)
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c74:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <HAL_RCC_ClockConfig+0x19c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d001      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e020      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d009      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c90:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4a11      	ldr	r2, [pc, #68]	; (8001cdc <HAL_RCC_ClockConfig+0x1a8>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ca4:	f000 f820 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001ca8:	0001      	movs	r1, r0
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <HAL_RCC_ClockConfig+0x1ac>)
 8001cb6:	5cd3      	ldrb	r3, [r2, r3]
 8001cb8:	000a      	movs	r2, r1
 8001cba:	40da      	lsrs	r2, r3
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cc0:	2003      	movs	r0, #3
 8001cc2:	f7ff f8ad 	bl	8000e20 <HAL_InitTick>
  
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	0018      	movs	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b004      	add	sp, #16
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40022000 	.word	0x40022000
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	00001388 	.word	0x00001388
 8001cdc:	fffff8ff 	.word	0xfffff8ff
 8001ce0:	080026e4 	.word	0x080026e4
 8001ce4:	20000024 	.word	0x20000024

08001ce8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001d02:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b0c      	cmp	r3, #12
 8001d10:	d046      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0xb8>
 8001d12:	d848      	bhi.n	8001da6 <HAL_RCC_GetSysClockFreq+0xbe>
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d002      	beq.n	8001d1e <HAL_RCC_GetSysClockFreq+0x36>
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d003      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x3c>
 8001d1c:	e043      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d1e:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <HAL_RCC_GetSysClockFreq+0xd4>)
 8001d20:	613b      	str	r3, [r7, #16]
      break;
 8001d22:	e043      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	0c9b      	lsrs	r3, r3, #18
 8001d28:	220f      	movs	r2, #15
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	4a24      	ldr	r2, [pc, #144]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001d2e:	5cd3      	ldrb	r3, [r2, r3]
 8001d30:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d32:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d36:	220f      	movs	r2, #15
 8001d38:	4013      	ands	r3, r2
 8001d3a:	4a22      	ldr	r2, [pc, #136]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	23c0      	movs	r3, #192	; 0xc0
 8001d44:	025b      	lsls	r3, r3, #9
 8001d46:	401a      	ands	r2, r3
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	025b      	lsls	r3, r3, #9
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d109      	bne.n	8001d64 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	481a      	ldr	r0, [pc, #104]	; (8001dbc <HAL_RCC_GetSysClockFreq+0xd4>)
 8001d54:	f7fe f9d6 	bl	8000104 <__udivsi3>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	001a      	movs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4353      	muls	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	e01a      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	23c0      	movs	r3, #192	; 0xc0
 8001d68:	025b      	lsls	r3, r3, #9
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	23c0      	movs	r3, #192	; 0xc0
 8001d6e:	025b      	lsls	r3, r3, #9
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d109      	bne.n	8001d88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	4814      	ldr	r0, [pc, #80]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001d78:	f7fe f9c4 	bl	8000104 <__udivsi3>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	001a      	movs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4353      	muls	r3, r2
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	480c      	ldr	r0, [pc, #48]	; (8001dbc <HAL_RCC_GetSysClockFreq+0xd4>)
 8001d8c:	f7fe f9ba 	bl	8000104 <__udivsi3>
 8001d90:	0003      	movs	r3, r0
 8001d92:	001a      	movs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4353      	muls	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	613b      	str	r3, [r7, #16]
      break;
 8001d9e:	e005      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001da0:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001da2:	613b      	str	r3, [r7, #16]
      break;
 8001da4:	e002      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_RCC_GetSysClockFreq+0xd4>)
 8001da8:	613b      	str	r3, [r7, #16]
      break;
 8001daa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001dac:	693b      	ldr	r3, [r7, #16]
}
 8001dae:	0018      	movs	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b006      	add	sp, #24
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	007a1200 	.word	0x007a1200
 8001dc0:	080026fc 	.word	0x080026fc
 8001dc4:	0800270c 	.word	0x0800270c
 8001dc8:	02dc6c00 	.word	0x02dc6c00

08001dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd0:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <HAL_RCC_GetHCLKFreq+0x10>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	20000024 	.word	0x20000024

08001de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001de4:	f7ff fff2 	bl	8001dcc <HAL_RCC_GetHCLKFreq>
 8001de8:	0001      	movs	r1, r0
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	0a1b      	lsrs	r3, r3, #8
 8001df0:	2207      	movs	r2, #7
 8001df2:	4013      	ands	r3, r2
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001df6:	5cd3      	ldrb	r3, [r2, r3]
 8001df8:	40d9      	lsrs	r1, r3
 8001dfa:	000b      	movs	r3, r1
}    
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	40021000 	.word	0x40021000
 8001e08:	080026f4 	.word	0x080026f4

08001e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e042      	b.n	8001ea4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	223d      	movs	r2, #61	; 0x3d
 8001e22:	5c9b      	ldrb	r3, [r3, r2]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d107      	bne.n	8001e3a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	223c      	movs	r2, #60	; 0x3c
 8001e2e:	2100      	movs	r1, #0
 8001e30:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	0018      	movs	r0, r3
 8001e36:	f7fe ff3d 	bl	8000cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	223d      	movs	r2, #61	; 0x3d
 8001e3e:	2102      	movs	r1, #2
 8001e40:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	0010      	movs	r0, r2
 8001e4e:	f000 fa89 	bl	8002364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2246      	movs	r2, #70	; 0x46
 8001e56:	2101      	movs	r1, #1
 8001e58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	223e      	movs	r2, #62	; 0x3e
 8001e5e:	2101      	movs	r1, #1
 8001e60:	5499      	strb	r1, [r3, r2]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	223f      	movs	r2, #63	; 0x3f
 8001e66:	2101      	movs	r1, #1
 8001e68:	5499      	strb	r1, [r3, r2]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2240      	movs	r2, #64	; 0x40
 8001e6e:	2101      	movs	r1, #1
 8001e70:	5499      	strb	r1, [r3, r2]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2241      	movs	r2, #65	; 0x41
 8001e76:	2101      	movs	r1, #1
 8001e78:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2242      	movs	r2, #66	; 0x42
 8001e7e:	2101      	movs	r1, #1
 8001e80:	5499      	strb	r1, [r3, r2]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2243      	movs	r2, #67	; 0x43
 8001e86:	2101      	movs	r1, #1
 8001e88:	5499      	strb	r1, [r3, r2]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2244      	movs	r2, #68	; 0x44
 8001e8e:	2101      	movs	r1, #1
 8001e90:	5499      	strb	r1, [r3, r2]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2245      	movs	r2, #69	; 0x45
 8001e96:	2101      	movs	r1, #1
 8001e98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	223d      	movs	r2, #61	; 0x3d
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b002      	add	sp, #8
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	223d      	movs	r2, #61	; 0x3d
 8001eb8:	5c9b      	ldrb	r3, [r3, r2]
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d001      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e03b      	b.n	8001f3c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	223d      	movs	r2, #61	; 0x3d
 8001ec8:	2102      	movs	r1, #2
 8001eca:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a18      	ldr	r2, [pc, #96]	; (8001f44 <HAL_TIM_Base_Start_IT+0x98>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d00f      	beq.n	8001f06 <HAL_TIM_Base_Start_IT+0x5a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	05db      	lsls	r3, r3, #23
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d009      	beq.n	8001f06 <HAL_TIM_Base_Start_IT+0x5a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a14      	ldr	r2, [pc, #80]	; (8001f48 <HAL_TIM_Base_Start_IT+0x9c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d004      	beq.n	8001f06 <HAL_TIM_Base_Start_IT+0x5a>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <HAL_TIM_Base_Start_IT+0xa0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d111      	bne.n	8001f2a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2207      	movs	r2, #7
 8001f0e:	4013      	ands	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2b06      	cmp	r3, #6
 8001f16:	d010      	beq.n	8001f3a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2101      	movs	r1, #1
 8001f24:	430a      	orrs	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f28:	e007      	b.n	8001f3a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2101      	movs	r1, #1
 8001f36:	430a      	orrs	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b004      	add	sp, #16
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40012c00 	.word	0x40012c00
 8001f48:	40000400 	.word	0x40000400
 8001f4c:	40014000 	.word	0x40014000

08001f50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d124      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d11d      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2203      	movs	r2, #3
 8001f7a:	4252      	negs	r2, r2
 8001f7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d004      	beq.n	8001f9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	0018      	movs	r0, r3
 8001f94:	f000 f9ce 	bl	8002334 <HAL_TIM_IC_CaptureCallback>
 8001f98:	e007      	b.n	8001faa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f000 f9c1 	bl	8002324 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f000 f9cd 	bl	8002344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d125      	bne.n	800200a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d11e      	bne.n	800200a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2205      	movs	r2, #5
 8001fd2:	4252      	negs	r2, r2
 8001fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	23c0      	movs	r3, #192	; 0xc0
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d004      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	0018      	movs	r0, r3
 8001fee:	f000 f9a1 	bl	8002334 <HAL_TIM_IC_CaptureCallback>
 8001ff2:	e007      	b.n	8002004 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f000 f994 	bl	8002324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	0018      	movs	r0, r3
 8002000:	f000 f9a0 	bl	8002344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2208      	movs	r2, #8
 8002012:	4013      	ands	r3, r2
 8002014:	2b08      	cmp	r3, #8
 8002016:	d124      	bne.n	8002062 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	2208      	movs	r2, #8
 8002020:	4013      	ands	r3, r2
 8002022:	2b08      	cmp	r3, #8
 8002024:	d11d      	bne.n	8002062 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2209      	movs	r2, #9
 800202c:	4252      	negs	r2, r2
 800202e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2204      	movs	r2, #4
 8002034:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	2203      	movs	r2, #3
 800203e:	4013      	ands	r3, r2
 8002040:	d004      	beq.n	800204c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	0018      	movs	r0, r3
 8002046:	f000 f975 	bl	8002334 <HAL_TIM_IC_CaptureCallback>
 800204a:	e007      	b.n	800205c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	0018      	movs	r0, r3
 8002050:	f000 f968 	bl	8002324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	0018      	movs	r0, r3
 8002058:	f000 f974 	bl	8002344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	2210      	movs	r2, #16
 800206a:	4013      	ands	r3, r2
 800206c:	2b10      	cmp	r3, #16
 800206e:	d125      	bne.n	80020bc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2210      	movs	r2, #16
 8002078:	4013      	ands	r3, r2
 800207a:	2b10      	cmp	r3, #16
 800207c:	d11e      	bne.n	80020bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2211      	movs	r2, #17
 8002084:	4252      	negs	r2, r2
 8002086:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2208      	movs	r2, #8
 800208c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	69da      	ldr	r2, [r3, #28]
 8002094:	23c0      	movs	r3, #192	; 0xc0
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4013      	ands	r3, r2
 800209a:	d004      	beq.n	80020a6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	0018      	movs	r0, r3
 80020a0:	f000 f948 	bl	8002334 <HAL_TIM_IC_CaptureCallback>
 80020a4:	e007      	b.n	80020b6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	0018      	movs	r0, r3
 80020aa:	f000 f93b 	bl	8002324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f000 f947 	bl	8002344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	2201      	movs	r2, #1
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d10f      	bne.n	80020ea <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2201      	movs	r2, #1
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d108      	bne.n	80020ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2202      	movs	r2, #2
 80020de:	4252      	negs	r2, r2
 80020e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	0018      	movs	r0, r3
 80020e6:	f7fe fda7 	bl	8000c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	2280      	movs	r2, #128	; 0x80
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b80      	cmp	r3, #128	; 0x80
 80020f6:	d10f      	bne.n	8002118 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	2280      	movs	r2, #128	; 0x80
 8002100:	4013      	ands	r3, r2
 8002102:	2b80      	cmp	r3, #128	; 0x80
 8002104:	d108      	bne.n	8002118 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2281      	movs	r2, #129	; 0x81
 800210c:	4252      	negs	r2, r2
 800210e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	0018      	movs	r0, r3
 8002114:	f000 faa6 	bl	8002664 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	2240      	movs	r2, #64	; 0x40
 8002120:	4013      	ands	r3, r2
 8002122:	2b40      	cmp	r3, #64	; 0x40
 8002124:	d10f      	bne.n	8002146 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2240      	movs	r2, #64	; 0x40
 800212e:	4013      	ands	r3, r2
 8002130:	2b40      	cmp	r3, #64	; 0x40
 8002132:	d108      	bne.n	8002146 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2241      	movs	r2, #65	; 0x41
 800213a:	4252      	negs	r2, r2
 800213c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	0018      	movs	r0, r3
 8002142:	f000 f907 	bl	8002354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2220      	movs	r2, #32
 800214e:	4013      	ands	r3, r2
 8002150:	2b20      	cmp	r3, #32
 8002152:	d10f      	bne.n	8002174 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2220      	movs	r2, #32
 800215c:	4013      	ands	r3, r2
 800215e:	2b20      	cmp	r3, #32
 8002160:	d108      	bne.n	8002174 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2221      	movs	r2, #33	; 0x21
 8002168:	4252      	negs	r2, r2
 800216a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	0018      	movs	r0, r3
 8002170:	f000 fa70 	bl	8002654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002174:	46c0      	nop			; (mov r8, r8)
 8002176:	46bd      	mov	sp, r7
 8002178:	b002      	add	sp, #8
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002186:	230f      	movs	r3, #15
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	223c      	movs	r2, #60	; 0x3c
 8002192:	5c9b      	ldrb	r3, [r3, r2]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_TIM_ConfigClockSource+0x20>
 8002198:	2302      	movs	r3, #2
 800219a:	e0bc      	b.n	8002316 <HAL_TIM_ConfigClockSource+0x19a>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	223c      	movs	r2, #60	; 0x3c
 80021a0:	2101      	movs	r1, #1
 80021a2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	223d      	movs	r2, #61	; 0x3d
 80021a8:	2102      	movs	r1, #2
 80021aa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2277      	movs	r2, #119	; 0x77
 80021b8:	4393      	bics	r3, r2
 80021ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	4a58      	ldr	r2, [pc, #352]	; (8002320 <HAL_TIM_ConfigClockSource+0x1a4>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2280      	movs	r2, #128	; 0x80
 80021d2:	0192      	lsls	r2, r2, #6
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d040      	beq.n	800225a <HAL_TIM_ConfigClockSource+0xde>
 80021d8:	2280      	movs	r2, #128	; 0x80
 80021da:	0192      	lsls	r2, r2, #6
 80021dc:	4293      	cmp	r3, r2
 80021de:	d900      	bls.n	80021e2 <HAL_TIM_ConfigClockSource+0x66>
 80021e0:	e088      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x178>
 80021e2:	2280      	movs	r2, #128	; 0x80
 80021e4:	0152      	lsls	r2, r2, #5
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d100      	bne.n	80021ec <HAL_TIM_ConfigClockSource+0x70>
 80021ea:	e088      	b.n	80022fe <HAL_TIM_ConfigClockSource+0x182>
 80021ec:	2280      	movs	r2, #128	; 0x80
 80021ee:	0152      	lsls	r2, r2, #5
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d900      	bls.n	80021f6 <HAL_TIM_ConfigClockSource+0x7a>
 80021f4:	e07e      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x178>
 80021f6:	2b70      	cmp	r3, #112	; 0x70
 80021f8:	d018      	beq.n	800222c <HAL_TIM_ConfigClockSource+0xb0>
 80021fa:	d900      	bls.n	80021fe <HAL_TIM_ConfigClockSource+0x82>
 80021fc:	e07a      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x178>
 80021fe:	2b60      	cmp	r3, #96	; 0x60
 8002200:	d04f      	beq.n	80022a2 <HAL_TIM_ConfigClockSource+0x126>
 8002202:	d900      	bls.n	8002206 <HAL_TIM_ConfigClockSource+0x8a>
 8002204:	e076      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x178>
 8002206:	2b50      	cmp	r3, #80	; 0x50
 8002208:	d03b      	beq.n	8002282 <HAL_TIM_ConfigClockSource+0x106>
 800220a:	d900      	bls.n	800220e <HAL_TIM_ConfigClockSource+0x92>
 800220c:	e072      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x178>
 800220e:	2b40      	cmp	r3, #64	; 0x40
 8002210:	d057      	beq.n	80022c2 <HAL_TIM_ConfigClockSource+0x146>
 8002212:	d900      	bls.n	8002216 <HAL_TIM_ConfigClockSource+0x9a>
 8002214:	e06e      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x178>
 8002216:	2b30      	cmp	r3, #48	; 0x30
 8002218:	d063      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x166>
 800221a:	d86b      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x178>
 800221c:	2b20      	cmp	r3, #32
 800221e:	d060      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x166>
 8002220:	d868      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x178>
 8002222:	2b00      	cmp	r3, #0
 8002224:	d05d      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x166>
 8002226:	2b10      	cmp	r3, #16
 8002228:	d05b      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x166>
 800222a:	e063      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800223c:	f000 f98c 	bl	8002558 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2277      	movs	r2, #119	; 0x77
 800224c:	4313      	orrs	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	609a      	str	r2, [r3, #8]
      break;
 8002258:	e052      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800226a:	f000 f975 	bl	8002558 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2180      	movs	r1, #128	; 0x80
 800227a:	01c9      	lsls	r1, r1, #7
 800227c:	430a      	orrs	r2, r1
 800227e:	609a      	str	r2, [r3, #8]
      break;
 8002280:	e03e      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800228e:	001a      	movs	r2, r3
 8002290:	f000 f8e8 	bl	8002464 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2150      	movs	r1, #80	; 0x50
 800229a:	0018      	movs	r0, r3
 800229c:	f000 f942 	bl	8002524 <TIM_ITRx_SetConfig>
      break;
 80022a0:	e02e      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022ae:	001a      	movs	r2, r3
 80022b0:	f000 f906 	bl	80024c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2160      	movs	r1, #96	; 0x60
 80022ba:	0018      	movs	r0, r3
 80022bc:	f000 f932 	bl	8002524 <TIM_ITRx_SetConfig>
      break;
 80022c0:	e01e      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ce:	001a      	movs	r2, r3
 80022d0:	f000 f8c8 	bl	8002464 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2140      	movs	r1, #64	; 0x40
 80022da:	0018      	movs	r0, r3
 80022dc:	f000 f922 	bl	8002524 <TIM_ITRx_SetConfig>
      break;
 80022e0:	e00e      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	0019      	movs	r1, r3
 80022ec:	0010      	movs	r0, r2
 80022ee:	f000 f919 	bl	8002524 <TIM_ITRx_SetConfig>
      break;
 80022f2:	e005      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80022f4:	230f      	movs	r3, #15
 80022f6:	18fb      	adds	r3, r7, r3
 80022f8:	2201      	movs	r2, #1
 80022fa:	701a      	strb	r2, [r3, #0]
      break;
 80022fc:	e000      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80022fe:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	223d      	movs	r2, #61	; 0x3d
 8002304:	2101      	movs	r1, #1
 8002306:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	223c      	movs	r2, #60	; 0x3c
 800230c:	2100      	movs	r1, #0
 800230e:	5499      	strb	r1, [r3, r2]

  return status;
 8002310:	230f      	movs	r3, #15
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	781b      	ldrb	r3, [r3, #0]
}
 8002316:	0018      	movs	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	b004      	add	sp, #16
 800231c:	bd80      	pop	{r7, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	ffff00ff 	.word	0xffff00ff

08002324 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800232c:	46c0      	nop			; (mov r8, r8)
 800232e:	46bd      	mov	sp, r7
 8002330:	b002      	add	sp, #8
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800233c:	46c0      	nop			; (mov r8, r8)
 800233e:	46bd      	mov	sp, r7
 8002340:	b002      	add	sp, #8
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800234c:	46c0      	nop			; (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	b002      	add	sp, #8
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800235c:	46c0      	nop			; (mov r8, r8)
 800235e:	46bd      	mov	sp, r7
 8002360:	b002      	add	sp, #8
 8002362:	bd80      	pop	{r7, pc}

08002364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a34      	ldr	r2, [pc, #208]	; (8002448 <TIM_Base_SetConfig+0xe4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d008      	beq.n	800238e <TIM_Base_SetConfig+0x2a>
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	05db      	lsls	r3, r3, #23
 8002382:	429a      	cmp	r2, r3
 8002384:	d003      	beq.n	800238e <TIM_Base_SetConfig+0x2a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a30      	ldr	r2, [pc, #192]	; (800244c <TIM_Base_SetConfig+0xe8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d108      	bne.n	80023a0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2270      	movs	r2, #112	; 0x70
 8002392:	4393      	bics	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4313      	orrs	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a29      	ldr	r2, [pc, #164]	; (8002448 <TIM_Base_SetConfig+0xe4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d018      	beq.n	80023da <TIM_Base_SetConfig+0x76>
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	05db      	lsls	r3, r3, #23
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d013      	beq.n	80023da <TIM_Base_SetConfig+0x76>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a25      	ldr	r2, [pc, #148]	; (800244c <TIM_Base_SetConfig+0xe8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00f      	beq.n	80023da <TIM_Base_SetConfig+0x76>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a24      	ldr	r2, [pc, #144]	; (8002450 <TIM_Base_SetConfig+0xec>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00b      	beq.n	80023da <TIM_Base_SetConfig+0x76>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a23      	ldr	r2, [pc, #140]	; (8002454 <TIM_Base_SetConfig+0xf0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d007      	beq.n	80023da <TIM_Base_SetConfig+0x76>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a22      	ldr	r2, [pc, #136]	; (8002458 <TIM_Base_SetConfig+0xf4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d003      	beq.n	80023da <TIM_Base_SetConfig+0x76>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a21      	ldr	r2, [pc, #132]	; (800245c <TIM_Base_SetConfig+0xf8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d108      	bne.n	80023ec <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4a20      	ldr	r2, [pc, #128]	; (8002460 <TIM_Base_SetConfig+0xfc>)
 80023de:	4013      	ands	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2280      	movs	r2, #128	; 0x80
 80023f0:	4393      	bics	r3, r2
 80023f2:	001a      	movs	r2, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a0c      	ldr	r2, [pc, #48]	; (8002448 <TIM_Base_SetConfig+0xe4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00b      	beq.n	8002432 <TIM_Base_SetConfig+0xce>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <TIM_Base_SetConfig+0xf0>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d007      	beq.n	8002432 <TIM_Base_SetConfig+0xce>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a0c      	ldr	r2, [pc, #48]	; (8002458 <TIM_Base_SetConfig+0xf4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d003      	beq.n	8002432 <TIM_Base_SetConfig+0xce>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a0b      	ldr	r2, [pc, #44]	; (800245c <TIM_Base_SetConfig+0xf8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d103      	bne.n	800243a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	615a      	str	r2, [r3, #20]
}
 8002440:	46c0      	nop			; (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	b004      	add	sp, #16
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40012c00 	.word	0x40012c00
 800244c:	40000400 	.word	0x40000400
 8002450:	40002000 	.word	0x40002000
 8002454:	40014000 	.word	0x40014000
 8002458:	40014400 	.word	0x40014400
 800245c:	40014800 	.word	0x40014800
 8002460:	fffffcff 	.word	0xfffffcff

08002464 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	2201      	movs	r2, #1
 800247c:	4393      	bics	r3, r2
 800247e:	001a      	movs	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	22f0      	movs	r2, #240	; 0xf0
 800248e:	4393      	bics	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	220a      	movs	r2, #10
 80024a0:	4393      	bics	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	621a      	str	r2, [r3, #32]
}
 80024b8:	46c0      	nop			; (mov r8, r8)
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b006      	add	sp, #24
 80024be:	bd80      	pop	{r7, pc}

080024c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	2210      	movs	r2, #16
 80024d2:	4393      	bics	r3, r2
 80024d4:	001a      	movs	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	4a0d      	ldr	r2, [pc, #52]	; (8002520 <TIM_TI2_ConfigInputStage+0x60>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	031b      	lsls	r3, r3, #12
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	22a0      	movs	r2, #160	; 0xa0
 80024fc:	4393      	bics	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	621a      	str	r2, [r3, #32]
}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	46bd      	mov	sp, r7
 800251a:	b006      	add	sp, #24
 800251c:	bd80      	pop	{r7, pc}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	ffff0fff 	.word	0xffff0fff

08002524 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2270      	movs	r2, #112	; 0x70
 8002538:	4393      	bics	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	2207      	movs	r2, #7
 8002544:	4313      	orrs	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	609a      	str	r2, [r3, #8]
}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	46bd      	mov	sp, r7
 8002552:	b004      	add	sp, #16
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	4a09      	ldr	r2, [pc, #36]	; (8002594 <TIM_ETR_SetConfig+0x3c>)
 8002570:	4013      	ands	r3, r2
 8002572:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	021a      	lsls	r2, r3, #8
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	431a      	orrs	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4313      	orrs	r3, r2
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	4313      	orrs	r3, r2
 8002584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	609a      	str	r2, [r3, #8]
}
 800258c:	46c0      	nop			; (mov r8, r8)
 800258e:	46bd      	mov	sp, r7
 8002590:	b006      	add	sp, #24
 8002592:	bd80      	pop	{r7, pc}
 8002594:	ffff00ff 	.word	0xffff00ff

08002598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	223c      	movs	r2, #60	; 0x3c
 80025a6:	5c9b      	ldrb	r3, [r3, r2]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e047      	b.n	8002640 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	223c      	movs	r2, #60	; 0x3c
 80025b4:	2101      	movs	r1, #1
 80025b6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	223d      	movs	r2, #61	; 0x3d
 80025bc:	2102      	movs	r1, #2
 80025be:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2270      	movs	r2, #112	; 0x70
 80025d4:	4393      	bics	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a16      	ldr	r2, [pc, #88]	; (8002648 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d00f      	beq.n	8002614 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	05db      	lsls	r3, r3, #23
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d009      	beq.n	8002614 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a11      	ldr	r2, [pc, #68]	; (800264c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d004      	beq.n	8002614 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a10      	ldr	r2, [pc, #64]	; (8002650 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d10c      	bne.n	800262e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2280      	movs	r2, #128	; 0x80
 8002618:	4393      	bics	r3, r2
 800261a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	4313      	orrs	r3, r2
 8002624:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	223d      	movs	r2, #61	; 0x3d
 8002632:	2101      	movs	r1, #1
 8002634:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	223c      	movs	r2, #60	; 0x3c
 800263a:	2100      	movs	r1, #0
 800263c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	0018      	movs	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	b004      	add	sp, #16
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40012c00 	.word	0x40012c00
 800264c:	40000400 	.word	0x40000400
 8002650:	40014000 	.word	0x40014000

08002654 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800265c:	46c0      	nop			; (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	b002      	add	sp, #8
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800266c:	46c0      	nop			; (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b002      	add	sp, #8
 8002672:	bd80      	pop	{r7, pc}

08002674 <memset>:
 8002674:	0003      	movs	r3, r0
 8002676:	1882      	adds	r2, r0, r2
 8002678:	4293      	cmp	r3, r2
 800267a:	d100      	bne.n	800267e <memset+0xa>
 800267c:	4770      	bx	lr
 800267e:	7019      	strb	r1, [r3, #0]
 8002680:	3301      	adds	r3, #1
 8002682:	e7f9      	b.n	8002678 <memset+0x4>

08002684 <__libc_init_array>:
 8002684:	b570      	push	{r4, r5, r6, lr}
 8002686:	2600      	movs	r6, #0
 8002688:	4c0c      	ldr	r4, [pc, #48]	; (80026bc <__libc_init_array+0x38>)
 800268a:	4d0d      	ldr	r5, [pc, #52]	; (80026c0 <__libc_init_array+0x3c>)
 800268c:	1b64      	subs	r4, r4, r5
 800268e:	10a4      	asrs	r4, r4, #2
 8002690:	42a6      	cmp	r6, r4
 8002692:	d109      	bne.n	80026a8 <__libc_init_array+0x24>
 8002694:	2600      	movs	r6, #0
 8002696:	f000 f819 	bl	80026cc <_init>
 800269a:	4c0a      	ldr	r4, [pc, #40]	; (80026c4 <__libc_init_array+0x40>)
 800269c:	4d0a      	ldr	r5, [pc, #40]	; (80026c8 <__libc_init_array+0x44>)
 800269e:	1b64      	subs	r4, r4, r5
 80026a0:	10a4      	asrs	r4, r4, #2
 80026a2:	42a6      	cmp	r6, r4
 80026a4:	d105      	bne.n	80026b2 <__libc_init_array+0x2e>
 80026a6:	bd70      	pop	{r4, r5, r6, pc}
 80026a8:	00b3      	lsls	r3, r6, #2
 80026aa:	58eb      	ldr	r3, [r5, r3]
 80026ac:	4798      	blx	r3
 80026ae:	3601      	adds	r6, #1
 80026b0:	e7ee      	b.n	8002690 <__libc_init_array+0xc>
 80026b2:	00b3      	lsls	r3, r6, #2
 80026b4:	58eb      	ldr	r3, [r5, r3]
 80026b6:	4798      	blx	r3
 80026b8:	3601      	adds	r6, #1
 80026ba:	e7f2      	b.n	80026a2 <__libc_init_array+0x1e>
 80026bc:	0800271c 	.word	0x0800271c
 80026c0:	0800271c 	.word	0x0800271c
 80026c4:	08002720 	.word	0x08002720
 80026c8:	0800271c 	.word	0x0800271c

080026cc <_init>:
 80026cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026d2:	bc08      	pop	{r3}
 80026d4:	469e      	mov	lr, r3
 80026d6:	4770      	bx	lr

080026d8 <_fini>:
 80026d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026de:	bc08      	pop	{r3}
 80026e0:	469e      	mov	lr, r3
 80026e2:	4770      	bx	lr


CableTesterATAx0001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027f4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080028b0  080028b0  000128b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002920  08002920  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08002920  08002920  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002920  08002920  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002920  08002920  00012920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002924  08002924  00012924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000030  08002958  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002958  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008023  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000148c  00000000  00000000  0002807b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  00029508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000818  00000000  00000000  00029dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019df4  00000000  00000000  0002a5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009996  00000000  00000000  000443d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a015e  00000000  00000000  0004dd6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000edec8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fc4  00000000  00000000  000edf18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000030 	.word	0x20000030
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002898 	.word	0x08002898

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000034 	.word	0x20000034
 8000100:	08002898 	.word	0x08002898

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_ddiv>:
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	4657      	mov	r7, sl
 8000220:	464e      	mov	r6, r9
 8000222:	4645      	mov	r5, r8
 8000224:	46de      	mov	lr, fp
 8000226:	b5e0      	push	{r5, r6, r7, lr}
 8000228:	4681      	mov	r9, r0
 800022a:	0005      	movs	r5, r0
 800022c:	030c      	lsls	r4, r1, #12
 800022e:	0048      	lsls	r0, r1, #1
 8000230:	4692      	mov	sl, r2
 8000232:	001f      	movs	r7, r3
 8000234:	b085      	sub	sp, #20
 8000236:	0b24      	lsrs	r4, r4, #12
 8000238:	0d40      	lsrs	r0, r0, #21
 800023a:	0fce      	lsrs	r6, r1, #31
 800023c:	2800      	cmp	r0, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_ddiv+0x26>
 8000240:	e156      	b.n	80004f0 <__aeabi_ddiv+0x2d4>
 8000242:	4bd4      	ldr	r3, [pc, #848]	; (8000594 <__aeabi_ddiv+0x378>)
 8000244:	4298      	cmp	r0, r3
 8000246:	d100      	bne.n	800024a <__aeabi_ddiv+0x2e>
 8000248:	e172      	b.n	8000530 <__aeabi_ddiv+0x314>
 800024a:	0f6b      	lsrs	r3, r5, #29
 800024c:	00e4      	lsls	r4, r4, #3
 800024e:	431c      	orrs	r4, r3
 8000250:	2380      	movs	r3, #128	; 0x80
 8000252:	041b      	lsls	r3, r3, #16
 8000254:	4323      	orrs	r3, r4
 8000256:	4698      	mov	r8, r3
 8000258:	4bcf      	ldr	r3, [pc, #828]	; (8000598 <__aeabi_ddiv+0x37c>)
 800025a:	00ed      	lsls	r5, r5, #3
 800025c:	469b      	mov	fp, r3
 800025e:	2300      	movs	r3, #0
 8000260:	4699      	mov	r9, r3
 8000262:	4483      	add	fp, r0
 8000264:	9300      	str	r3, [sp, #0]
 8000266:	033c      	lsls	r4, r7, #12
 8000268:	007b      	lsls	r3, r7, #1
 800026a:	4650      	mov	r0, sl
 800026c:	0b24      	lsrs	r4, r4, #12
 800026e:	0d5b      	lsrs	r3, r3, #21
 8000270:	0fff      	lsrs	r7, r7, #31
 8000272:	2b00      	cmp	r3, #0
 8000274:	d100      	bne.n	8000278 <__aeabi_ddiv+0x5c>
 8000276:	e11f      	b.n	80004b8 <__aeabi_ddiv+0x29c>
 8000278:	4ac6      	ldr	r2, [pc, #792]	; (8000594 <__aeabi_ddiv+0x378>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d100      	bne.n	8000280 <__aeabi_ddiv+0x64>
 800027e:	e162      	b.n	8000546 <__aeabi_ddiv+0x32a>
 8000280:	49c5      	ldr	r1, [pc, #788]	; (8000598 <__aeabi_ddiv+0x37c>)
 8000282:	0f42      	lsrs	r2, r0, #29
 8000284:	468c      	mov	ip, r1
 8000286:	00e4      	lsls	r4, r4, #3
 8000288:	4659      	mov	r1, fp
 800028a:	4314      	orrs	r4, r2
 800028c:	2280      	movs	r2, #128	; 0x80
 800028e:	4463      	add	r3, ip
 8000290:	0412      	lsls	r2, r2, #16
 8000292:	1acb      	subs	r3, r1, r3
 8000294:	4314      	orrs	r4, r2
 8000296:	469b      	mov	fp, r3
 8000298:	00c2      	lsls	r2, r0, #3
 800029a:	2000      	movs	r0, #0
 800029c:	0033      	movs	r3, r6
 800029e:	407b      	eors	r3, r7
 80002a0:	469a      	mov	sl, r3
 80002a2:	464b      	mov	r3, r9
 80002a4:	2b0f      	cmp	r3, #15
 80002a6:	d827      	bhi.n	80002f8 <__aeabi_ddiv+0xdc>
 80002a8:	49bc      	ldr	r1, [pc, #752]	; (800059c <__aeabi_ddiv+0x380>)
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	58cb      	ldr	r3, [r1, r3]
 80002ae:	469f      	mov	pc, r3
 80002b0:	46b2      	mov	sl, r6
 80002b2:	9b00      	ldr	r3, [sp, #0]
 80002b4:	2b02      	cmp	r3, #2
 80002b6:	d016      	beq.n	80002e6 <__aeabi_ddiv+0xca>
 80002b8:	2b03      	cmp	r3, #3
 80002ba:	d100      	bne.n	80002be <__aeabi_ddiv+0xa2>
 80002bc:	e28e      	b.n	80007dc <__aeabi_ddiv+0x5c0>
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d000      	beq.n	80002c4 <__aeabi_ddiv+0xa8>
 80002c2:	e0d9      	b.n	8000478 <__aeabi_ddiv+0x25c>
 80002c4:	2300      	movs	r3, #0
 80002c6:	2400      	movs	r4, #0
 80002c8:	2500      	movs	r5, #0
 80002ca:	4652      	mov	r2, sl
 80002cc:	051b      	lsls	r3, r3, #20
 80002ce:	4323      	orrs	r3, r4
 80002d0:	07d2      	lsls	r2, r2, #31
 80002d2:	4313      	orrs	r3, r2
 80002d4:	0028      	movs	r0, r5
 80002d6:	0019      	movs	r1, r3
 80002d8:	b005      	add	sp, #20
 80002da:	bcf0      	pop	{r4, r5, r6, r7}
 80002dc:	46bb      	mov	fp, r7
 80002de:	46b2      	mov	sl, r6
 80002e0:	46a9      	mov	r9, r5
 80002e2:	46a0      	mov	r8, r4
 80002e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002e6:	2400      	movs	r4, #0
 80002e8:	2500      	movs	r5, #0
 80002ea:	4baa      	ldr	r3, [pc, #680]	; (8000594 <__aeabi_ddiv+0x378>)
 80002ec:	e7ed      	b.n	80002ca <__aeabi_ddiv+0xae>
 80002ee:	46ba      	mov	sl, r7
 80002f0:	46a0      	mov	r8, r4
 80002f2:	0015      	movs	r5, r2
 80002f4:	9000      	str	r0, [sp, #0]
 80002f6:	e7dc      	b.n	80002b2 <__aeabi_ddiv+0x96>
 80002f8:	4544      	cmp	r4, r8
 80002fa:	d200      	bcs.n	80002fe <__aeabi_ddiv+0xe2>
 80002fc:	e1c7      	b.n	800068e <__aeabi_ddiv+0x472>
 80002fe:	d100      	bne.n	8000302 <__aeabi_ddiv+0xe6>
 8000300:	e1c2      	b.n	8000688 <__aeabi_ddiv+0x46c>
 8000302:	2301      	movs	r3, #1
 8000304:	425b      	negs	r3, r3
 8000306:	469c      	mov	ip, r3
 8000308:	002e      	movs	r6, r5
 800030a:	4640      	mov	r0, r8
 800030c:	2500      	movs	r5, #0
 800030e:	44e3      	add	fp, ip
 8000310:	0223      	lsls	r3, r4, #8
 8000312:	0e14      	lsrs	r4, r2, #24
 8000314:	431c      	orrs	r4, r3
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	4699      	mov	r9, r3
 800031a:	0423      	lsls	r3, r4, #16
 800031c:	0c1f      	lsrs	r7, r3, #16
 800031e:	0212      	lsls	r2, r2, #8
 8000320:	4649      	mov	r1, r9
 8000322:	9200      	str	r2, [sp, #0]
 8000324:	9701      	str	r7, [sp, #4]
 8000326:	f7ff ff73 	bl	8000210 <__aeabi_uidivmod>
 800032a:	0002      	movs	r2, r0
 800032c:	437a      	muls	r2, r7
 800032e:	040b      	lsls	r3, r1, #16
 8000330:	0c31      	lsrs	r1, r6, #16
 8000332:	4680      	mov	r8, r0
 8000334:	4319      	orrs	r1, r3
 8000336:	428a      	cmp	r2, r1
 8000338:	d907      	bls.n	800034a <__aeabi_ddiv+0x12e>
 800033a:	2301      	movs	r3, #1
 800033c:	425b      	negs	r3, r3
 800033e:	469c      	mov	ip, r3
 8000340:	1909      	adds	r1, r1, r4
 8000342:	44e0      	add	r8, ip
 8000344:	428c      	cmp	r4, r1
 8000346:	d800      	bhi.n	800034a <__aeabi_ddiv+0x12e>
 8000348:	e207      	b.n	800075a <__aeabi_ddiv+0x53e>
 800034a:	1a88      	subs	r0, r1, r2
 800034c:	4649      	mov	r1, r9
 800034e:	f7ff ff5f 	bl	8000210 <__aeabi_uidivmod>
 8000352:	0409      	lsls	r1, r1, #16
 8000354:	468c      	mov	ip, r1
 8000356:	0431      	lsls	r1, r6, #16
 8000358:	4666      	mov	r6, ip
 800035a:	9a01      	ldr	r2, [sp, #4]
 800035c:	0c09      	lsrs	r1, r1, #16
 800035e:	4342      	muls	r2, r0
 8000360:	0003      	movs	r3, r0
 8000362:	4331      	orrs	r1, r6
 8000364:	428a      	cmp	r2, r1
 8000366:	d904      	bls.n	8000372 <__aeabi_ddiv+0x156>
 8000368:	1909      	adds	r1, r1, r4
 800036a:	3b01      	subs	r3, #1
 800036c:	428c      	cmp	r4, r1
 800036e:	d800      	bhi.n	8000372 <__aeabi_ddiv+0x156>
 8000370:	e1ed      	b.n	800074e <__aeabi_ddiv+0x532>
 8000372:	1a88      	subs	r0, r1, r2
 8000374:	4642      	mov	r2, r8
 8000376:	0412      	lsls	r2, r2, #16
 8000378:	431a      	orrs	r2, r3
 800037a:	4690      	mov	r8, r2
 800037c:	4641      	mov	r1, r8
 800037e:	9b00      	ldr	r3, [sp, #0]
 8000380:	040e      	lsls	r6, r1, #16
 8000382:	0c1b      	lsrs	r3, r3, #16
 8000384:	001f      	movs	r7, r3
 8000386:	9302      	str	r3, [sp, #8]
 8000388:	9b00      	ldr	r3, [sp, #0]
 800038a:	0c36      	lsrs	r6, r6, #16
 800038c:	041b      	lsls	r3, r3, #16
 800038e:	0c19      	lsrs	r1, r3, #16
 8000390:	000b      	movs	r3, r1
 8000392:	4373      	muls	r3, r6
 8000394:	0c12      	lsrs	r2, r2, #16
 8000396:	437e      	muls	r6, r7
 8000398:	9103      	str	r1, [sp, #12]
 800039a:	4351      	muls	r1, r2
 800039c:	437a      	muls	r2, r7
 800039e:	0c1f      	lsrs	r7, r3, #16
 80003a0:	46bc      	mov	ip, r7
 80003a2:	1876      	adds	r6, r6, r1
 80003a4:	4466      	add	r6, ip
 80003a6:	42b1      	cmp	r1, r6
 80003a8:	d903      	bls.n	80003b2 <__aeabi_ddiv+0x196>
 80003aa:	2180      	movs	r1, #128	; 0x80
 80003ac:	0249      	lsls	r1, r1, #9
 80003ae:	468c      	mov	ip, r1
 80003b0:	4462      	add	r2, ip
 80003b2:	0c31      	lsrs	r1, r6, #16
 80003b4:	188a      	adds	r2, r1, r2
 80003b6:	0431      	lsls	r1, r6, #16
 80003b8:	041e      	lsls	r6, r3, #16
 80003ba:	0c36      	lsrs	r6, r6, #16
 80003bc:	198e      	adds	r6, r1, r6
 80003be:	4290      	cmp	r0, r2
 80003c0:	d302      	bcc.n	80003c8 <__aeabi_ddiv+0x1ac>
 80003c2:	d112      	bne.n	80003ea <__aeabi_ddiv+0x1ce>
 80003c4:	42b5      	cmp	r5, r6
 80003c6:	d210      	bcs.n	80003ea <__aeabi_ddiv+0x1ce>
 80003c8:	4643      	mov	r3, r8
 80003ca:	1e59      	subs	r1, r3, #1
 80003cc:	9b00      	ldr	r3, [sp, #0]
 80003ce:	469c      	mov	ip, r3
 80003d0:	4465      	add	r5, ip
 80003d2:	001f      	movs	r7, r3
 80003d4:	429d      	cmp	r5, r3
 80003d6:	419b      	sbcs	r3, r3
 80003d8:	425b      	negs	r3, r3
 80003da:	191b      	adds	r3, r3, r4
 80003dc:	18c0      	adds	r0, r0, r3
 80003de:	4284      	cmp	r4, r0
 80003e0:	d200      	bcs.n	80003e4 <__aeabi_ddiv+0x1c8>
 80003e2:	e1a0      	b.n	8000726 <__aeabi_ddiv+0x50a>
 80003e4:	d100      	bne.n	80003e8 <__aeabi_ddiv+0x1cc>
 80003e6:	e19b      	b.n	8000720 <__aeabi_ddiv+0x504>
 80003e8:	4688      	mov	r8, r1
 80003ea:	1bae      	subs	r6, r5, r6
 80003ec:	42b5      	cmp	r5, r6
 80003ee:	41ad      	sbcs	r5, r5
 80003f0:	1a80      	subs	r0, r0, r2
 80003f2:	426d      	negs	r5, r5
 80003f4:	1b40      	subs	r0, r0, r5
 80003f6:	4284      	cmp	r4, r0
 80003f8:	d100      	bne.n	80003fc <__aeabi_ddiv+0x1e0>
 80003fa:	e1d5      	b.n	80007a8 <__aeabi_ddiv+0x58c>
 80003fc:	4649      	mov	r1, r9
 80003fe:	f7ff ff07 	bl	8000210 <__aeabi_uidivmod>
 8000402:	9a01      	ldr	r2, [sp, #4]
 8000404:	040b      	lsls	r3, r1, #16
 8000406:	4342      	muls	r2, r0
 8000408:	0c31      	lsrs	r1, r6, #16
 800040a:	0005      	movs	r5, r0
 800040c:	4319      	orrs	r1, r3
 800040e:	428a      	cmp	r2, r1
 8000410:	d900      	bls.n	8000414 <__aeabi_ddiv+0x1f8>
 8000412:	e16c      	b.n	80006ee <__aeabi_ddiv+0x4d2>
 8000414:	1a88      	subs	r0, r1, r2
 8000416:	4649      	mov	r1, r9
 8000418:	f7ff fefa 	bl	8000210 <__aeabi_uidivmod>
 800041c:	9a01      	ldr	r2, [sp, #4]
 800041e:	0436      	lsls	r6, r6, #16
 8000420:	4342      	muls	r2, r0
 8000422:	0409      	lsls	r1, r1, #16
 8000424:	0c36      	lsrs	r6, r6, #16
 8000426:	0003      	movs	r3, r0
 8000428:	430e      	orrs	r6, r1
 800042a:	42b2      	cmp	r2, r6
 800042c:	d900      	bls.n	8000430 <__aeabi_ddiv+0x214>
 800042e:	e153      	b.n	80006d8 <__aeabi_ddiv+0x4bc>
 8000430:	9803      	ldr	r0, [sp, #12]
 8000432:	1ab6      	subs	r6, r6, r2
 8000434:	0002      	movs	r2, r0
 8000436:	042d      	lsls	r5, r5, #16
 8000438:	431d      	orrs	r5, r3
 800043a:	9f02      	ldr	r7, [sp, #8]
 800043c:	042b      	lsls	r3, r5, #16
 800043e:	0c1b      	lsrs	r3, r3, #16
 8000440:	435a      	muls	r2, r3
 8000442:	437b      	muls	r3, r7
 8000444:	469c      	mov	ip, r3
 8000446:	0c29      	lsrs	r1, r5, #16
 8000448:	4348      	muls	r0, r1
 800044a:	0c13      	lsrs	r3, r2, #16
 800044c:	4484      	add	ip, r0
 800044e:	4463      	add	r3, ip
 8000450:	4379      	muls	r1, r7
 8000452:	4298      	cmp	r0, r3
 8000454:	d903      	bls.n	800045e <__aeabi_ddiv+0x242>
 8000456:	2080      	movs	r0, #128	; 0x80
 8000458:	0240      	lsls	r0, r0, #9
 800045a:	4684      	mov	ip, r0
 800045c:	4461      	add	r1, ip
 800045e:	0c18      	lsrs	r0, r3, #16
 8000460:	0412      	lsls	r2, r2, #16
 8000462:	041b      	lsls	r3, r3, #16
 8000464:	0c12      	lsrs	r2, r2, #16
 8000466:	1841      	adds	r1, r0, r1
 8000468:	189b      	adds	r3, r3, r2
 800046a:	428e      	cmp	r6, r1
 800046c:	d200      	bcs.n	8000470 <__aeabi_ddiv+0x254>
 800046e:	e0ff      	b.n	8000670 <__aeabi_ddiv+0x454>
 8000470:	d100      	bne.n	8000474 <__aeabi_ddiv+0x258>
 8000472:	e0fa      	b.n	800066a <__aeabi_ddiv+0x44e>
 8000474:	2301      	movs	r3, #1
 8000476:	431d      	orrs	r5, r3
 8000478:	4a49      	ldr	r2, [pc, #292]	; (80005a0 <__aeabi_ddiv+0x384>)
 800047a:	445a      	add	r2, fp
 800047c:	2a00      	cmp	r2, #0
 800047e:	dc00      	bgt.n	8000482 <__aeabi_ddiv+0x266>
 8000480:	e0aa      	b.n	80005d8 <__aeabi_ddiv+0x3bc>
 8000482:	076b      	lsls	r3, r5, #29
 8000484:	d000      	beq.n	8000488 <__aeabi_ddiv+0x26c>
 8000486:	e13d      	b.n	8000704 <__aeabi_ddiv+0x4e8>
 8000488:	08ed      	lsrs	r5, r5, #3
 800048a:	4643      	mov	r3, r8
 800048c:	01db      	lsls	r3, r3, #7
 800048e:	d506      	bpl.n	800049e <__aeabi_ddiv+0x282>
 8000490:	4642      	mov	r2, r8
 8000492:	4b44      	ldr	r3, [pc, #272]	; (80005a4 <__aeabi_ddiv+0x388>)
 8000494:	401a      	ands	r2, r3
 8000496:	4690      	mov	r8, r2
 8000498:	2280      	movs	r2, #128	; 0x80
 800049a:	00d2      	lsls	r2, r2, #3
 800049c:	445a      	add	r2, fp
 800049e:	4b42      	ldr	r3, [pc, #264]	; (80005a8 <__aeabi_ddiv+0x38c>)
 80004a0:	429a      	cmp	r2, r3
 80004a2:	dd00      	ble.n	80004a6 <__aeabi_ddiv+0x28a>
 80004a4:	e71f      	b.n	80002e6 <__aeabi_ddiv+0xca>
 80004a6:	4643      	mov	r3, r8
 80004a8:	075b      	lsls	r3, r3, #29
 80004aa:	431d      	orrs	r5, r3
 80004ac:	4643      	mov	r3, r8
 80004ae:	0552      	lsls	r2, r2, #21
 80004b0:	025c      	lsls	r4, r3, #9
 80004b2:	0b24      	lsrs	r4, r4, #12
 80004b4:	0d53      	lsrs	r3, r2, #21
 80004b6:	e708      	b.n	80002ca <__aeabi_ddiv+0xae>
 80004b8:	4652      	mov	r2, sl
 80004ba:	4322      	orrs	r2, r4
 80004bc:	d100      	bne.n	80004c0 <__aeabi_ddiv+0x2a4>
 80004be:	e07b      	b.n	80005b8 <__aeabi_ddiv+0x39c>
 80004c0:	2c00      	cmp	r4, #0
 80004c2:	d100      	bne.n	80004c6 <__aeabi_ddiv+0x2aa>
 80004c4:	e0fa      	b.n	80006bc <__aeabi_ddiv+0x4a0>
 80004c6:	0020      	movs	r0, r4
 80004c8:	f000 f9fa 	bl	80008c0 <__clzsi2>
 80004cc:	0002      	movs	r2, r0
 80004ce:	3a0b      	subs	r2, #11
 80004d0:	231d      	movs	r3, #29
 80004d2:	0001      	movs	r1, r0
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	3908      	subs	r1, #8
 80004da:	40da      	lsrs	r2, r3
 80004dc:	408c      	lsls	r4, r1
 80004de:	4314      	orrs	r4, r2
 80004e0:	4652      	mov	r2, sl
 80004e2:	408a      	lsls	r2, r1
 80004e4:	4b31      	ldr	r3, [pc, #196]	; (80005ac <__aeabi_ddiv+0x390>)
 80004e6:	4458      	add	r0, fp
 80004e8:	469b      	mov	fp, r3
 80004ea:	4483      	add	fp, r0
 80004ec:	2000      	movs	r0, #0
 80004ee:	e6d5      	b.n	800029c <__aeabi_ddiv+0x80>
 80004f0:	464b      	mov	r3, r9
 80004f2:	4323      	orrs	r3, r4
 80004f4:	4698      	mov	r8, r3
 80004f6:	d044      	beq.n	8000582 <__aeabi_ddiv+0x366>
 80004f8:	2c00      	cmp	r4, #0
 80004fa:	d100      	bne.n	80004fe <__aeabi_ddiv+0x2e2>
 80004fc:	e0ce      	b.n	800069c <__aeabi_ddiv+0x480>
 80004fe:	0020      	movs	r0, r4
 8000500:	f000 f9de 	bl	80008c0 <__clzsi2>
 8000504:	0001      	movs	r1, r0
 8000506:	0002      	movs	r2, r0
 8000508:	390b      	subs	r1, #11
 800050a:	231d      	movs	r3, #29
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	4649      	mov	r1, r9
 8000510:	0010      	movs	r0, r2
 8000512:	40d9      	lsrs	r1, r3
 8000514:	3808      	subs	r0, #8
 8000516:	4084      	lsls	r4, r0
 8000518:	000b      	movs	r3, r1
 800051a:	464d      	mov	r5, r9
 800051c:	4323      	orrs	r3, r4
 800051e:	4698      	mov	r8, r3
 8000520:	4085      	lsls	r5, r0
 8000522:	4823      	ldr	r0, [pc, #140]	; (80005b0 <__aeabi_ddiv+0x394>)
 8000524:	1a83      	subs	r3, r0, r2
 8000526:	469b      	mov	fp, r3
 8000528:	2300      	movs	r3, #0
 800052a:	4699      	mov	r9, r3
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	e69a      	b.n	8000266 <__aeabi_ddiv+0x4a>
 8000530:	464b      	mov	r3, r9
 8000532:	4323      	orrs	r3, r4
 8000534:	4698      	mov	r8, r3
 8000536:	d11d      	bne.n	8000574 <__aeabi_ddiv+0x358>
 8000538:	2308      	movs	r3, #8
 800053a:	4699      	mov	r9, r3
 800053c:	3b06      	subs	r3, #6
 800053e:	2500      	movs	r5, #0
 8000540:	4683      	mov	fp, r0
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	e68f      	b.n	8000266 <__aeabi_ddiv+0x4a>
 8000546:	4652      	mov	r2, sl
 8000548:	4322      	orrs	r2, r4
 800054a:	d109      	bne.n	8000560 <__aeabi_ddiv+0x344>
 800054c:	2302      	movs	r3, #2
 800054e:	4649      	mov	r1, r9
 8000550:	4319      	orrs	r1, r3
 8000552:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <__aeabi_ddiv+0x398>)
 8000554:	4689      	mov	r9, r1
 8000556:	469c      	mov	ip, r3
 8000558:	2400      	movs	r4, #0
 800055a:	2002      	movs	r0, #2
 800055c:	44e3      	add	fp, ip
 800055e:	e69d      	b.n	800029c <__aeabi_ddiv+0x80>
 8000560:	2303      	movs	r3, #3
 8000562:	464a      	mov	r2, r9
 8000564:	431a      	orrs	r2, r3
 8000566:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <__aeabi_ddiv+0x398>)
 8000568:	4691      	mov	r9, r2
 800056a:	469c      	mov	ip, r3
 800056c:	4652      	mov	r2, sl
 800056e:	2003      	movs	r0, #3
 8000570:	44e3      	add	fp, ip
 8000572:	e693      	b.n	800029c <__aeabi_ddiv+0x80>
 8000574:	230c      	movs	r3, #12
 8000576:	4699      	mov	r9, r3
 8000578:	3b09      	subs	r3, #9
 800057a:	46a0      	mov	r8, r4
 800057c:	4683      	mov	fp, r0
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	e671      	b.n	8000266 <__aeabi_ddiv+0x4a>
 8000582:	2304      	movs	r3, #4
 8000584:	4699      	mov	r9, r3
 8000586:	2300      	movs	r3, #0
 8000588:	469b      	mov	fp, r3
 800058a:	3301      	adds	r3, #1
 800058c:	2500      	movs	r5, #0
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	e669      	b.n	8000266 <__aeabi_ddiv+0x4a>
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	000007ff 	.word	0x000007ff
 8000598:	fffffc01 	.word	0xfffffc01
 800059c:	080028b0 	.word	0x080028b0
 80005a0:	000003ff 	.word	0x000003ff
 80005a4:	feffffff 	.word	0xfeffffff
 80005a8:	000007fe 	.word	0x000007fe
 80005ac:	000003f3 	.word	0x000003f3
 80005b0:	fffffc0d 	.word	0xfffffc0d
 80005b4:	fffff801 	.word	0xfffff801
 80005b8:	4649      	mov	r1, r9
 80005ba:	2301      	movs	r3, #1
 80005bc:	4319      	orrs	r1, r3
 80005be:	4689      	mov	r9, r1
 80005c0:	2400      	movs	r4, #0
 80005c2:	2001      	movs	r0, #1
 80005c4:	e66a      	b.n	800029c <__aeabi_ddiv+0x80>
 80005c6:	2300      	movs	r3, #0
 80005c8:	2480      	movs	r4, #128	; 0x80
 80005ca:	469a      	mov	sl, r3
 80005cc:	2500      	movs	r5, #0
 80005ce:	4b8a      	ldr	r3, [pc, #552]	; (80007f8 <__aeabi_ddiv+0x5dc>)
 80005d0:	0324      	lsls	r4, r4, #12
 80005d2:	e67a      	b.n	80002ca <__aeabi_ddiv+0xae>
 80005d4:	2501      	movs	r5, #1
 80005d6:	426d      	negs	r5, r5
 80005d8:	2301      	movs	r3, #1
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	2b38      	cmp	r3, #56	; 0x38
 80005de:	dd00      	ble.n	80005e2 <__aeabi_ddiv+0x3c6>
 80005e0:	e670      	b.n	80002c4 <__aeabi_ddiv+0xa8>
 80005e2:	2b1f      	cmp	r3, #31
 80005e4:	dc00      	bgt.n	80005e8 <__aeabi_ddiv+0x3cc>
 80005e6:	e0bf      	b.n	8000768 <__aeabi_ddiv+0x54c>
 80005e8:	211f      	movs	r1, #31
 80005ea:	4249      	negs	r1, r1
 80005ec:	1a8a      	subs	r2, r1, r2
 80005ee:	4641      	mov	r1, r8
 80005f0:	40d1      	lsrs	r1, r2
 80005f2:	000a      	movs	r2, r1
 80005f4:	2b20      	cmp	r3, #32
 80005f6:	d004      	beq.n	8000602 <__aeabi_ddiv+0x3e6>
 80005f8:	4641      	mov	r1, r8
 80005fa:	4b80      	ldr	r3, [pc, #512]	; (80007fc <__aeabi_ddiv+0x5e0>)
 80005fc:	445b      	add	r3, fp
 80005fe:	4099      	lsls	r1, r3
 8000600:	430d      	orrs	r5, r1
 8000602:	1e6b      	subs	r3, r5, #1
 8000604:	419d      	sbcs	r5, r3
 8000606:	2307      	movs	r3, #7
 8000608:	432a      	orrs	r2, r5
 800060a:	001d      	movs	r5, r3
 800060c:	2400      	movs	r4, #0
 800060e:	4015      	ands	r5, r2
 8000610:	4213      	tst	r3, r2
 8000612:	d100      	bne.n	8000616 <__aeabi_ddiv+0x3fa>
 8000614:	e0d4      	b.n	80007c0 <__aeabi_ddiv+0x5a4>
 8000616:	210f      	movs	r1, #15
 8000618:	2300      	movs	r3, #0
 800061a:	4011      	ands	r1, r2
 800061c:	2904      	cmp	r1, #4
 800061e:	d100      	bne.n	8000622 <__aeabi_ddiv+0x406>
 8000620:	e0cb      	b.n	80007ba <__aeabi_ddiv+0x59e>
 8000622:	1d11      	adds	r1, r2, #4
 8000624:	4291      	cmp	r1, r2
 8000626:	4192      	sbcs	r2, r2
 8000628:	4252      	negs	r2, r2
 800062a:	189b      	adds	r3, r3, r2
 800062c:	000a      	movs	r2, r1
 800062e:	0219      	lsls	r1, r3, #8
 8000630:	d400      	bmi.n	8000634 <__aeabi_ddiv+0x418>
 8000632:	e0c2      	b.n	80007ba <__aeabi_ddiv+0x59e>
 8000634:	2301      	movs	r3, #1
 8000636:	2400      	movs	r4, #0
 8000638:	2500      	movs	r5, #0
 800063a:	e646      	b.n	80002ca <__aeabi_ddiv+0xae>
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	4641      	mov	r1, r8
 8000640:	031b      	lsls	r3, r3, #12
 8000642:	4219      	tst	r1, r3
 8000644:	d008      	beq.n	8000658 <__aeabi_ddiv+0x43c>
 8000646:	421c      	tst	r4, r3
 8000648:	d106      	bne.n	8000658 <__aeabi_ddiv+0x43c>
 800064a:	431c      	orrs	r4, r3
 800064c:	0324      	lsls	r4, r4, #12
 800064e:	46ba      	mov	sl, r7
 8000650:	0015      	movs	r5, r2
 8000652:	4b69      	ldr	r3, [pc, #420]	; (80007f8 <__aeabi_ddiv+0x5dc>)
 8000654:	0b24      	lsrs	r4, r4, #12
 8000656:	e638      	b.n	80002ca <__aeabi_ddiv+0xae>
 8000658:	2480      	movs	r4, #128	; 0x80
 800065a:	4643      	mov	r3, r8
 800065c:	0324      	lsls	r4, r4, #12
 800065e:	431c      	orrs	r4, r3
 8000660:	0324      	lsls	r4, r4, #12
 8000662:	46b2      	mov	sl, r6
 8000664:	4b64      	ldr	r3, [pc, #400]	; (80007f8 <__aeabi_ddiv+0x5dc>)
 8000666:	0b24      	lsrs	r4, r4, #12
 8000668:	e62f      	b.n	80002ca <__aeabi_ddiv+0xae>
 800066a:	2b00      	cmp	r3, #0
 800066c:	d100      	bne.n	8000670 <__aeabi_ddiv+0x454>
 800066e:	e703      	b.n	8000478 <__aeabi_ddiv+0x25c>
 8000670:	19a6      	adds	r6, r4, r6
 8000672:	1e68      	subs	r0, r5, #1
 8000674:	42a6      	cmp	r6, r4
 8000676:	d200      	bcs.n	800067a <__aeabi_ddiv+0x45e>
 8000678:	e08d      	b.n	8000796 <__aeabi_ddiv+0x57a>
 800067a:	428e      	cmp	r6, r1
 800067c:	d200      	bcs.n	8000680 <__aeabi_ddiv+0x464>
 800067e:	e0a3      	b.n	80007c8 <__aeabi_ddiv+0x5ac>
 8000680:	d100      	bne.n	8000684 <__aeabi_ddiv+0x468>
 8000682:	e0b3      	b.n	80007ec <__aeabi_ddiv+0x5d0>
 8000684:	0005      	movs	r5, r0
 8000686:	e6f5      	b.n	8000474 <__aeabi_ddiv+0x258>
 8000688:	42aa      	cmp	r2, r5
 800068a:	d900      	bls.n	800068e <__aeabi_ddiv+0x472>
 800068c:	e639      	b.n	8000302 <__aeabi_ddiv+0xe6>
 800068e:	4643      	mov	r3, r8
 8000690:	07de      	lsls	r6, r3, #31
 8000692:	0858      	lsrs	r0, r3, #1
 8000694:	086b      	lsrs	r3, r5, #1
 8000696:	431e      	orrs	r6, r3
 8000698:	07ed      	lsls	r5, r5, #31
 800069a:	e639      	b.n	8000310 <__aeabi_ddiv+0xf4>
 800069c:	4648      	mov	r0, r9
 800069e:	f000 f90f 	bl	80008c0 <__clzsi2>
 80006a2:	0001      	movs	r1, r0
 80006a4:	0002      	movs	r2, r0
 80006a6:	3115      	adds	r1, #21
 80006a8:	3220      	adds	r2, #32
 80006aa:	291c      	cmp	r1, #28
 80006ac:	dc00      	bgt.n	80006b0 <__aeabi_ddiv+0x494>
 80006ae:	e72c      	b.n	800050a <__aeabi_ddiv+0x2ee>
 80006b0:	464b      	mov	r3, r9
 80006b2:	3808      	subs	r0, #8
 80006b4:	4083      	lsls	r3, r0
 80006b6:	2500      	movs	r5, #0
 80006b8:	4698      	mov	r8, r3
 80006ba:	e732      	b.n	8000522 <__aeabi_ddiv+0x306>
 80006bc:	f000 f900 	bl	80008c0 <__clzsi2>
 80006c0:	0003      	movs	r3, r0
 80006c2:	001a      	movs	r2, r3
 80006c4:	3215      	adds	r2, #21
 80006c6:	3020      	adds	r0, #32
 80006c8:	2a1c      	cmp	r2, #28
 80006ca:	dc00      	bgt.n	80006ce <__aeabi_ddiv+0x4b2>
 80006cc:	e700      	b.n	80004d0 <__aeabi_ddiv+0x2b4>
 80006ce:	4654      	mov	r4, sl
 80006d0:	3b08      	subs	r3, #8
 80006d2:	2200      	movs	r2, #0
 80006d4:	409c      	lsls	r4, r3
 80006d6:	e705      	b.n	80004e4 <__aeabi_ddiv+0x2c8>
 80006d8:	1936      	adds	r6, r6, r4
 80006da:	3b01      	subs	r3, #1
 80006dc:	42b4      	cmp	r4, r6
 80006de:	d900      	bls.n	80006e2 <__aeabi_ddiv+0x4c6>
 80006e0:	e6a6      	b.n	8000430 <__aeabi_ddiv+0x214>
 80006e2:	42b2      	cmp	r2, r6
 80006e4:	d800      	bhi.n	80006e8 <__aeabi_ddiv+0x4cc>
 80006e6:	e6a3      	b.n	8000430 <__aeabi_ddiv+0x214>
 80006e8:	1e83      	subs	r3, r0, #2
 80006ea:	1936      	adds	r6, r6, r4
 80006ec:	e6a0      	b.n	8000430 <__aeabi_ddiv+0x214>
 80006ee:	1909      	adds	r1, r1, r4
 80006f0:	3d01      	subs	r5, #1
 80006f2:	428c      	cmp	r4, r1
 80006f4:	d900      	bls.n	80006f8 <__aeabi_ddiv+0x4dc>
 80006f6:	e68d      	b.n	8000414 <__aeabi_ddiv+0x1f8>
 80006f8:	428a      	cmp	r2, r1
 80006fa:	d800      	bhi.n	80006fe <__aeabi_ddiv+0x4e2>
 80006fc:	e68a      	b.n	8000414 <__aeabi_ddiv+0x1f8>
 80006fe:	1e85      	subs	r5, r0, #2
 8000700:	1909      	adds	r1, r1, r4
 8000702:	e687      	b.n	8000414 <__aeabi_ddiv+0x1f8>
 8000704:	230f      	movs	r3, #15
 8000706:	402b      	ands	r3, r5
 8000708:	2b04      	cmp	r3, #4
 800070a:	d100      	bne.n	800070e <__aeabi_ddiv+0x4f2>
 800070c:	e6bc      	b.n	8000488 <__aeabi_ddiv+0x26c>
 800070e:	2305      	movs	r3, #5
 8000710:	425b      	negs	r3, r3
 8000712:	42ab      	cmp	r3, r5
 8000714:	419b      	sbcs	r3, r3
 8000716:	3504      	adds	r5, #4
 8000718:	425b      	negs	r3, r3
 800071a:	08ed      	lsrs	r5, r5, #3
 800071c:	4498      	add	r8, r3
 800071e:	e6b4      	b.n	800048a <__aeabi_ddiv+0x26e>
 8000720:	42af      	cmp	r7, r5
 8000722:	d900      	bls.n	8000726 <__aeabi_ddiv+0x50a>
 8000724:	e660      	b.n	80003e8 <__aeabi_ddiv+0x1cc>
 8000726:	4282      	cmp	r2, r0
 8000728:	d804      	bhi.n	8000734 <__aeabi_ddiv+0x518>
 800072a:	d000      	beq.n	800072e <__aeabi_ddiv+0x512>
 800072c:	e65c      	b.n	80003e8 <__aeabi_ddiv+0x1cc>
 800072e:	42ae      	cmp	r6, r5
 8000730:	d800      	bhi.n	8000734 <__aeabi_ddiv+0x518>
 8000732:	e659      	b.n	80003e8 <__aeabi_ddiv+0x1cc>
 8000734:	2302      	movs	r3, #2
 8000736:	425b      	negs	r3, r3
 8000738:	469c      	mov	ip, r3
 800073a:	9b00      	ldr	r3, [sp, #0]
 800073c:	44e0      	add	r8, ip
 800073e:	469c      	mov	ip, r3
 8000740:	4465      	add	r5, ip
 8000742:	429d      	cmp	r5, r3
 8000744:	419b      	sbcs	r3, r3
 8000746:	425b      	negs	r3, r3
 8000748:	191b      	adds	r3, r3, r4
 800074a:	18c0      	adds	r0, r0, r3
 800074c:	e64d      	b.n	80003ea <__aeabi_ddiv+0x1ce>
 800074e:	428a      	cmp	r2, r1
 8000750:	d800      	bhi.n	8000754 <__aeabi_ddiv+0x538>
 8000752:	e60e      	b.n	8000372 <__aeabi_ddiv+0x156>
 8000754:	1e83      	subs	r3, r0, #2
 8000756:	1909      	adds	r1, r1, r4
 8000758:	e60b      	b.n	8000372 <__aeabi_ddiv+0x156>
 800075a:	428a      	cmp	r2, r1
 800075c:	d800      	bhi.n	8000760 <__aeabi_ddiv+0x544>
 800075e:	e5f4      	b.n	800034a <__aeabi_ddiv+0x12e>
 8000760:	1e83      	subs	r3, r0, #2
 8000762:	4698      	mov	r8, r3
 8000764:	1909      	adds	r1, r1, r4
 8000766:	e5f0      	b.n	800034a <__aeabi_ddiv+0x12e>
 8000768:	4925      	ldr	r1, [pc, #148]	; (8000800 <__aeabi_ddiv+0x5e4>)
 800076a:	0028      	movs	r0, r5
 800076c:	4459      	add	r1, fp
 800076e:	408d      	lsls	r5, r1
 8000770:	4642      	mov	r2, r8
 8000772:	408a      	lsls	r2, r1
 8000774:	1e69      	subs	r1, r5, #1
 8000776:	418d      	sbcs	r5, r1
 8000778:	4641      	mov	r1, r8
 800077a:	40d8      	lsrs	r0, r3
 800077c:	40d9      	lsrs	r1, r3
 800077e:	4302      	orrs	r2, r0
 8000780:	432a      	orrs	r2, r5
 8000782:	000b      	movs	r3, r1
 8000784:	0751      	lsls	r1, r2, #29
 8000786:	d100      	bne.n	800078a <__aeabi_ddiv+0x56e>
 8000788:	e751      	b.n	800062e <__aeabi_ddiv+0x412>
 800078a:	210f      	movs	r1, #15
 800078c:	4011      	ands	r1, r2
 800078e:	2904      	cmp	r1, #4
 8000790:	d000      	beq.n	8000794 <__aeabi_ddiv+0x578>
 8000792:	e746      	b.n	8000622 <__aeabi_ddiv+0x406>
 8000794:	e74b      	b.n	800062e <__aeabi_ddiv+0x412>
 8000796:	0005      	movs	r5, r0
 8000798:	428e      	cmp	r6, r1
 800079a:	d000      	beq.n	800079e <__aeabi_ddiv+0x582>
 800079c:	e66a      	b.n	8000474 <__aeabi_ddiv+0x258>
 800079e:	9a00      	ldr	r2, [sp, #0]
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d000      	beq.n	80007a6 <__aeabi_ddiv+0x58a>
 80007a4:	e666      	b.n	8000474 <__aeabi_ddiv+0x258>
 80007a6:	e667      	b.n	8000478 <__aeabi_ddiv+0x25c>
 80007a8:	4a16      	ldr	r2, [pc, #88]	; (8000804 <__aeabi_ddiv+0x5e8>)
 80007aa:	445a      	add	r2, fp
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	dc00      	bgt.n	80007b2 <__aeabi_ddiv+0x596>
 80007b0:	e710      	b.n	80005d4 <__aeabi_ddiv+0x3b8>
 80007b2:	2301      	movs	r3, #1
 80007b4:	2500      	movs	r5, #0
 80007b6:	4498      	add	r8, r3
 80007b8:	e667      	b.n	800048a <__aeabi_ddiv+0x26e>
 80007ba:	075d      	lsls	r5, r3, #29
 80007bc:	025b      	lsls	r3, r3, #9
 80007be:	0b1c      	lsrs	r4, r3, #12
 80007c0:	08d2      	lsrs	r2, r2, #3
 80007c2:	2300      	movs	r3, #0
 80007c4:	4315      	orrs	r5, r2
 80007c6:	e580      	b.n	80002ca <__aeabi_ddiv+0xae>
 80007c8:	9800      	ldr	r0, [sp, #0]
 80007ca:	3d02      	subs	r5, #2
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	4282      	cmp	r2, r0
 80007d0:	41bf      	sbcs	r7, r7
 80007d2:	427f      	negs	r7, r7
 80007d4:	193c      	adds	r4, r7, r4
 80007d6:	1936      	adds	r6, r6, r4
 80007d8:	9200      	str	r2, [sp, #0]
 80007da:	e7dd      	b.n	8000798 <__aeabi_ddiv+0x57c>
 80007dc:	2480      	movs	r4, #128	; 0x80
 80007de:	4643      	mov	r3, r8
 80007e0:	0324      	lsls	r4, r4, #12
 80007e2:	431c      	orrs	r4, r3
 80007e4:	0324      	lsls	r4, r4, #12
 80007e6:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <__aeabi_ddiv+0x5dc>)
 80007e8:	0b24      	lsrs	r4, r4, #12
 80007ea:	e56e      	b.n	80002ca <__aeabi_ddiv+0xae>
 80007ec:	9a00      	ldr	r2, [sp, #0]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d3ea      	bcc.n	80007c8 <__aeabi_ddiv+0x5ac>
 80007f2:	0005      	movs	r5, r0
 80007f4:	e7d3      	b.n	800079e <__aeabi_ddiv+0x582>
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	000007ff 	.word	0x000007ff
 80007fc:	0000043e 	.word	0x0000043e
 8000800:	0000041e 	.word	0x0000041e
 8000804:	000003ff 	.word	0x000003ff

08000808 <__aeabi_d2iz>:
 8000808:	000a      	movs	r2, r1
 800080a:	b530      	push	{r4, r5, lr}
 800080c:	4c13      	ldr	r4, [pc, #76]	; (800085c <__aeabi_d2iz+0x54>)
 800080e:	0053      	lsls	r3, r2, #1
 8000810:	0309      	lsls	r1, r1, #12
 8000812:	0005      	movs	r5, r0
 8000814:	0b09      	lsrs	r1, r1, #12
 8000816:	2000      	movs	r0, #0
 8000818:	0d5b      	lsrs	r3, r3, #21
 800081a:	0fd2      	lsrs	r2, r2, #31
 800081c:	42a3      	cmp	r3, r4
 800081e:	dd04      	ble.n	800082a <__aeabi_d2iz+0x22>
 8000820:	480f      	ldr	r0, [pc, #60]	; (8000860 <__aeabi_d2iz+0x58>)
 8000822:	4283      	cmp	r3, r0
 8000824:	dd02      	ble.n	800082c <__aeabi_d2iz+0x24>
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <__aeabi_d2iz+0x5c>)
 8000828:	18d0      	adds	r0, r2, r3
 800082a:	bd30      	pop	{r4, r5, pc}
 800082c:	2080      	movs	r0, #128	; 0x80
 800082e:	0340      	lsls	r0, r0, #13
 8000830:	4301      	orrs	r1, r0
 8000832:	480d      	ldr	r0, [pc, #52]	; (8000868 <__aeabi_d2iz+0x60>)
 8000834:	1ac0      	subs	r0, r0, r3
 8000836:	281f      	cmp	r0, #31
 8000838:	dd08      	ble.n	800084c <__aeabi_d2iz+0x44>
 800083a:	480c      	ldr	r0, [pc, #48]	; (800086c <__aeabi_d2iz+0x64>)
 800083c:	1ac3      	subs	r3, r0, r3
 800083e:	40d9      	lsrs	r1, r3
 8000840:	000b      	movs	r3, r1
 8000842:	4258      	negs	r0, r3
 8000844:	2a00      	cmp	r2, #0
 8000846:	d1f0      	bne.n	800082a <__aeabi_d2iz+0x22>
 8000848:	0018      	movs	r0, r3
 800084a:	e7ee      	b.n	800082a <__aeabi_d2iz+0x22>
 800084c:	4c08      	ldr	r4, [pc, #32]	; (8000870 <__aeabi_d2iz+0x68>)
 800084e:	40c5      	lsrs	r5, r0
 8000850:	46a4      	mov	ip, r4
 8000852:	4463      	add	r3, ip
 8000854:	4099      	lsls	r1, r3
 8000856:	000b      	movs	r3, r1
 8000858:	432b      	orrs	r3, r5
 800085a:	e7f2      	b.n	8000842 <__aeabi_d2iz+0x3a>
 800085c:	000003fe 	.word	0x000003fe
 8000860:	0000041d 	.word	0x0000041d
 8000864:	7fffffff 	.word	0x7fffffff
 8000868:	00000433 	.word	0x00000433
 800086c:	00000413 	.word	0x00000413
 8000870:	fffffbed 	.word	0xfffffbed

08000874 <__aeabi_ui2d>:
 8000874:	b510      	push	{r4, lr}
 8000876:	1e04      	subs	r4, r0, #0
 8000878:	d010      	beq.n	800089c <__aeabi_ui2d+0x28>
 800087a:	f000 f821 	bl	80008c0 <__clzsi2>
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <__aeabi_ui2d+0x48>)
 8000880:	1a1b      	subs	r3, r3, r0
 8000882:	280a      	cmp	r0, #10
 8000884:	dc11      	bgt.n	80008aa <__aeabi_ui2d+0x36>
 8000886:	220b      	movs	r2, #11
 8000888:	0021      	movs	r1, r4
 800088a:	1a12      	subs	r2, r2, r0
 800088c:	40d1      	lsrs	r1, r2
 800088e:	3015      	adds	r0, #21
 8000890:	030a      	lsls	r2, r1, #12
 8000892:	055b      	lsls	r3, r3, #21
 8000894:	4084      	lsls	r4, r0
 8000896:	0b12      	lsrs	r2, r2, #12
 8000898:	0d5b      	lsrs	r3, r3, #21
 800089a:	e001      	b.n	80008a0 <__aeabi_ui2d+0x2c>
 800089c:	2300      	movs	r3, #0
 800089e:	2200      	movs	r2, #0
 80008a0:	051b      	lsls	r3, r3, #20
 80008a2:	4313      	orrs	r3, r2
 80008a4:	0020      	movs	r0, r4
 80008a6:	0019      	movs	r1, r3
 80008a8:	bd10      	pop	{r4, pc}
 80008aa:	0022      	movs	r2, r4
 80008ac:	380b      	subs	r0, #11
 80008ae:	4082      	lsls	r2, r0
 80008b0:	055b      	lsls	r3, r3, #21
 80008b2:	0312      	lsls	r2, r2, #12
 80008b4:	2400      	movs	r4, #0
 80008b6:	0b12      	lsrs	r2, r2, #12
 80008b8:	0d5b      	lsrs	r3, r3, #21
 80008ba:	e7f1      	b.n	80008a0 <__aeabi_ui2d+0x2c>
 80008bc:	0000041e 	.word	0x0000041e

080008c0 <__clzsi2>:
 80008c0:	211c      	movs	r1, #28
 80008c2:	2301      	movs	r3, #1
 80008c4:	041b      	lsls	r3, r3, #16
 80008c6:	4298      	cmp	r0, r3
 80008c8:	d301      	bcc.n	80008ce <__clzsi2+0xe>
 80008ca:	0c00      	lsrs	r0, r0, #16
 80008cc:	3910      	subs	r1, #16
 80008ce:	0a1b      	lsrs	r3, r3, #8
 80008d0:	4298      	cmp	r0, r3
 80008d2:	d301      	bcc.n	80008d8 <__clzsi2+0x18>
 80008d4:	0a00      	lsrs	r0, r0, #8
 80008d6:	3908      	subs	r1, #8
 80008d8:	091b      	lsrs	r3, r3, #4
 80008da:	4298      	cmp	r0, r3
 80008dc:	d301      	bcc.n	80008e2 <__clzsi2+0x22>
 80008de:	0900      	lsrs	r0, r0, #4
 80008e0:	3904      	subs	r1, #4
 80008e2:	a202      	add	r2, pc, #8	; (adr r2, 80008ec <__clzsi2+0x2c>)
 80008e4:	5c10      	ldrb	r0, [r2, r0]
 80008e6:	1840      	adds	r0, r0, r1
 80008e8:	4770      	bx	lr
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	02020304 	.word	0x02020304
 80008f0:	01010101 	.word	0x01010101
	...

080008fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000902:	f000 fbbf 	bl	8001084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000906:	f000 f9a7 	bl	8000c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090a:	f000 fa47 	bl	8000d9c <MX_GPIO_Init>
  MX_TIM3_Init();
 800090e:	f000 f9ef 	bl	8000cf0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Установить все линии в первоначальное положение
  HAL_GPIO_WritePin(STP_SR_LED_nCLR_GPIO_Port, STP_SR_LED_nCLR_Pin, GPIO_PIN_SET);
 8000912:	2390      	movs	r3, #144	; 0x90
 8000914:	05db      	lsls	r3, r3, #23
 8000916:	2201      	movs	r2, #1
 8000918:	2140      	movs	r1, #64	; 0x40
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fe6c 	bl	80015f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STP_SR_LED_CLK_GPIO_Port, STP_SR_LED_CLK_Pin, GPIO_PIN_RESET);
 8000920:	2390      	movs	r3, #144	; 0x90
 8000922:	05db      	lsls	r3, r3, #23
 8000924:	2200      	movs	r2, #0
 8000926:	2180      	movs	r1, #128	; 0x80
 8000928:	0018      	movs	r0, r3
 800092a:	f000 fe65 	bl	80015f8 <HAL_GPIO_WritePin>

  ClearLEDSR();
 800092e:	f000 fa6d 	bl	8000e0c <ClearLEDSR>

  // Запустить таймер
  if (m_USE_TIMER){

  HAL_TIM_Base_Start_IT(&htim3);
 8000932:	4bb1      	ldr	r3, [pc, #708]	; (8000bf8 <main+0x2fc>)
 8000934:	0018      	movs	r0, r3
 8000936:	f001 fb9f 	bl	8002078 <HAL_TIM_Base_Start_IT>

    /* USER CODE BEGIN 3 */

	  //сформировали что отобразить

	  if (g_u8StepNumber == 0){
 800093a:	4bb0      	ldr	r3, [pc, #704]	; (8000bfc <main+0x300>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d11f      	bne.n	8000982 <main+0x86>

		  if (g_u8ActiveRawColor == m_GREEN_COLOR) {
 8000942:	4baf      	ldr	r3, [pc, #700]	; (8000c00 <main+0x304>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d11b      	bne.n	8000982 <main+0x86>
			  g_u8LEDCallGreenData = (m_LED_ON << g_au8GreenCalls[g_u8ActiveRaw]);
 800094a:	4bae      	ldr	r3, [pc, #696]	; (8000c04 <main+0x308>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	001a      	movs	r2, r3
 8000950:	4bad      	ldr	r3, [pc, #692]	; (8000c08 <main+0x30c>)
 8000952:	5c9b      	ldrb	r3, [r3, r2]
 8000954:	001a      	movs	r2, r3
 8000956:	2301      	movs	r3, #1
 8000958:	4093      	lsls	r3, r2
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4bab      	ldr	r3, [pc, #684]	; (8000c0c <main+0x310>)
 800095e:	701a      	strb	r2, [r3, #0]
			  g_u8LEDRespGreenData = (m_LED_ON << g_au8GreenResponses[g_u8ActiveRaw]);
 8000960:	4ba8      	ldr	r3, [pc, #672]	; (8000c04 <main+0x308>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	001a      	movs	r2, r3
 8000966:	4baa      	ldr	r3, [pc, #680]	; (8000c10 <main+0x314>)
 8000968:	5c9b      	ldrb	r3, [r3, r2]
 800096a:	001a      	movs	r2, r3
 800096c:	2301      	movs	r3, #1
 800096e:	4093      	lsls	r3, r2
 8000970:	b2da      	uxtb	r2, r3
 8000972:	4ba8      	ldr	r3, [pc, #672]	; (8000c14 <main+0x318>)
 8000974:	701a      	strb	r2, [r3, #0]
			  g_u8LEDCallRedData = m_LED_OFF;
 8000976:	4ba8      	ldr	r3, [pc, #672]	; (8000c18 <main+0x31c>)
 8000978:	2200      	movs	r2, #0
 800097a:	701a      	strb	r2, [r3, #0]
			  g_u8LEDRespRedData = m_LED_OFF;
 800097c:	4ba7      	ldr	r3, [pc, #668]	; (8000c1c <main+0x320>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
//			  g_u8LEDCallGreenData = m_LED_OFF;
//			  g_u8LEDRespGreenData = m_LED_OFF;
//		  }
	  }

	  if (g_u8StepNumber != 0) {
 8000982:	4b9e      	ldr	r3, [pc, #632]	; (8000bfc <main+0x300>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d040      	beq.n	8000a0c <main+0x110>

		  g_u8BinaryGreen = g_u8BinaryGreen | (m_SR_DATA_bm << g_au8GreenCalls[m_NUMBER_OF_LINES - g_u8StepNumber]); /*для того, чтобы осталось перемигиваться раскомментить*/
 800098a:	4b9c      	ldr	r3, [pc, #624]	; (8000bfc <main+0x300>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	001a      	movs	r2, r3
 8000990:	2308      	movs	r3, #8
 8000992:	1a9b      	subs	r3, r3, r2
 8000994:	4a9c      	ldr	r2, [pc, #624]	; (8000c08 <main+0x30c>)
 8000996:	5cd3      	ldrb	r3, [r2, r3]
 8000998:	001a      	movs	r2, r3
 800099a:	2301      	movs	r3, #1
 800099c:	4093      	lsls	r3, r2
 800099e:	b25a      	sxtb	r2, r3
 80009a0:	4b9f      	ldr	r3, [pc, #636]	; (8000c20 <main+0x324>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b25b      	sxtb	r3, r3
 80009a6:	4313      	orrs	r3, r2
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	4b9c      	ldr	r3, [pc, #624]	; (8000c20 <main+0x324>)
 80009ae:	701a      	strb	r2, [r3, #0]

	//	  g_u8BinaryRed = g_u8BinaryRed | (m_SR_DATA_bm << g_au8RedCalls[m_NUMBER_OF_LINES - g_u8StepNumber]);

		  if (g_u8ActiveRawColor == m_GREEN_COLOR) {
 80009b0:	4b93      	ldr	r3, [pc, #588]	; (8000c00 <main+0x304>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d129      	bne.n	8000a0c <main+0x110>

			  g_u8LEDCallGreenData = (m_LED_ON << g_au8GreenCalls[g_u8ActiveRaw]) | (g_u8BinaryGreen);
 80009b8:	4b92      	ldr	r3, [pc, #584]	; (8000c04 <main+0x308>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	001a      	movs	r2, r3
 80009be:	4b92      	ldr	r3, [pc, #584]	; (8000c08 <main+0x30c>)
 80009c0:	5c9b      	ldrb	r3, [r3, r2]
 80009c2:	001a      	movs	r2, r3
 80009c4:	2301      	movs	r3, #1
 80009c6:	4093      	lsls	r3, r2
 80009c8:	b25a      	sxtb	r2, r3
 80009ca:	4b95      	ldr	r3, [pc, #596]	; (8000c20 <main+0x324>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b25b      	sxtb	r3, r3
 80009d0:	4313      	orrs	r3, r2
 80009d2:	b25b      	sxtb	r3, r3
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b8d      	ldr	r3, [pc, #564]	; (8000c0c <main+0x310>)
 80009d8:	701a      	strb	r2, [r3, #0]
			  g_u8LEDRespGreenData = (m_LED_ON << g_au8GreenResponses[g_u8ActiveRaw]) | (g_u8BinaryGreen);
 80009da:	4b8a      	ldr	r3, [pc, #552]	; (8000c04 <main+0x308>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	001a      	movs	r2, r3
 80009e0:	4b8b      	ldr	r3, [pc, #556]	; (8000c10 <main+0x314>)
 80009e2:	5c9b      	ldrb	r3, [r3, r2]
 80009e4:	001a      	movs	r2, r3
 80009e6:	2301      	movs	r3, #1
 80009e8:	4093      	lsls	r3, r2
 80009ea:	b25a      	sxtb	r2, r3
 80009ec:	4b8c      	ldr	r3, [pc, #560]	; (8000c20 <main+0x324>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b25b      	sxtb	r3, r3
 80009f2:	4313      	orrs	r3, r2
 80009f4:	b25b      	sxtb	r3, r3
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b86      	ldr	r3, [pc, #536]	; (8000c14 <main+0x318>)
 80009fa:	701a      	strb	r2, [r3, #0]
			  g_u8LEDCallRedData = m_LED_OFF | (g_u8BinaryRed);
 80009fc:	4b89      	ldr	r3, [pc, #548]	; (8000c24 <main+0x328>)
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	4b85      	ldr	r3, [pc, #532]	; (8000c18 <main+0x31c>)
 8000a02:	701a      	strb	r2, [r3, #0]
			  g_u8LEDRespRedData = m_LED_OFF | (g_u8BinaryRed);
 8000a04:	4b87      	ldr	r3, [pc, #540]	; (8000c24 <main+0x328>)
 8000a06:	781a      	ldrb	r2, [r3, #0]
 8000a08:	4b84      	ldr	r3, [pc, #528]	; (8000c1c <main+0x320>)
 8000a0a:	701a      	strb	r2, [r3, #0]
//			  g_u8LEDCallGreenData = m_LED_OFF | (g_u8BinaryGreen);
//			  g_u8LEDRespGreenData = m_LED_OFF | (g_u8BinaryGreen);
//   	      }
      }

	  if (g_u8ActiveRawColor == m_YELLOW_COLOR) {
 8000a0c:	4b7c      	ldr	r3, [pc, #496]	; (8000c00 <main+0x304>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d12b      	bne.n	8000a6c <main+0x170>

			 g_u8LEDCallGreenData = m_LED_ON << g_au8GreenCalls[g_u8ActiveRaw];
 8000a14:	4b7b      	ldr	r3, [pc, #492]	; (8000c04 <main+0x308>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	001a      	movs	r2, r3
 8000a1a:	4b7b      	ldr	r3, [pc, #492]	; (8000c08 <main+0x30c>)
 8000a1c:	5c9b      	ldrb	r3, [r3, r2]
 8000a1e:	001a      	movs	r2, r3
 8000a20:	2301      	movs	r3, #1
 8000a22:	4093      	lsls	r3, r2
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b79      	ldr	r3, [pc, #484]	; (8000c0c <main+0x310>)
 8000a28:	701a      	strb	r2, [r3, #0]
			 g_u8LEDRespGreenData = m_LED_ON << g_au8GreenResponses[g_u8ActiveRaw];
 8000a2a:	4b76      	ldr	r3, [pc, #472]	; (8000c04 <main+0x308>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	001a      	movs	r2, r3
 8000a30:	4b77      	ldr	r3, [pc, #476]	; (8000c10 <main+0x314>)
 8000a32:	5c9b      	ldrb	r3, [r3, r2]
 8000a34:	001a      	movs	r2, r3
 8000a36:	2301      	movs	r3, #1
 8000a38:	4093      	lsls	r3, r2
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	4b75      	ldr	r3, [pc, #468]	; (8000c14 <main+0x318>)
 8000a3e:	701a      	strb	r2, [r3, #0]
			 g_u8LEDCallRedData = m_LED_ON << g_au8RedCalls[g_u8ActiveRaw];
 8000a40:	4b70      	ldr	r3, [pc, #448]	; (8000c04 <main+0x308>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	001a      	movs	r2, r3
 8000a46:	4b78      	ldr	r3, [pc, #480]	; (8000c28 <main+0x32c>)
 8000a48:	5c9b      	ldrb	r3, [r3, r2]
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	4093      	lsls	r3, r2
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4b71      	ldr	r3, [pc, #452]	; (8000c18 <main+0x31c>)
 8000a54:	701a      	strb	r2, [r3, #0]
			 g_u8LEDRespRedData = m_LED_ON << g_au8RedResponses[g_u8ActiveRaw];
 8000a56:	4b6b      	ldr	r3, [pc, #428]	; (8000c04 <main+0x308>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	4b73      	ldr	r3, [pc, #460]	; (8000c2c <main+0x330>)
 8000a5e:	5c9b      	ldrb	r3, [r3, r2]
 8000a60:	001a      	movs	r2, r3
 8000a62:	2301      	movs	r3, #1
 8000a64:	4093      	lsls	r3, r2
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	4b6c      	ldr	r3, [pc, #432]	; (8000c1c <main+0x320>)
 8000a6a:	701a      	strb	r2, [r3, #0]
	  }

	  //отобразили

	  if (g_u8NeedToDisplayLEDData) {
 8000a6c:	4b70      	ldr	r3, [pc, #448]	; (8000c30 <main+0x334>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d04d      	beq.n	8000b10 <main+0x214>
		  ClearLEDSR();
 8000a74:	f000 f9ca 	bl	8000e0c <ClearLEDSR>
		  LoadLEDSR();
 8000a78:	f000 f9dc 	bl	8000e34 <LoadLEDSR>

		  /*AHBPrescTable * APBPrescTable */
		  g_s32TimePeriod = (SystemCoreClock) / (m_CLOCK_PRESCALER * m_TIME_TRIGGERING_LED_MS * 10e-3);
 8000a7c:	4b6d      	ldr	r3, [pc, #436]	; (8000c34 <main+0x338>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	0018      	movs	r0, r3
 8000a82:	f7ff fef7 	bl	8000874 <__aeabi_ui2d>
 8000a86:	2200      	movs	r2, #0
 8000a88:	4b6b      	ldr	r3, [pc, #428]	; (8000c38 <main+0x33c>)
 8000a8a:	f7ff fbc7 	bl	800021c <__aeabi_ddiv>
 8000a8e:	0002      	movs	r2, r0
 8000a90:	000b      	movs	r3, r1
 8000a92:	0010      	movs	r0, r2
 8000a94:	0019      	movs	r1, r3
 8000a96:	f7ff feb7 	bl	8000808 <__aeabi_d2iz>
 8000a9a:	0002      	movs	r2, r0
 8000a9c:	4b67      	ldr	r3, [pc, #412]	; (8000c3c <main+0x340>)
 8000a9e:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_AUTORELOAD(&htim3, g_s32TimePeriod);
 8000aa0:	4b66      	ldr	r3, [pc, #408]	; (8000c3c <main+0x340>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b54      	ldr	r3, [pc, #336]	; (8000bf8 <main+0x2fc>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aaa:	4b64      	ldr	r3, [pc, #400]	; (8000c3c <main+0x340>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	001a      	movs	r2, r3
 8000ab0:	4b51      	ldr	r3, [pc, #324]	; (8000bf8 <main+0x2fc>)
 8000ab2:	60da      	str	r2, [r3, #12]

		  if (m_USE_TIMER) {
			  g_u8NeedToDisplayLEDData = 0;
 8000ab4:	4b5e      	ldr	r3, [pc, #376]	; (8000c30 <main+0x334>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]

	//	  g_u8ActiveRawColor++;

	//	  if (g_u8ActiveRawColor == m_NUMBER_OF_COLORS) {
	//		  g_u8ActiveRawColor = 1;
			  g_u8ActiveRaw++;
 8000aba:	4b52      	ldr	r3, [pc, #328]	; (8000c04 <main+0x308>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4b50      	ldr	r3, [pc, #320]	; (8000c04 <main+0x308>)
 8000ac4:	701a      	strb	r2, [r3, #0]
	//	  }
		  if (g_u8ActiveRaw + g_u8StepNumber == m_NUMBER_OF_LINES) {
 8000ac6:	4b4f      	ldr	r3, [pc, #316]	; (8000c04 <main+0x308>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	001a      	movs	r2, r3
 8000acc:	4b4b      	ldr	r3, [pc, #300]	; (8000bfc <main+0x300>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	18d3      	adds	r3, r2, r3
 8000ad2:	2b08      	cmp	r3, #8
 8000ad4:	d11c      	bne.n	8000b10 <main+0x214>
			  g_u8ActiveRaw = 0;
 8000ad6:	4b4b      	ldr	r3, [pc, #300]	; (8000c04 <main+0x308>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
			  g_u8StepNumber++;
 8000adc:	4b47      	ldr	r3, [pc, #284]	; (8000bfc <main+0x300>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	4b45      	ldr	r3, [pc, #276]	; (8000bfc <main+0x300>)
 8000ae6:	701a      	strb	r2, [r3, #0]
			  if (g_u8StepNumber == m_NUMBER_OF_LINES) {
 8000ae8:	4b44      	ldr	r3, [pc, #272]	; (8000bfc <main+0x300>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b08      	cmp	r3, #8
 8000aee:	d108      	bne.n	8000b02 <main+0x206>
				  //break;
				  g_u8StepNumber = 0;
 8000af0:	4b42      	ldr	r3, [pc, #264]	; (8000bfc <main+0x300>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
				  g_u8BinaryGreen = 0b00000000;
 8000af6:	4b4a      	ldr	r3, [pc, #296]	; (8000c20 <main+0x324>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
				  g_u8BinaryRed = 0b00000000;
 8000afc:	4b49      	ldr	r3, [pc, #292]	; (8000c24 <main+0x328>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
			  }
			//	  g_u8AllLinesUnicolor++;
			  if (g_u8AllLinesUnicolor == m_NUMBER_OF_COLORS) {
 8000b02:	4b4f      	ldr	r3, [pc, #316]	; (8000c40 <main+0x344>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	d102      	bne.n	8000b10 <main+0x214>
				  g_u8AllLinesUnicolor = 0;
 8000b0a:	4b4d      	ldr	r3, [pc, #308]	; (8000c40 <main+0x344>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
			  }
			  //  g_u8DisplayAllLinesUnicolor = 1;
		  }
	  }

	  if (g_u8AllLinesUnicolor == m_GREEN_COLOR) {
 8000b10:	4b4b      	ldr	r3, [pc, #300]	; (8000c40 <main+0x344>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d10b      	bne.n	8000b30 <main+0x234>

		  g_u8AllLEDCallGreenData = m_LED_ON;
 8000b18:	4b4a      	ldr	r3, [pc, #296]	; (8000c44 <main+0x348>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDRespGreenData = m_LED_ON;
 8000b1e:	4b4a      	ldr	r3, [pc, #296]	; (8000c48 <main+0x34c>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDCallRedData = m_LED_OFF;
 8000b24:	4b49      	ldr	r3, [pc, #292]	; (8000c4c <main+0x350>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDRespRedData = m_LED_OFF;
 8000b2a:	4b49      	ldr	r3, [pc, #292]	; (8000c50 <main+0x354>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
	  }

	  if (g_u8AllLinesUnicolor == m_RED_COLOR) {
 8000b30:	4b43      	ldr	r3, [pc, #268]	; (8000c40 <main+0x344>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d10b      	bne.n	8000b50 <main+0x254>

		  g_u8AllLEDCallGreenData = m_LED_OFF;
 8000b38:	4b42      	ldr	r3, [pc, #264]	; (8000c44 <main+0x348>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDRespGreenData = m_LED_OFF;
 8000b3e:	4b42      	ldr	r3, [pc, #264]	; (8000c48 <main+0x34c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDCallRedData = m_LED_ON;
 8000b44:	4b41      	ldr	r3, [pc, #260]	; (8000c4c <main+0x350>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDRespRedData = m_LED_ON;
 8000b4a:	4b41      	ldr	r3, [pc, #260]	; (8000c50 <main+0x354>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
	  }

	  if (g_u8AllLinesUnicolor == m_YELLOW_COLOR) {
 8000b50:	4b3b      	ldr	r3, [pc, #236]	; (8000c40 <main+0x344>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d10b      	bne.n	8000b70 <main+0x274>

		  g_u8AllLEDCallGreenData = m_LED_ON;            //так горит жёлтый, в зависимости от того, что OFF будет другой цвет - цикл?? условие7??? чтобы по порядку с прерыванием
 8000b58:	4b3a      	ldr	r3, [pc, #232]	; (8000c44 <main+0x348>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDRespGreenData = m_LED_ON;
 8000b5e:	4b3a      	ldr	r3, [pc, #232]	; (8000c48 <main+0x34c>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDCallRedData = m_LED_ON;
 8000b64:	4b39      	ldr	r3, [pc, #228]	; (8000c4c <main+0x350>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDRespRedData = m_LED_ON;
 8000b6a:	4b39      	ldr	r3, [pc, #228]	; (8000c50 <main+0x354>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	701a      	strb	r2, [r3, #0]
	  }


	  if (g_u8DisplayAllLinesUnicolor) {
 8000b70:	4b38      	ldr	r3, [pc, #224]	; (8000c54 <main+0x358>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d100      	bne.n	8000b7a <main+0x27e>
 8000b78:	e6df      	b.n	800093a <main+0x3e>

	      HAL_GPIO_WritePin(LED_CALL_GREEN_SR_DATA_GPIO_Port, LED_CALL_GREEN_SR_DATA_Pin, g_u8AllLEDCallGreenData);
 8000b7a:	4b32      	ldr	r3, [pc, #200]	; (8000c44 <main+0x348>)
 8000b7c:	781a      	ldrb	r2, [r3, #0]
 8000b7e:	2390      	movs	r3, #144	; 0x90
 8000b80:	05db      	lsls	r3, r3, #23
 8000b82:	2120      	movs	r1, #32
 8000b84:	0018      	movs	r0, r3
 8000b86:	f000 fd37 	bl	80015f8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_RESP_GREEN_SR_DATA_GPIO_Port, LED_RESP_GREEN_SR_DATA_Pin, g_u8AllLEDRespGreenData);
 8000b8a:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <main+0x34c>)
 8000b8c:	781a      	ldrb	r2, [r3, #0]
 8000b8e:	2390      	movs	r3, #144	; 0x90
 8000b90:	05db      	lsls	r3, r3, #23
 8000b92:	2108      	movs	r1, #8
 8000b94:	0018      	movs	r0, r3
 8000b96:	f000 fd2f 	bl	80015f8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_CALL_RED_SR_DATA_GPIO_Port, LED_CALL_RED_SR_DATA_Pin, g_u8AllLEDCallRedData);
 8000b9a:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <main+0x350>)
 8000b9c:	781a      	ldrb	r2, [r3, #0]
 8000b9e:	2390      	movs	r3, #144	; 0x90
 8000ba0:	05db      	lsls	r3, r3, #23
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f000 fd27 	bl	80015f8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_RESP_RED_SR_DATA_GPIO_Port, LED_RESP_RED_SR_DATA_Pin, g_u8AllLEDRespRedData);
 8000baa:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <main+0x354>)
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	2390      	movs	r3, #144	; 0x90
 8000bb0:	05db      	lsls	r3, r3, #23
 8000bb2:	2104      	movs	r1, #4
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f000 fd1f 	bl	80015f8 <HAL_GPIO_WritePin>
		  for (uint8_t n = 0; n < m_NUMBER_OF_LINES; n++) {
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
 8000bc0:	e012      	b.n	8000be8 <main+0x2ec>
			  HAL_GPIO_WritePin(STP_SR_LED_CLK_GPIO_Port, STP_SR_LED_CLK_Pin, GPIO_PIN_SET);
 8000bc2:	2390      	movs	r3, #144	; 0x90
 8000bc4:	05db      	lsls	r3, r3, #23
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2180      	movs	r1, #128	; 0x80
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 fd14 	bl	80015f8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(STP_SR_LED_CLK_GPIO_Port, STP_SR_LED_CLK_Pin, GPIO_PIN_RESET);
 8000bd0:	2390      	movs	r3, #144	; 0x90
 8000bd2:	05db      	lsls	r3, r3, #23
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2180      	movs	r1, #128	; 0x80
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 fd0d 	bl	80015f8 <HAL_GPIO_WritePin>
		  for (uint8_t n = 0; n < m_NUMBER_OF_LINES; n++) {
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781a      	ldrb	r2, [r3, #0]
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	3201      	adds	r2, #1
 8000be6:	701a      	strb	r2, [r3, #0]
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b07      	cmp	r3, #7
 8000bee:	d9e8      	bls.n	8000bc2 <main+0x2c6>
		  }
		  g_u8DisplayAllLinesUnicolor = 0;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <main+0x358>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
	  if (g_u8StepNumber == 0){
 8000bf6:	e6a0      	b.n	800093a <main+0x3e>
 8000bf8:	2000004c 	.word	0x2000004c
 8000bfc:	2000009d 	.word	0x2000009d
 8000c00:	20000000 	.word	0x20000000
 8000c04:	2000009c 	.word	0x2000009c
 8000c08:	20000004 	.word	0x20000004
 8000c0c:	20000094 	.word	0x20000094
 8000c10:	2000000c 	.word	0x2000000c
 8000c14:	20000095 	.word	0x20000095
 8000c18:	20000096 	.word	0x20000096
 8000c1c:	20000097 	.word	0x20000097
 8000c20:	2000009f 	.word	0x2000009f
 8000c24:	200000a0 	.word	0x200000a0
 8000c28:	20000014 	.word	0x20000014
 8000c2c:	2000001c 	.word	0x2000001c
 8000c30:	20000002 	.word	0x20000002
 8000c34:	20000024 	.word	0x20000024
 8000c38:	40a38800 	.word	0x40a38800
 8000c3c:	200000a4 	.word	0x200000a4
 8000c40:	20000001 	.word	0x20000001
 8000c44:	20000098 	.word	0x20000098
 8000c48:	20000099 	.word	0x20000099
 8000c4c:	2000009a 	.word	0x2000009a
 8000c50:	2000009b 	.word	0x2000009b
 8000c54:	2000009e 	.word	0x2000009e

08000c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b093      	sub	sp, #76	; 0x4c
 8000c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5e:	2414      	movs	r4, #20
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	0018      	movs	r0, r3
 8000c64:	2334      	movs	r3, #52	; 0x34
 8000c66:	001a      	movs	r2, r3
 8000c68:	2100      	movs	r1, #0
 8000c6a:	f001 fe0d 	bl	8002888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	0018      	movs	r0, r3
 8000c72:	2310      	movs	r3, #16
 8000c74:	001a      	movs	r2, r3
 8000c76:	2100      	movs	r1, #0
 8000c78:	f001 fe06 	bl	8002888 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c7c:	0021      	movs	r1, r4
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2202      	movs	r2, #2
 8000c82:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2201      	movs	r2, #1
 8000c88:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2210      	movs	r2, #16
 8000c8e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2202      	movs	r2, #2
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	0212      	lsls	r2, r2, #8
 8000c9c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	2280      	movs	r2, #128	; 0x80
 8000ca2:	0312      	lsls	r2, r2, #12
 8000ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2200      	movs	r2, #0
 8000caa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f000 fcc0 	bl	8001634 <HAL_RCC_OscConfig>
 8000cb4:	1e03      	subs	r3, r0, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000cb8:	f000 f940 	bl	8000f3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2207      	movs	r2, #7
 8000cc0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f001 f831 	bl	8001d40 <HAL_RCC_ClockConfig>
 8000cde:	1e03      	subs	r3, r0, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ce2:	f000 f92b 	bl	8000f3c <Error_Handler>
  }
}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b013      	add	sp, #76	; 0x4c
 8000cec:	bd90      	pop	{r4, r7, pc}
	...

08000cf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf6:	2308      	movs	r3, #8
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	2310      	movs	r3, #16
 8000cfe:	001a      	movs	r2, r3
 8000d00:	2100      	movs	r1, #0
 8000d02:	f001 fdc1 	bl	8002888 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d06:	003b      	movs	r3, r7
 8000d08:	0018      	movs	r0, r3
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	001a      	movs	r2, r3
 8000d0e:	2100      	movs	r1, #0
 8000d10:	f001 fdba 	bl	8002888 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d14:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <MX_TIM3_Init+0xa0>)
 8000d16:	4a1f      	ldr	r2, [pc, #124]	; (8000d94 <MX_TIM3_Init+0xa4>)
 8000d18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <MX_TIM3_Init+0xa0>)
 8000d1c:	227c      	movs	r2, #124	; 0x7c
 8000d1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_TIM3_Init+0xa0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32499;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_TIM3_Init+0xa0>)
 8000d28:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <MX_TIM3_Init+0xa8>)
 8000d2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_TIM3_Init+0xa0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <MX_TIM3_Init+0xa0>)
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d38:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_TIM3_Init+0xa0>)
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f001 f94c 	bl	8001fd8 <HAL_TIM_Base_Init>
 8000d40:	1e03      	subs	r3, r0, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000d44:	f000 f8fa 	bl	8000f3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d48:	2108      	movs	r1, #8
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2280      	movs	r2, #128	; 0x80
 8000d4e:	0152      	lsls	r2, r2, #5
 8000d50:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d52:	187a      	adds	r2, r7, r1
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_TIM3_Init+0xa0>)
 8000d56:	0011      	movs	r1, r2
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f001 faf5 	bl	8002348 <HAL_TIM_ConfigClockSource>
 8000d5e:	1e03      	subs	r3, r0, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000d62:	f000 f8eb 	bl	8000f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d66:	003b      	movs	r3, r7
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6c:	003b      	movs	r3, r7
 8000d6e:	2200      	movs	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d72:	003a      	movs	r2, r7
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_TIM3_Init+0xa0>)
 8000d76:	0011      	movs	r1, r2
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f001 fcf3 	bl	8002764 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7e:	1e03      	subs	r3, r0, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000d82:	f000 f8db 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b006      	add	sp, #24
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	2000004c 	.word	0x2000004c
 8000d94:	40000400 	.word	0x40000400
 8000d98:	00007ef3 	.word	0x00007ef3

08000d9c <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	0018      	movs	r0, r3
 8000da6:	2314      	movs	r3, #20
 8000da8:	001a      	movs	r2, r3
 8000daa:	2100      	movs	r1, #0
 8000dac:	f001 fd6c 	bl	8002888 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_GPIO_Init+0x6c>)
 8000db2:	695a      	ldr	r2, [r3, #20]
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_GPIO_Init+0x6c>)
 8000db6:	2180      	movs	r1, #128	; 0x80
 8000db8:	0289      	lsls	r1, r1, #10
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	615a      	str	r2, [r3, #20]
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_GPIO_Init+0x6c>)
 8000dc0:	695a      	ldr	r2, [r3, #20]
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	029b      	lsls	r3, r3, #10
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RESP_RED_SR_DATA_Pin|LED_RESP_GREEN_SR_DATA_Pin|LED_CALL_RED_SR_DATA_Pin|LED_CALL_GREEN_SR_DATA_Pin
 8000dcc:	2390      	movs	r3, #144	; 0x90
 8000dce:	05db      	lsls	r3, r3, #23
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	21fc      	movs	r1, #252	; 0xfc
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f000 fc0f 	bl	80015f8 <HAL_GPIO_WritePin>
                          |STP_SR_LED_nCLR_Pin|STP_SR_LED_CLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RESP_RED_SR_DATA_Pin LED_RESP_GREEN_SR_DATA_Pin LED_CALL_RED_SR_DATA_Pin LED_CALL_GREEN_SR_DATA_Pin
                           STP_SR_LED_nCLR_Pin STP_SR_LED_CLK_Pin */
  GPIO_InitStruct.Pin = LED_RESP_RED_SR_DATA_Pin|LED_RESP_GREEN_SR_DATA_Pin|LED_CALL_RED_SR_DATA_Pin|LED_CALL_GREEN_SR_DATA_Pin
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	22fc      	movs	r2, #252	; 0xfc
 8000dde:	601a      	str	r2, [r3, #0]
                          |STP_SR_LED_nCLR_Pin|STP_SR_LED_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2201      	movs	r2, #1
 8000de4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2201      	movs	r2, #1
 8000df0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	1d3a      	adds	r2, r7, #4
 8000df4:	2390      	movs	r3, #144	; 0x90
 8000df6:	05db      	lsls	r3, r3, #23
 8000df8:	0011      	movs	r1, r2
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f000 fa84 	bl	8001308 <HAL_GPIO_Init>

}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b006      	add	sp, #24
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40021000 	.word	0x40021000

08000e0c <ClearLEDSR>:

/* USER CODE BEGIN 4 */

void ClearLEDSR(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(STP_SR_LED_nCLR_GPIO_Port, STP_SR_LED_nCLR_Pin, GPIO_PIN_RESET);
 8000e10:	2390      	movs	r3, #144	; 0x90
 8000e12:	05db      	lsls	r3, r3, #23
 8000e14:	2200      	movs	r2, #0
 8000e16:	2140      	movs	r1, #64	; 0x40
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f000 fbed 	bl	80015f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STP_SR_LED_nCLR_GPIO_Port, STP_SR_LED_nCLR_Pin, GPIO_PIN_SET);
 8000e1e:	2390      	movs	r3, #144	; 0x90
 8000e20:	05db      	lsls	r3, r3, #23
 8000e22:	2201      	movs	r2, #1
 8000e24:	2140      	movs	r1, #64	; 0x40
 8000e26:	0018      	movs	r0, r3
 8000e28:	f000 fbe6 	bl	80015f8 <HAL_GPIO_WritePin>
}
 8000e2c:	46c0      	nop			; (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <LoadLEDSR>:

void LoadLEDSR(void) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < m_NUMBER_OF_LINES; i++) {
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	e056      	b.n	8000ef0 <LoadLEDSR+0xbc>
        HAL_GPIO_WritePin(LED_CALL_GREEN_SR_DATA_GPIO_Port, LED_CALL_GREEN_SR_DATA_Pin, (g_u8LEDCallGreenData & m_SR_DATA_bm));
 8000e42:	4b30      	ldr	r3, [pc, #192]	; (8000f04 <LoadLEDSR+0xd0>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2201      	movs	r2, #1
 8000e48:	4013      	ands	r3, r2
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	2390      	movs	r3, #144	; 0x90
 8000e4e:	05db      	lsls	r3, r3, #23
 8000e50:	2120      	movs	r1, #32
 8000e52:	0018      	movs	r0, r3
 8000e54:	f000 fbd0 	bl	80015f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RESP_GREEN_SR_DATA_GPIO_Port, LED_RESP_GREEN_SR_DATA_Pin, (g_u8LEDRespGreenData & m_SR_DATA_bm));
 8000e58:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <LoadLEDSR+0xd4>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	4013      	ands	r3, r2
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	2390      	movs	r3, #144	; 0x90
 8000e64:	05db      	lsls	r3, r3, #23
 8000e66:	2108      	movs	r1, #8
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f000 fbc5 	bl	80015f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_CALL_RED_SR_DATA_GPIO_Port, LED_CALL_RED_SR_DATA_Pin, (g_u8LEDCallRedData & m_SR_DATA_bm));
 8000e6e:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <LoadLEDSR+0xd8>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2201      	movs	r2, #1
 8000e74:	4013      	ands	r3, r2
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	2390      	movs	r3, #144	; 0x90
 8000e7a:	05db      	lsls	r3, r3, #23
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f000 fbba 	bl	80015f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RESP_RED_SR_DATA_GPIO_Port, LED_RESP_RED_SR_DATA_Pin, (g_u8LEDRespRedData & m_SR_DATA_bm));
 8000e84:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <LoadLEDSR+0xdc>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	2390      	movs	r3, #144	; 0x90
 8000e90:	05db      	lsls	r3, r3, #23
 8000e92:	2104      	movs	r1, #4
 8000e94:	0018      	movs	r0, r3
 8000e96:	f000 fbaf 	bl	80015f8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(STP_SR_LED_CLK_GPIO_Port, STP_SR_LED_CLK_Pin, GPIO_PIN_SET);
 8000e9a:	2390      	movs	r3, #144	; 0x90
 8000e9c:	05db      	lsls	r3, r3, #23
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2180      	movs	r1, #128	; 0x80
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f000 fba8 	bl	80015f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STP_SR_LED_CLK_GPIO_Port, STP_SR_LED_CLK_Pin, GPIO_PIN_RESET);
 8000ea8:	2390      	movs	r3, #144	; 0x90
 8000eaa:	05db      	lsls	r3, r3, #23
 8000eac:	2200      	movs	r2, #0
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f000 fba1 	bl	80015f8 <HAL_GPIO_WritePin>

		g_u8LEDCallGreenData = g_u8LEDCallGreenData >> 1;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <LoadLEDSR+0xd0>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	085b      	lsrs	r3, r3, #1
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <LoadLEDSR+0xd0>)
 8000ec0:	701a      	strb	r2, [r3, #0]
		g_u8LEDRespGreenData = g_u8LEDRespGreenData >> 1;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <LoadLEDSR+0xd4>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	085b      	lsrs	r3, r3, #1
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <LoadLEDSR+0xd4>)
 8000ecc:	701a      	strb	r2, [r3, #0]
		g_u8LEDCallRedData = g_u8LEDCallRedData >> 1;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <LoadLEDSR+0xd8>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	085b      	lsrs	r3, r3, #1
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <LoadLEDSR+0xd8>)
 8000ed8:	701a      	strb	r2, [r3, #0]
		g_u8LEDRespRedData = g_u8LEDRespRedData >> 1;
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <LoadLEDSR+0xdc>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	085b      	lsrs	r3, r3, #1
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <LoadLEDSR+0xdc>)
 8000ee4:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < m_NUMBER_OF_LINES; i++) {
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	781a      	ldrb	r2, [r3, #0]
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	3201      	adds	r2, #1
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	1dfb      	adds	r3, r7, #7
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b07      	cmp	r3, #7
 8000ef6:	d9a4      	bls.n	8000e42 <LoadLEDSR+0xe>
	}
}
 8000ef8:	46c0      	nop			; (mov r8, r8)
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b002      	add	sp, #8
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	20000094 	.word	0x20000094
 8000f08:	20000095 	.word	0x20000095
 8000f0c:	20000096 	.word	0x20000096
 8000f10:	20000097 	.word	0x20000097

08000f14 <HAL_TIM_PeriodElapsedCallback>:
//	if (ActiveRawColor == m_NUMBER_OF_COLORS){
//		ActiveRawColor = 0;
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

	if (htim == &htim3)
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d102      	bne.n	8000f2a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		g_u8NeedToDisplayLEDData = 1;
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]

	}
}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b002      	add	sp, #8
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	2000004c 	.word	0x2000004c
 8000f38:	20000002 	.word	0x20000002

08000f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <Error_Handler+0x8>
	...

08000f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_MspInit+0x44>)
 8000f50:	699a      	ldr	r2, [r3, #24]
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <HAL_MspInit+0x44>)
 8000f54:	2101      	movs	r1, #1
 8000f56:	430a      	orrs	r2, r1
 8000f58:	619a      	str	r2, [r3, #24]
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HAL_MspInit+0x44>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	4013      	ands	r3, r2
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HAL_MspInit+0x44>)
 8000f68:	69da      	ldr	r2, [r3, #28]
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_MspInit+0x44>)
 8000f6c:	2180      	movs	r1, #128	; 0x80
 8000f6e:	0549      	lsls	r1, r1, #21
 8000f70:	430a      	orrs	r2, r1
 8000f72:	61da      	str	r2, [r3, #28]
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_MspInit+0x44>)
 8000f76:	69da      	ldr	r2, [r3, #28]
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	055b      	lsls	r3, r3, #21
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b002      	add	sp, #8
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	40021000 	.word	0x40021000

08000f90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <HAL_TIM_Base_MspInit+0x44>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d113      	bne.n	8000fca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_TIM_Base_MspInit+0x48>)
 8000fa4:	69da      	ldr	r2, [r3, #28]
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <HAL_TIM_Base_MspInit+0x48>)
 8000fa8:	2102      	movs	r1, #2
 8000faa:	430a      	orrs	r2, r1
 8000fac:	61da      	str	r2, [r3, #28]
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_TIM_Base_MspInit+0x48>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2010      	movs	r0, #16
 8000fc0:	f000 f970 	bl	80012a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fc4:	2010      	movs	r0, #16
 8000fc6:	f000 f982 	bl	80012ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b004      	add	sp, #16
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	40000400 	.word	0x40000400
 8000fd8:	40021000 	.word	0x40021000

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <HardFault_Handler+0x4>

08000fe8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001000:	f000 f888 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <TIM3_IRQHandler+0x14>)
 8001012:	0018      	movs	r0, r3
 8001014:	f001 f882 	bl	800211c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001018:	46c0      	nop			; (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	2000004c 	.word	0x2000004c

08001024 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001028:	46c0      	nop			; (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001032:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001034:	f7ff fff6 	bl	8001024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <LoopForever+0x6>)
  ldr r1, =_edata
 800103a:	490d      	ldr	r1, [pc, #52]	; (8001070 <LoopForever+0xa>)
  ldr r2, =_sidata
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <LoopForever+0xe>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001050:	4c0a      	ldr	r4, [pc, #40]	; (800107c <LoopForever+0x16>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800105e:	f001 fbef 	bl	8002840 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001062:	f7ff fc4b 	bl	80008fc <main>

08001066 <LoopForever>:

LoopForever:
    b LoopForever
 8001066:	e7fe      	b.n	8001066 <LoopForever>
  ldr   r0, =_estack
 8001068:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001074:	08002928 	.word	0x08002928
  ldr r2, =_sbss
 8001078:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 800107c:	200000ac 	.word	0x200000ac

08001080 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC1_COMP_IRQHandler>
	...

08001084 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <HAL_Init+0x24>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_Init+0x24>)
 800108e:	2110      	movs	r1, #16
 8001090:	430a      	orrs	r2, r1
 8001092:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001094:	2003      	movs	r0, #3
 8001096:	f000 f809 	bl	80010ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109a:	f7ff ff55 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	40022000 	.word	0x40022000

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <HAL_InitTick+0x5c>)
 80010b6:	681c      	ldr	r4, [r3, #0]
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <HAL_InitTick+0x60>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	0019      	movs	r1, r3
 80010be:	23fa      	movs	r3, #250	; 0xfa
 80010c0:	0098      	lsls	r0, r3, #2
 80010c2:	f7ff f81f 	bl	8000104 <__udivsi3>
 80010c6:	0003      	movs	r3, r0
 80010c8:	0019      	movs	r1, r3
 80010ca:	0020      	movs	r0, r4
 80010cc:	f7ff f81a 	bl	8000104 <__udivsi3>
 80010d0:	0003      	movs	r3, r0
 80010d2:	0018      	movs	r0, r3
 80010d4:	f000 f90b 	bl	80012ee <HAL_SYSTICK_Config>
 80010d8:	1e03      	subs	r3, r0, #0
 80010da:	d001      	beq.n	80010e0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e00f      	b.n	8001100 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	d80b      	bhi.n	80010fe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	2301      	movs	r3, #1
 80010ea:	425b      	negs	r3, r3
 80010ec:	2200      	movs	r2, #0
 80010ee:	0018      	movs	r0, r3
 80010f0:	f000 f8d8 	bl	80012a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_InitTick+0x64>)
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e000      	b.n	8001100 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	0018      	movs	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	b003      	add	sp, #12
 8001106:	bd90      	pop	{r4, r7, pc}
 8001108:	20000024 	.word	0x20000024
 800110c:	2000002c 	.word	0x2000002c
 8001110:	20000028 	.word	0x20000028

08001114 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HAL_IncTick+0x1c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	001a      	movs	r2, r3
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <HAL_IncTick+0x20>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	18d2      	adds	r2, r2, r3
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_IncTick+0x20>)
 8001126:	601a      	str	r2, [r3, #0]
}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	2000002c 	.word	0x2000002c
 8001134:	200000a8 	.word	0x200000a8

08001138 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  return uwTick;
 800113c:	4b02      	ldr	r3, [pc, #8]	; (8001148 <HAL_GetTick+0x10>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	0018      	movs	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	200000a8 	.word	0x200000a8

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	0002      	movs	r2, r0
 8001154:	1dfb      	adds	r3, r7, #7
 8001156:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b7f      	cmp	r3, #127	; 0x7f
 800115e:	d809      	bhi.n	8001174 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001160:	1dfb      	adds	r3, r7, #7
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	001a      	movs	r2, r3
 8001166:	231f      	movs	r3, #31
 8001168:	401a      	ands	r2, r3
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <__NVIC_EnableIRQ+0x30>)
 800116c:	2101      	movs	r1, #1
 800116e:	4091      	lsls	r1, r2
 8001170:	000a      	movs	r2, r1
 8001172:	601a      	str	r2, [r3, #0]
  }
}
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	b002      	add	sp, #8
 800117a:	bd80      	pop	{r7, pc}
 800117c:	e000e100 	.word	0xe000e100

08001180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	0002      	movs	r2, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	1dfb      	adds	r3, r7, #7
 800118c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b7f      	cmp	r3, #127	; 0x7f
 8001194:	d828      	bhi.n	80011e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001196:	4a2f      	ldr	r2, [pc, #188]	; (8001254 <__NVIC_SetPriority+0xd4>)
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b25b      	sxtb	r3, r3
 800119e:	089b      	lsrs	r3, r3, #2
 80011a0:	33c0      	adds	r3, #192	; 0xc0
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	589b      	ldr	r3, [r3, r2]
 80011a6:	1dfa      	adds	r2, r7, #7
 80011a8:	7812      	ldrb	r2, [r2, #0]
 80011aa:	0011      	movs	r1, r2
 80011ac:	2203      	movs	r2, #3
 80011ae:	400a      	ands	r2, r1
 80011b0:	00d2      	lsls	r2, r2, #3
 80011b2:	21ff      	movs	r1, #255	; 0xff
 80011b4:	4091      	lsls	r1, r2
 80011b6:	000a      	movs	r2, r1
 80011b8:	43d2      	mvns	r2, r2
 80011ba:	401a      	ands	r2, r3
 80011bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	019b      	lsls	r3, r3, #6
 80011c2:	22ff      	movs	r2, #255	; 0xff
 80011c4:	401a      	ands	r2, r3
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	0018      	movs	r0, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	4003      	ands	r3, r0
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d4:	481f      	ldr	r0, [pc, #124]	; (8001254 <__NVIC_SetPriority+0xd4>)
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	089b      	lsrs	r3, r3, #2
 80011de:	430a      	orrs	r2, r1
 80011e0:	33c0      	adds	r3, #192	; 0xc0
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011e6:	e031      	b.n	800124c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011e8:	4a1b      	ldr	r2, [pc, #108]	; (8001258 <__NVIC_SetPriority+0xd8>)
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	0019      	movs	r1, r3
 80011f0:	230f      	movs	r3, #15
 80011f2:	400b      	ands	r3, r1
 80011f4:	3b08      	subs	r3, #8
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3306      	adds	r3, #6
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	18d3      	adds	r3, r2, r3
 80011fe:	3304      	adds	r3, #4
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	1dfa      	adds	r2, r7, #7
 8001204:	7812      	ldrb	r2, [r2, #0]
 8001206:	0011      	movs	r1, r2
 8001208:	2203      	movs	r2, #3
 800120a:	400a      	ands	r2, r1
 800120c:	00d2      	lsls	r2, r2, #3
 800120e:	21ff      	movs	r1, #255	; 0xff
 8001210:	4091      	lsls	r1, r2
 8001212:	000a      	movs	r2, r1
 8001214:	43d2      	mvns	r2, r2
 8001216:	401a      	ands	r2, r3
 8001218:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	019b      	lsls	r3, r3, #6
 800121e:	22ff      	movs	r2, #255	; 0xff
 8001220:	401a      	ands	r2, r3
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	0018      	movs	r0, r3
 8001228:	2303      	movs	r3, #3
 800122a:	4003      	ands	r3, r0
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001230:	4809      	ldr	r0, [pc, #36]	; (8001258 <__NVIC_SetPriority+0xd8>)
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	001c      	movs	r4, r3
 8001238:	230f      	movs	r3, #15
 800123a:	4023      	ands	r3, r4
 800123c:	3b08      	subs	r3, #8
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	430a      	orrs	r2, r1
 8001242:	3306      	adds	r3, #6
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	18c3      	adds	r3, r0, r3
 8001248:	3304      	adds	r3, #4
 800124a:	601a      	str	r2, [r3, #0]
}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	b003      	add	sp, #12
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	1e5a      	subs	r2, r3, #1
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	045b      	lsls	r3, r3, #17
 800126c:	429a      	cmp	r2, r3
 800126e:	d301      	bcc.n	8001274 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001270:	2301      	movs	r3, #1
 8001272:	e010      	b.n	8001296 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <SysTick_Config+0x44>)
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	3a01      	subs	r2, #1
 800127a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127c:	2301      	movs	r3, #1
 800127e:	425b      	negs	r3, r3
 8001280:	2103      	movs	r1, #3
 8001282:	0018      	movs	r0, r3
 8001284:	f7ff ff7c 	bl	8001180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <SysTick_Config+0x44>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <SysTick_Config+0x44>)
 8001290:	2207      	movs	r2, #7
 8001292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001294:	2300      	movs	r3, #0
}
 8001296:	0018      	movs	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	b002      	add	sp, #8
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	e000e010 	.word	0xe000e010

080012a4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	210f      	movs	r1, #15
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	1c02      	adds	r2, r0, #0
 80012b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	0011      	movs	r1, r2
 80012c0:	0018      	movs	r0, r3
 80012c2:	f7ff ff5d 	bl	8001180 <__NVIC_SetPriority>
}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b004      	add	sp, #16
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	0002      	movs	r2, r0
 80012d6:	1dfb      	adds	r3, r7, #7
 80012d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	b25b      	sxtb	r3, r3
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7ff ff33 	bl	800114c <__NVIC_EnableIRQ>
}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b002      	add	sp, #8
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7ff ffaf 	bl	800125c <SysTick_Config>
 80012fe:	0003      	movs	r3, r0
}
 8001300:	0018      	movs	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	b002      	add	sp, #8
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001316:	e155      	b.n	80015c4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2101      	movs	r1, #1
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	4091      	lsls	r1, r2
 8001322:	000a      	movs	r2, r1
 8001324:	4013      	ands	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d100      	bne.n	8001330 <HAL_GPIO_Init+0x28>
 800132e:	e146      	b.n	80015be <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2203      	movs	r2, #3
 8001336:	4013      	ands	r3, r2
 8001338:	2b01      	cmp	r3, #1
 800133a:	d005      	beq.n	8001348 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2203      	movs	r2, #3
 8001342:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001344:	2b02      	cmp	r3, #2
 8001346:	d130      	bne.n	80013aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	409a      	lsls	r2, r3
 8001356:	0013      	movs	r3, r2
 8001358:	43da      	mvns	r2, r3
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	409a      	lsls	r2, r3
 800136a:	0013      	movs	r3, r2
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800137e:	2201      	movs	r2, #1
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
 8001384:	0013      	movs	r3, r2
 8001386:	43da      	mvns	r2, r3
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	2201      	movs	r2, #1
 8001396:	401a      	ands	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	409a      	lsls	r2, r3
 800139c:	0013      	movs	r3, r2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2203      	movs	r2, #3
 80013b0:	4013      	ands	r3, r2
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	d017      	beq.n	80013e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	409a      	lsls	r2, r3
 80013c4:	0013      	movs	r3, r2
 80013c6:	43da      	mvns	r2, r3
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	409a      	lsls	r2, r3
 80013d8:	0013      	movs	r3, r2
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2203      	movs	r2, #3
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d123      	bne.n	800143a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	08da      	lsrs	r2, r3, #3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3208      	adds	r2, #8
 80013fa:	0092      	lsls	r2, r2, #2
 80013fc:	58d3      	ldr	r3, [r2, r3]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	2207      	movs	r2, #7
 8001404:	4013      	ands	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	220f      	movs	r2, #15
 800140a:	409a      	lsls	r2, r3
 800140c:	0013      	movs	r3, r2
 800140e:	43da      	mvns	r2, r3
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	691a      	ldr	r2, [r3, #16]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	2107      	movs	r1, #7
 800141e:	400b      	ands	r3, r1
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	409a      	lsls	r2, r3
 8001424:	0013      	movs	r3, r2
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	08da      	lsrs	r2, r3, #3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3208      	adds	r2, #8
 8001434:	0092      	lsls	r2, r2, #2
 8001436:	6939      	ldr	r1, [r7, #16]
 8001438:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	2203      	movs	r2, #3
 8001446:	409a      	lsls	r2, r3
 8001448:	0013      	movs	r3, r2
 800144a:	43da      	mvns	r2, r3
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2203      	movs	r2, #3
 8001458:	401a      	ands	r2, r3
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	409a      	lsls	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	23c0      	movs	r3, #192	; 0xc0
 8001474:	029b      	lsls	r3, r3, #10
 8001476:	4013      	ands	r3, r2
 8001478:	d100      	bne.n	800147c <HAL_GPIO_Init+0x174>
 800147a:	e0a0      	b.n	80015be <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147c:	4b57      	ldr	r3, [pc, #348]	; (80015dc <HAL_GPIO_Init+0x2d4>)
 800147e:	699a      	ldr	r2, [r3, #24]
 8001480:	4b56      	ldr	r3, [pc, #344]	; (80015dc <HAL_GPIO_Init+0x2d4>)
 8001482:	2101      	movs	r1, #1
 8001484:	430a      	orrs	r2, r1
 8001486:	619a      	str	r2, [r3, #24]
 8001488:	4b54      	ldr	r3, [pc, #336]	; (80015dc <HAL_GPIO_Init+0x2d4>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	2201      	movs	r2, #1
 800148e:	4013      	ands	r3, r2
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001494:	4a52      	ldr	r2, [pc, #328]	; (80015e0 <HAL_GPIO_Init+0x2d8>)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	089b      	lsrs	r3, r3, #2
 800149a:	3302      	adds	r3, #2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	589b      	ldr	r3, [r3, r2]
 80014a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	2203      	movs	r2, #3
 80014a6:	4013      	ands	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	220f      	movs	r2, #15
 80014ac:	409a      	lsls	r2, r3
 80014ae:	0013      	movs	r3, r2
 80014b0:	43da      	mvns	r2, r3
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	2390      	movs	r3, #144	; 0x90
 80014bc:	05db      	lsls	r3, r3, #23
 80014be:	429a      	cmp	r2, r3
 80014c0:	d019      	beq.n	80014f6 <HAL_GPIO_Init+0x1ee>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a47      	ldr	r2, [pc, #284]	; (80015e4 <HAL_GPIO_Init+0x2dc>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d013      	beq.n	80014f2 <HAL_GPIO_Init+0x1ea>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a46      	ldr	r2, [pc, #280]	; (80015e8 <HAL_GPIO_Init+0x2e0>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d00d      	beq.n	80014ee <HAL_GPIO_Init+0x1e6>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a45      	ldr	r2, [pc, #276]	; (80015ec <HAL_GPIO_Init+0x2e4>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d007      	beq.n	80014ea <HAL_GPIO_Init+0x1e2>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a44      	ldr	r2, [pc, #272]	; (80015f0 <HAL_GPIO_Init+0x2e8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d101      	bne.n	80014e6 <HAL_GPIO_Init+0x1de>
 80014e2:	2304      	movs	r3, #4
 80014e4:	e008      	b.n	80014f8 <HAL_GPIO_Init+0x1f0>
 80014e6:	2305      	movs	r3, #5
 80014e8:	e006      	b.n	80014f8 <HAL_GPIO_Init+0x1f0>
 80014ea:	2303      	movs	r3, #3
 80014ec:	e004      	b.n	80014f8 <HAL_GPIO_Init+0x1f0>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e002      	b.n	80014f8 <HAL_GPIO_Init+0x1f0>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <HAL_GPIO_Init+0x1f0>
 80014f6:	2300      	movs	r3, #0
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	2103      	movs	r1, #3
 80014fc:	400a      	ands	r2, r1
 80014fe:	0092      	lsls	r2, r2, #2
 8001500:	4093      	lsls	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001508:	4935      	ldr	r1, [pc, #212]	; (80015e0 <HAL_GPIO_Init+0x2d8>)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	089b      	lsrs	r3, r3, #2
 800150e:	3302      	adds	r3, #2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001516:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <HAL_GPIO_Init+0x2ec>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43da      	mvns	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	035b      	lsls	r3, r3, #13
 800152e:	4013      	ands	r3, r2
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800153a:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <HAL_GPIO_Init+0x2ec>)
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001540:	4b2c      	ldr	r3, [pc, #176]	; (80015f4 <HAL_GPIO_Init+0x2ec>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	43da      	mvns	r2, r3
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	039b      	lsls	r3, r3, #14
 8001558:	4013      	ands	r3, r2
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001564:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <HAL_GPIO_Init+0x2ec>)
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800156a:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <HAL_GPIO_Init+0x2ec>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	43da      	mvns	r2, r3
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	2380      	movs	r3, #128	; 0x80
 8001580:	029b      	lsls	r3, r3, #10
 8001582:	4013      	ands	r3, r2
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800158e:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_GPIO_Init+0x2ec>)
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <HAL_GPIO_Init+0x2ec>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	43da      	mvns	r2, r3
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	025b      	lsls	r3, r3, #9
 80015ac:	4013      	ands	r3, r2
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015b8:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <HAL_GPIO_Init+0x2ec>)
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3301      	adds	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	40da      	lsrs	r2, r3
 80015cc:	1e13      	subs	r3, r2, #0
 80015ce:	d000      	beq.n	80015d2 <HAL_GPIO_Init+0x2ca>
 80015d0:	e6a2      	b.n	8001318 <HAL_GPIO_Init+0x10>
  } 
}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b006      	add	sp, #24
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40010000 	.word	0x40010000
 80015e4:	48000400 	.word	0x48000400
 80015e8:	48000800 	.word	0x48000800
 80015ec:	48000c00 	.word	0x48000c00
 80015f0:	48001000 	.word	0x48001000
 80015f4:	40010400 	.word	0x40010400

080015f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	0008      	movs	r0, r1
 8001602:	0011      	movs	r1, r2
 8001604:	1cbb      	adds	r3, r7, #2
 8001606:	1c02      	adds	r2, r0, #0
 8001608:	801a      	strh	r2, [r3, #0]
 800160a:	1c7b      	adds	r3, r7, #1
 800160c:	1c0a      	adds	r2, r1, #0
 800160e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001610:	1c7b      	adds	r3, r7, #1
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d004      	beq.n	8001622 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001618:	1cbb      	adds	r3, r7, #2
 800161a:	881a      	ldrh	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001620:	e003      	b.n	800162a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001622:	1cbb      	adds	r3, r7, #2
 8001624:	881a      	ldrh	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	629a      	str	r2, [r3, #40]	; 0x28
}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	46bd      	mov	sp, r7
 800162e:	b002      	add	sp, #8
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	f000 fb76 	bl	8001d34 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2201      	movs	r2, #1
 800164e:	4013      	ands	r3, r2
 8001650:	d100      	bne.n	8001654 <HAL_RCC_OscConfig+0x20>
 8001652:	e08e      	b.n	8001772 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001654:	4bc5      	ldr	r3, [pc, #788]	; (800196c <HAL_RCC_OscConfig+0x338>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	220c      	movs	r2, #12
 800165a:	4013      	ands	r3, r2
 800165c:	2b04      	cmp	r3, #4
 800165e:	d00e      	beq.n	800167e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001660:	4bc2      	ldr	r3, [pc, #776]	; (800196c <HAL_RCC_OscConfig+0x338>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	220c      	movs	r2, #12
 8001666:	4013      	ands	r3, r2
 8001668:	2b08      	cmp	r3, #8
 800166a:	d117      	bne.n	800169c <HAL_RCC_OscConfig+0x68>
 800166c:	4bbf      	ldr	r3, [pc, #764]	; (800196c <HAL_RCC_OscConfig+0x338>)
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	23c0      	movs	r3, #192	; 0xc0
 8001672:	025b      	lsls	r3, r3, #9
 8001674:	401a      	ands	r2, r3
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	025b      	lsls	r3, r3, #9
 800167a:	429a      	cmp	r2, r3
 800167c:	d10e      	bne.n	800169c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167e:	4bbb      	ldr	r3, [pc, #748]	; (800196c <HAL_RCC_OscConfig+0x338>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	029b      	lsls	r3, r3, #10
 8001686:	4013      	ands	r3, r2
 8001688:	d100      	bne.n	800168c <HAL_RCC_OscConfig+0x58>
 800168a:	e071      	b.n	8001770 <HAL_RCC_OscConfig+0x13c>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d000      	beq.n	8001696 <HAL_RCC_OscConfig+0x62>
 8001694:	e06c      	b.n	8001770 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	f000 fb4c 	bl	8001d34 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_OscConfig+0x80>
 80016a4:	4bb1      	ldr	r3, [pc, #708]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4bb0      	ldr	r3, [pc, #704]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80016aa:	2180      	movs	r1, #128	; 0x80
 80016ac:	0249      	lsls	r1, r1, #9
 80016ae:	430a      	orrs	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	e02f      	b.n	8001714 <HAL_RCC_OscConfig+0xe0>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10c      	bne.n	80016d6 <HAL_RCC_OscConfig+0xa2>
 80016bc:	4bab      	ldr	r3, [pc, #684]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4baa      	ldr	r3, [pc, #680]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80016c2:	49ab      	ldr	r1, [pc, #684]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80016c4:	400a      	ands	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	4ba8      	ldr	r3, [pc, #672]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4ba7      	ldr	r3, [pc, #668]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80016ce:	49a9      	ldr	r1, [pc, #676]	; (8001974 <HAL_RCC_OscConfig+0x340>)
 80016d0:	400a      	ands	r2, r1
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	e01e      	b.n	8001714 <HAL_RCC_OscConfig+0xe0>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b05      	cmp	r3, #5
 80016dc:	d10e      	bne.n	80016fc <HAL_RCC_OscConfig+0xc8>
 80016de:	4ba3      	ldr	r3, [pc, #652]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4ba2      	ldr	r3, [pc, #648]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80016e4:	2180      	movs	r1, #128	; 0x80
 80016e6:	02c9      	lsls	r1, r1, #11
 80016e8:	430a      	orrs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	4b9f      	ldr	r3, [pc, #636]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b9e      	ldr	r3, [pc, #632]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	0249      	lsls	r1, r1, #9
 80016f6:	430a      	orrs	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	e00b      	b.n	8001714 <HAL_RCC_OscConfig+0xe0>
 80016fc:	4b9b      	ldr	r3, [pc, #620]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b9a      	ldr	r3, [pc, #616]	; (800196c <HAL_RCC_OscConfig+0x338>)
 8001702:	499b      	ldr	r1, [pc, #620]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 8001704:	400a      	ands	r2, r1
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	4b98      	ldr	r3, [pc, #608]	; (800196c <HAL_RCC_OscConfig+0x338>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b97      	ldr	r3, [pc, #604]	; (800196c <HAL_RCC_OscConfig+0x338>)
 800170e:	4999      	ldr	r1, [pc, #612]	; (8001974 <HAL_RCC_OscConfig+0x340>)
 8001710:	400a      	ands	r2, r1
 8001712:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d014      	beq.n	8001746 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff fd0c 	bl	8001138 <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001726:	f7ff fd07 	bl	8001138 <HAL_GetTick>
 800172a:	0002      	movs	r2, r0
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b64      	cmp	r3, #100	; 0x64
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e2fd      	b.n	8001d34 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001738:	4b8c      	ldr	r3, [pc, #560]	; (800196c <HAL_RCC_OscConfig+0x338>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	029b      	lsls	r3, r3, #10
 8001740:	4013      	ands	r3, r2
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0xf2>
 8001744:	e015      	b.n	8001772 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001746:	f7ff fcf7 	bl	8001138 <HAL_GetTick>
 800174a:	0003      	movs	r3, r0
 800174c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff fcf2 	bl	8001138 <HAL_GetTick>
 8001754:	0002      	movs	r2, r0
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	; 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e2e8      	b.n	8001d34 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001762:	4b82      	ldr	r3, [pc, #520]	; (800196c <HAL_RCC_OscConfig+0x338>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	029b      	lsls	r3, r3, #10
 800176a:	4013      	ands	r3, r2
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x11c>
 800176e:	e000      	b.n	8001772 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001770:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2202      	movs	r2, #2
 8001778:	4013      	ands	r3, r2
 800177a:	d100      	bne.n	800177e <HAL_RCC_OscConfig+0x14a>
 800177c:	e06c      	b.n	8001858 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800177e:	4b7b      	ldr	r3, [pc, #492]	; (800196c <HAL_RCC_OscConfig+0x338>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	220c      	movs	r2, #12
 8001784:	4013      	ands	r3, r2
 8001786:	d00e      	beq.n	80017a6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001788:	4b78      	ldr	r3, [pc, #480]	; (800196c <HAL_RCC_OscConfig+0x338>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	220c      	movs	r2, #12
 800178e:	4013      	ands	r3, r2
 8001790:	2b08      	cmp	r3, #8
 8001792:	d11f      	bne.n	80017d4 <HAL_RCC_OscConfig+0x1a0>
 8001794:	4b75      	ldr	r3, [pc, #468]	; (800196c <HAL_RCC_OscConfig+0x338>)
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	23c0      	movs	r3, #192	; 0xc0
 800179a:	025b      	lsls	r3, r3, #9
 800179c:	401a      	ands	r2, r3
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d116      	bne.n	80017d4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a6:	4b71      	ldr	r3, [pc, #452]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2202      	movs	r2, #2
 80017ac:	4013      	ands	r3, r2
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_OscConfig+0x188>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e2bb      	b.n	8001d34 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017bc:	4b6b      	ldr	r3, [pc, #428]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	22f8      	movs	r2, #248	; 0xf8
 80017c2:	4393      	bics	r3, r2
 80017c4:	0019      	movs	r1, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	00da      	lsls	r2, r3, #3
 80017cc:	4b67      	ldr	r3, [pc, #412]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80017ce:	430a      	orrs	r2, r1
 80017d0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d2:	e041      	b.n	8001858 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d024      	beq.n	8001826 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017dc:	4b63      	ldr	r3, [pc, #396]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b62      	ldr	r3, [pc, #392]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80017e2:	2101      	movs	r1, #1
 80017e4:	430a      	orrs	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fca6 	bl	8001138 <HAL_GetTick>
 80017ec:	0003      	movs	r3, r0
 80017ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f2:	f7ff fca1 	bl	8001138 <HAL_GetTick>
 80017f6:	0002      	movs	r2, r0
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e297      	b.n	8001d34 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001804:	4b59      	ldr	r3, [pc, #356]	; (800196c <HAL_RCC_OscConfig+0x338>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2202      	movs	r2, #2
 800180a:	4013      	ands	r3, r2
 800180c:	d0f1      	beq.n	80017f2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180e:	4b57      	ldr	r3, [pc, #348]	; (800196c <HAL_RCC_OscConfig+0x338>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	22f8      	movs	r2, #248	; 0xf8
 8001814:	4393      	bics	r3, r2
 8001816:	0019      	movs	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	00da      	lsls	r2, r3, #3
 800181e:	4b53      	ldr	r3, [pc, #332]	; (800196c <HAL_RCC_OscConfig+0x338>)
 8001820:	430a      	orrs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	e018      	b.n	8001858 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001826:	4b51      	ldr	r3, [pc, #324]	; (800196c <HAL_RCC_OscConfig+0x338>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4b50      	ldr	r3, [pc, #320]	; (800196c <HAL_RCC_OscConfig+0x338>)
 800182c:	2101      	movs	r1, #1
 800182e:	438a      	bics	r2, r1
 8001830:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001832:	f7ff fc81 	bl	8001138 <HAL_GetTick>
 8001836:	0003      	movs	r3, r0
 8001838:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800183c:	f7ff fc7c 	bl	8001138 <HAL_GetTick>
 8001840:	0002      	movs	r2, r0
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e272      	b.n	8001d34 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184e:	4b47      	ldr	r3, [pc, #284]	; (800196c <HAL_RCC_OscConfig+0x338>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2202      	movs	r2, #2
 8001854:	4013      	ands	r3, r2
 8001856:	d1f1      	bne.n	800183c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2208      	movs	r2, #8
 800185e:	4013      	ands	r3, r2
 8001860:	d036      	beq.n	80018d0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d019      	beq.n	800189e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800186a:	4b40      	ldr	r3, [pc, #256]	; (800196c <HAL_RCC_OscConfig+0x338>)
 800186c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800186e:	4b3f      	ldr	r3, [pc, #252]	; (800196c <HAL_RCC_OscConfig+0x338>)
 8001870:	2101      	movs	r1, #1
 8001872:	430a      	orrs	r2, r1
 8001874:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001876:	f7ff fc5f 	bl	8001138 <HAL_GetTick>
 800187a:	0003      	movs	r3, r0
 800187c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001880:	f7ff fc5a 	bl	8001138 <HAL_GetTick>
 8001884:	0002      	movs	r2, r0
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e250      	b.n	8001d34 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001892:	4b36      	ldr	r3, [pc, #216]	; (800196c <HAL_RCC_OscConfig+0x338>)
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	2202      	movs	r2, #2
 8001898:	4013      	ands	r3, r2
 800189a:	d0f1      	beq.n	8001880 <HAL_RCC_OscConfig+0x24c>
 800189c:	e018      	b.n	80018d0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800189e:	4b33      	ldr	r3, [pc, #204]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80018a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018a2:	4b32      	ldr	r3, [pc, #200]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80018a4:	2101      	movs	r1, #1
 80018a6:	438a      	bics	r2, r1
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff fc45 	bl	8001138 <HAL_GetTick>
 80018ae:	0003      	movs	r3, r0
 80018b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b4:	f7ff fc40 	bl	8001138 <HAL_GetTick>
 80018b8:	0002      	movs	r2, r0
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e236      	b.n	8001d34 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c6:	4b29      	ldr	r3, [pc, #164]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	2202      	movs	r2, #2
 80018cc:	4013      	ands	r3, r2
 80018ce:	d1f1      	bne.n	80018b4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2204      	movs	r2, #4
 80018d6:	4013      	ands	r3, r2
 80018d8:	d100      	bne.n	80018dc <HAL_RCC_OscConfig+0x2a8>
 80018da:	e0b5      	b.n	8001a48 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018dc:	201f      	movs	r0, #31
 80018de:	183b      	adds	r3, r7, r0
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e4:	4b21      	ldr	r3, [pc, #132]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80018e6:	69da      	ldr	r2, [r3, #28]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	055b      	lsls	r3, r3, #21
 80018ec:	4013      	ands	r3, r2
 80018ee:	d110      	bne.n	8001912 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f0:	4b1e      	ldr	r3, [pc, #120]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80018f2:	69da      	ldr	r2, [r3, #28]
 80018f4:	4b1d      	ldr	r3, [pc, #116]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	0549      	lsls	r1, r1, #21
 80018fa:	430a      	orrs	r2, r1
 80018fc:	61da      	str	r2, [r3, #28]
 80018fe:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_RCC_OscConfig+0x338>)
 8001900:	69da      	ldr	r2, [r3, #28]
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	055b      	lsls	r3, r3, #21
 8001906:	4013      	ands	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800190c:	183b      	adds	r3, r7, r0
 800190e:	2201      	movs	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001912:	4b19      	ldr	r3, [pc, #100]	; (8001978 <HAL_RCC_OscConfig+0x344>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	4013      	ands	r3, r2
 800191c:	d11a      	bne.n	8001954 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <HAL_RCC_OscConfig+0x344>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_RCC_OscConfig+0x344>)
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	0049      	lsls	r1, r1, #1
 8001928:	430a      	orrs	r2, r1
 800192a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800192c:	f7ff fc04 	bl	8001138 <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001936:	f7ff fbff 	bl	8001138 <HAL_GetTick>
 800193a:	0002      	movs	r2, r0
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b64      	cmp	r3, #100	; 0x64
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e1f5      	b.n	8001d34 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_RCC_OscConfig+0x344>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4013      	ands	r3, r2
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d10f      	bne.n	800197c <HAL_RCC_OscConfig+0x348>
 800195c:	4b03      	ldr	r3, [pc, #12]	; (800196c <HAL_RCC_OscConfig+0x338>)
 800195e:	6a1a      	ldr	r2, [r3, #32]
 8001960:	4b02      	ldr	r3, [pc, #8]	; (800196c <HAL_RCC_OscConfig+0x338>)
 8001962:	2101      	movs	r1, #1
 8001964:	430a      	orrs	r2, r1
 8001966:	621a      	str	r2, [r3, #32]
 8001968:	e036      	b.n	80019d8 <HAL_RCC_OscConfig+0x3a4>
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	40021000 	.word	0x40021000
 8001970:	fffeffff 	.word	0xfffeffff
 8001974:	fffbffff 	.word	0xfffbffff
 8001978:	40007000 	.word	0x40007000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10c      	bne.n	800199e <HAL_RCC_OscConfig+0x36a>
 8001984:	4bca      	ldr	r3, [pc, #808]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001986:	6a1a      	ldr	r2, [r3, #32]
 8001988:	4bc9      	ldr	r3, [pc, #804]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 800198a:	2101      	movs	r1, #1
 800198c:	438a      	bics	r2, r1
 800198e:	621a      	str	r2, [r3, #32]
 8001990:	4bc7      	ldr	r3, [pc, #796]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001992:	6a1a      	ldr	r2, [r3, #32]
 8001994:	4bc6      	ldr	r3, [pc, #792]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001996:	2104      	movs	r1, #4
 8001998:	438a      	bics	r2, r1
 800199a:	621a      	str	r2, [r3, #32]
 800199c:	e01c      	b.n	80019d8 <HAL_RCC_OscConfig+0x3a4>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b05      	cmp	r3, #5
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x38c>
 80019a6:	4bc2      	ldr	r3, [pc, #776]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 80019a8:	6a1a      	ldr	r2, [r3, #32]
 80019aa:	4bc1      	ldr	r3, [pc, #772]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 80019ac:	2104      	movs	r1, #4
 80019ae:	430a      	orrs	r2, r1
 80019b0:	621a      	str	r2, [r3, #32]
 80019b2:	4bbf      	ldr	r3, [pc, #764]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 80019b4:	6a1a      	ldr	r2, [r3, #32]
 80019b6:	4bbe      	ldr	r3, [pc, #760]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 80019b8:	2101      	movs	r1, #1
 80019ba:	430a      	orrs	r2, r1
 80019bc:	621a      	str	r2, [r3, #32]
 80019be:	e00b      	b.n	80019d8 <HAL_RCC_OscConfig+0x3a4>
 80019c0:	4bbb      	ldr	r3, [pc, #748]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 80019c2:	6a1a      	ldr	r2, [r3, #32]
 80019c4:	4bba      	ldr	r3, [pc, #744]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 80019c6:	2101      	movs	r1, #1
 80019c8:	438a      	bics	r2, r1
 80019ca:	621a      	str	r2, [r3, #32]
 80019cc:	4bb8      	ldr	r3, [pc, #736]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 80019ce:	6a1a      	ldr	r2, [r3, #32]
 80019d0:	4bb7      	ldr	r3, [pc, #732]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 80019d2:	2104      	movs	r1, #4
 80019d4:	438a      	bics	r2, r1
 80019d6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d014      	beq.n	8001a0a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e0:	f7ff fbaa 	bl	8001138 <HAL_GetTick>
 80019e4:	0003      	movs	r3, r0
 80019e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e8:	e009      	b.n	80019fe <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ea:	f7ff fba5 	bl	8001138 <HAL_GetTick>
 80019ee:	0002      	movs	r2, r0
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	4aaf      	ldr	r2, [pc, #700]	; (8001cb4 <HAL_RCC_OscConfig+0x680>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e19a      	b.n	8001d34 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fe:	4bac      	ldr	r3, [pc, #688]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	2202      	movs	r2, #2
 8001a04:	4013      	ands	r3, r2
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x3b6>
 8001a08:	e013      	b.n	8001a32 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fb95 	bl	8001138 <HAL_GetTick>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a12:	e009      	b.n	8001a28 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a14:	f7ff fb90 	bl	8001138 <HAL_GetTick>
 8001a18:	0002      	movs	r2, r0
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	4aa5      	ldr	r2, [pc, #660]	; (8001cb4 <HAL_RCC_OscConfig+0x680>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e185      	b.n	8001d34 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a28:	4ba1      	ldr	r3, [pc, #644]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a32:	231f      	movs	r3, #31
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d105      	bne.n	8001a48 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a3c:	4b9c      	ldr	r3, [pc, #624]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001a3e:	69da      	ldr	r2, [r3, #28]
 8001a40:	4b9b      	ldr	r3, [pc, #620]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001a42:	499d      	ldr	r1, [pc, #628]	; (8001cb8 <HAL_RCC_OscConfig+0x684>)
 8001a44:	400a      	ands	r2, r1
 8001a46:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2210      	movs	r2, #16
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d063      	beq.n	8001b1a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d12a      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a5a:	4b95      	ldr	r3, [pc, #596]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a5e:	4b94      	ldr	r3, [pc, #592]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001a60:	2104      	movs	r1, #4
 8001a62:	430a      	orrs	r2, r1
 8001a64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a66:	4b92      	ldr	r3, [pc, #584]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a6a:	4b91      	ldr	r3, [pc, #580]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a72:	f7ff fb61 	bl	8001138 <HAL_GetTick>
 8001a76:	0003      	movs	r3, r0
 8001a78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a7c:	f7ff fb5c 	bl	8001138 <HAL_GetTick>
 8001a80:	0002      	movs	r2, r0
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e152      	b.n	8001d34 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a8e:	4b88      	ldr	r3, [pc, #544]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a92:	2202      	movs	r2, #2
 8001a94:	4013      	ands	r3, r2
 8001a96:	d0f1      	beq.n	8001a7c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a98:	4b85      	ldr	r3, [pc, #532]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9c:	22f8      	movs	r2, #248	; 0xf8
 8001a9e:	4393      	bics	r3, r2
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	00da      	lsls	r2, r3, #3
 8001aa8:	4b81      	ldr	r3, [pc, #516]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	635a      	str	r2, [r3, #52]	; 0x34
 8001aae:	e034      	b.n	8001b1a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	3305      	adds	r3, #5
 8001ab6:	d111      	bne.n	8001adc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ab8:	4b7d      	ldr	r3, [pc, #500]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001abc:	4b7c      	ldr	r3, [pc, #496]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001abe:	2104      	movs	r1, #4
 8001ac0:	438a      	bics	r2, r1
 8001ac2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ac4:	4b7a      	ldr	r3, [pc, #488]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac8:	22f8      	movs	r2, #248	; 0xf8
 8001aca:	4393      	bics	r3, r2
 8001acc:	0019      	movs	r1, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	00da      	lsls	r2, r3, #3
 8001ad4:	4b76      	ldr	r3, [pc, #472]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	635a      	str	r2, [r3, #52]	; 0x34
 8001ada:	e01e      	b.n	8001b1a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001adc:	4b74      	ldr	r3, [pc, #464]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae0:	4b73      	ldr	r3, [pc, #460]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001ae2:	2104      	movs	r1, #4
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001ae8:	4b71      	ldr	r3, [pc, #452]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aec:	4b70      	ldr	r3, [pc, #448]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001aee:	2101      	movs	r1, #1
 8001af0:	438a      	bics	r2, r1
 8001af2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af4:	f7ff fb20 	bl	8001138 <HAL_GetTick>
 8001af8:	0003      	movs	r3, r0
 8001afa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001afe:	f7ff fb1b 	bl	8001138 <HAL_GetTick>
 8001b02:	0002      	movs	r2, r0
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e111      	b.n	8001d34 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b10:	4b67      	ldr	r3, [pc, #412]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b14:	2202      	movs	r2, #2
 8001b16:	4013      	ands	r3, r2
 8001b18:	d1f1      	bne.n	8001afe <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	4013      	ands	r3, r2
 8001b22:	d05c      	beq.n	8001bde <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001b24:	4b62      	ldr	r3, [pc, #392]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	220c      	movs	r2, #12
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b0c      	cmp	r3, #12
 8001b2e:	d00e      	beq.n	8001b4e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001b30:	4b5f      	ldr	r3, [pc, #380]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	220c      	movs	r2, #12
 8001b36:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d114      	bne.n	8001b66 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001b3c:	4b5c      	ldr	r3, [pc, #368]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	23c0      	movs	r3, #192	; 0xc0
 8001b42:	025b      	lsls	r3, r3, #9
 8001b44:	401a      	ands	r2, r3
 8001b46:	23c0      	movs	r3, #192	; 0xc0
 8001b48:	025b      	lsls	r3, r3, #9
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d10b      	bne.n	8001b66 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001b4e:	4b58      	ldr	r3, [pc, #352]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	029b      	lsls	r3, r3, #10
 8001b56:	4013      	ands	r3, r2
 8001b58:	d040      	beq.n	8001bdc <HAL_RCC_OscConfig+0x5a8>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d03c      	beq.n	8001bdc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e0e6      	b.n	8001d34 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d01b      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001b6e:	4b50      	ldr	r3, [pc, #320]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b72:	4b4f      	ldr	r3, [pc, #316]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001b74:	2180      	movs	r1, #128	; 0x80
 8001b76:	0249      	lsls	r1, r1, #9
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fadc 	bl	8001138 <HAL_GetTick>
 8001b80:	0003      	movs	r3, r0
 8001b82:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b86:	f7ff fad7 	bl	8001138 <HAL_GetTick>
 8001b8a:	0002      	movs	r2, r0
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e0cd      	b.n	8001d34 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b98:	4b45      	ldr	r3, [pc, #276]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	029b      	lsls	r3, r3, #10
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x552>
 8001ba4:	e01b      	b.n	8001bde <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001ba6:	4b42      	ldr	r3, [pc, #264]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001baa:	4b41      	ldr	r3, [pc, #260]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001bac:	4943      	ldr	r1, [pc, #268]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001bae:	400a      	ands	r2, r1
 8001bb0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff fac1 	bl	8001138 <HAL_GetTick>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bbc:	f7ff fabc 	bl	8001138 <HAL_GetTick>
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e0b2      	b.n	8001d34 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001bce:	4b38      	ldr	r3, [pc, #224]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	029b      	lsls	r3, r3, #10
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x588>
 8001bda:	e000      	b.n	8001bde <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001bdc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d100      	bne.n	8001be8 <HAL_RCC_OscConfig+0x5b4>
 8001be6:	e0a4      	b.n	8001d32 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be8:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	220c      	movs	r2, #12
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d100      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x5c2>
 8001bf4:	e078      	b.n	8001ce8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d14c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfe:	4b2c      	ldr	r3, [pc, #176]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001c04:	492e      	ldr	r1, [pc, #184]	; (8001cc0 <HAL_RCC_OscConfig+0x68c>)
 8001c06:	400a      	ands	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7ff fa95 	bl	8001138 <HAL_GetTick>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c14:	f7ff fa90 	bl	8001138 <HAL_GetTick>
 8001c18:	0002      	movs	r2, r0
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e086      	b.n	8001d34 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c26:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	049b      	lsls	r3, r3, #18
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c32:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c36:	220f      	movs	r2, #15
 8001c38:	4393      	bics	r3, r2
 8001c3a:	0019      	movs	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001c42:	430a      	orrs	r2, r1
 8001c44:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4a1e      	ldr	r2, [pc, #120]	; (8001cc4 <HAL_RCC_OscConfig+0x690>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	0019      	movs	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001c66:	2180      	movs	r1, #128	; 0x80
 8001c68:	0449      	lsls	r1, r1, #17
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6e:	f7ff fa63 	bl	8001138 <HAL_GetTick>
 8001c72:	0003      	movs	r3, r0
 8001c74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c78:	f7ff fa5e 	bl	8001138 <HAL_GetTick>
 8001c7c:	0002      	movs	r2, r0
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e054      	b.n	8001d34 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	049b      	lsls	r3, r3, #18
 8001c92:	4013      	ands	r3, r2
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x644>
 8001c96:	e04c      	b.n	8001d32 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <HAL_RCC_OscConfig+0x67c>)
 8001c9e:	4908      	ldr	r1, [pc, #32]	; (8001cc0 <HAL_RCC_OscConfig+0x68c>)
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fa48 	bl	8001138 <HAL_GetTick>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cac:	e015      	b.n	8001cda <HAL_RCC_OscConfig+0x6a6>
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	00001388 	.word	0x00001388
 8001cb8:	efffffff 	.word	0xefffffff
 8001cbc:	fffeffff 	.word	0xfffeffff
 8001cc0:	feffffff 	.word	0xfeffffff
 8001cc4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7ff fa36 	bl	8001138 <HAL_GetTick>
 8001ccc:	0002      	movs	r2, r0
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e02c      	b.n	8001d34 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_RCC_OscConfig+0x708>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	049b      	lsls	r3, r3, #18
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x694>
 8001ce6:	e024      	b.n	8001d32 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e01f      	b.n	8001d34 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_RCC_OscConfig+0x708>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_RCC_OscConfig+0x708>)
 8001cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfe:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	23c0      	movs	r3, #192	; 0xc0
 8001d04:	025b      	lsls	r3, r3, #9
 8001d06:	401a      	ands	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d10e      	bne.n	8001d2e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	220f      	movs	r2, #15
 8001d14:	401a      	ands	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d107      	bne.n	8001d2e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	23f0      	movs	r3, #240	; 0xf0
 8001d22:	039b      	lsls	r3, r3, #14
 8001d24:	401a      	ands	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	0018      	movs	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b008      	add	sp, #32
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000

08001d40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0bf      	b.n	8001ed4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d54:	4b61      	ldr	r3, [pc, #388]	; (8001edc <HAL_RCC_ClockConfig+0x19c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d911      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b5e      	ldr	r3, [pc, #376]	; (8001edc <HAL_RCC_ClockConfig+0x19c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2201      	movs	r2, #1
 8001d68:	4393      	bics	r3, r2
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	4b5b      	ldr	r3, [pc, #364]	; (8001edc <HAL_RCC_ClockConfig+0x19c>)
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d74:	4b59      	ldr	r3, [pc, #356]	; (8001edc <HAL_RCC_ClockConfig+0x19c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e0a6      	b.n	8001ed4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d015      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2204      	movs	r2, #4
 8001d96:	4013      	ands	r3, r2
 8001d98:	d006      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d9a:	4b51      	ldr	r3, [pc, #324]	; (8001ee0 <HAL_RCC_ClockConfig+0x1a0>)
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	4b50      	ldr	r3, [pc, #320]	; (8001ee0 <HAL_RCC_ClockConfig+0x1a0>)
 8001da0:	21e0      	movs	r1, #224	; 0xe0
 8001da2:	00c9      	lsls	r1, r1, #3
 8001da4:	430a      	orrs	r2, r1
 8001da6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da8:	4b4d      	ldr	r3, [pc, #308]	; (8001ee0 <HAL_RCC_ClockConfig+0x1a0>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	22f0      	movs	r2, #240	; 0xf0
 8001dae:	4393      	bics	r3, r2
 8001db0:	0019      	movs	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	4b4a      	ldr	r3, [pc, #296]	; (8001ee0 <HAL_RCC_ClockConfig+0x1a0>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d04c      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	4b44      	ldr	r3, [pc, #272]	; (8001ee0 <HAL_RCC_ClockConfig+0x1a0>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	2380      	movs	r3, #128	; 0x80
 8001dd4:	029b      	lsls	r3, r3, #10
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d120      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e07a      	b.n	8001ed4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de6:	4b3e      	ldr	r3, [pc, #248]	; (8001ee0 <HAL_RCC_ClockConfig+0x1a0>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	049b      	lsls	r3, r3, #18
 8001dee:	4013      	ands	r3, r2
 8001df0:	d114      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e06e      	b.n	8001ed4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001dfe:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <HAL_RCC_ClockConfig+0x1a0>)
 8001e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	029b      	lsls	r3, r3, #10
 8001e06:	4013      	ands	r3, r2
 8001e08:	d108      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e062      	b.n	8001ed4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0e:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <HAL_RCC_ClockConfig+0x1a0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2202      	movs	r2, #2
 8001e14:	4013      	ands	r3, r2
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e05b      	b.n	8001ed4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1c:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <HAL_RCC_ClockConfig+0x1a0>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2203      	movs	r2, #3
 8001e22:	4393      	bics	r3, r2
 8001e24:	0019      	movs	r1, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <HAL_RCC_ClockConfig+0x1a0>)
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e30:	f7ff f982 	bl	8001138 <HAL_GetTick>
 8001e34:	0003      	movs	r3, r0
 8001e36:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e38:	e009      	b.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3a:	f7ff f97d 	bl	8001138 <HAL_GetTick>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	4a27      	ldr	r2, [pc, #156]	; (8001ee4 <HAL_RCC_ClockConfig+0x1a4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e042      	b.n	8001ed4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <HAL_RCC_ClockConfig+0x1a0>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	220c      	movs	r2, #12
 8001e54:	401a      	ands	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d1ec      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e60:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <HAL_RCC_ClockConfig+0x19c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2201      	movs	r2, #1
 8001e66:	4013      	ands	r3, r2
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d211      	bcs.n	8001e92 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_RCC_ClockConfig+0x19c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2201      	movs	r2, #1
 8001e74:	4393      	bics	r3, r2
 8001e76:	0019      	movs	r1, r3
 8001e78:	4b18      	ldr	r3, [pc, #96]	; (8001edc <HAL_RCC_ClockConfig+0x19c>)
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e80:	4b16      	ldr	r3, [pc, #88]	; (8001edc <HAL_RCC_ClockConfig+0x19c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2201      	movs	r2, #1
 8001e86:	4013      	ands	r3, r2
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d001      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e020      	b.n	8001ed4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2204      	movs	r2, #4
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d009      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e9c:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <HAL_RCC_ClockConfig+0x1a0>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	4a11      	ldr	r2, [pc, #68]	; (8001ee8 <HAL_RCC_ClockConfig+0x1a8>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <HAL_RCC_ClockConfig+0x1a0>)
 8001eac:	430a      	orrs	r2, r1
 8001eae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001eb0:	f000 f820 	bl	8001ef4 <HAL_RCC_GetSysClockFreq>
 8001eb4:	0001      	movs	r1, r0
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_RCC_ClockConfig+0x1a0>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	091b      	lsrs	r3, r3, #4
 8001ebc:	220f      	movs	r2, #15
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <HAL_RCC_ClockConfig+0x1ac>)
 8001ec2:	5cd3      	ldrb	r3, [r2, r3]
 8001ec4:	000a      	movs	r2, r1
 8001ec6:	40da      	lsrs	r2, r3
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_RCC_ClockConfig+0x1b0>)
 8001eca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ecc:	2003      	movs	r0, #3
 8001ece:	f7ff f8ed 	bl	80010ac <HAL_InitTick>
  
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b004      	add	sp, #16
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40022000 	.word	0x40022000
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	00001388 	.word	0x00001388
 8001ee8:	fffff8ff 	.word	0xfffff8ff
 8001eec:	080028f0 	.word	0x080028f0
 8001ef0:	20000024 	.word	0x20000024

08001ef4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001f0e:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	220c      	movs	r2, #12
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b0c      	cmp	r3, #12
 8001f1c:	d046      	beq.n	8001fac <HAL_RCC_GetSysClockFreq+0xb8>
 8001f1e:	d848      	bhi.n	8001fb2 <HAL_RCC_GetSysClockFreq+0xbe>
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d002      	beq.n	8001f2a <HAL_RCC_GetSysClockFreq+0x36>
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d003      	beq.n	8001f30 <HAL_RCC_GetSysClockFreq+0x3c>
 8001f28:	e043      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f2a:	4b27      	ldr	r3, [pc, #156]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f2c:	613b      	str	r3, [r7, #16]
      break;
 8001f2e:	e043      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	0c9b      	lsrs	r3, r3, #18
 8001f34:	220f      	movs	r2, #15
 8001f36:	4013      	ands	r3, r2
 8001f38:	4a24      	ldr	r2, [pc, #144]	; (8001fcc <HAL_RCC_GetSysClockFreq+0xd8>)
 8001f3a:	5cd3      	ldrb	r3, [r2, r3]
 8001f3c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f3e:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f42:	220f      	movs	r2, #15
 8001f44:	4013      	ands	r3, r2
 8001f46:	4a22      	ldr	r2, [pc, #136]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001f48:	5cd3      	ldrb	r3, [r2, r3]
 8001f4a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	23c0      	movs	r3, #192	; 0xc0
 8001f50:	025b      	lsls	r3, r3, #9
 8001f52:	401a      	ands	r2, r3
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	025b      	lsls	r3, r3, #9
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d109      	bne.n	8001f70 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	481a      	ldr	r0, [pc, #104]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f60:	f7fe f8d0 	bl	8000104 <__udivsi3>
 8001f64:	0003      	movs	r3, r0
 8001f66:	001a      	movs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4353      	muls	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e01a      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	23c0      	movs	r3, #192	; 0xc0
 8001f74:	025b      	lsls	r3, r3, #9
 8001f76:	401a      	ands	r2, r3
 8001f78:	23c0      	movs	r3, #192	; 0xc0
 8001f7a:	025b      	lsls	r3, r3, #9
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d109      	bne.n	8001f94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	4814      	ldr	r0, [pc, #80]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001f84:	f7fe f8be 	bl	8000104 <__udivsi3>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	001a      	movs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4353      	muls	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	480c      	ldr	r0, [pc, #48]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f98:	f7fe f8b4 	bl	8000104 <__udivsi3>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	001a      	movs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4353      	muls	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	613b      	str	r3, [r7, #16]
      break;
 8001faa:	e005      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001fac:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001fae:	613b      	str	r3, [r7, #16]
      break;
 8001fb0:	e002      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001fb4:	613b      	str	r3, [r7, #16]
      break;
 8001fb6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001fb8:	693b      	ldr	r3, [r7, #16]
}
 8001fba:	0018      	movs	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b006      	add	sp, #24
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	007a1200 	.word	0x007a1200
 8001fcc:	08002900 	.word	0x08002900
 8001fd0:	08002910 	.word	0x08002910
 8001fd4:	02dc6c00 	.word	0x02dc6c00

08001fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e042      	b.n	8002070 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	223d      	movs	r2, #61	; 0x3d
 8001fee:	5c9b      	ldrb	r3, [r3, r2]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d107      	bne.n	8002006 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	223c      	movs	r2, #60	; 0x3c
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	0018      	movs	r0, r3
 8002002:	f7fe ffc5 	bl	8000f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	223d      	movs	r2, #61	; 0x3d
 800200a:	2102      	movs	r1, #2
 800200c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3304      	adds	r3, #4
 8002016:	0019      	movs	r1, r3
 8002018:	0010      	movs	r0, r2
 800201a:	f000 fa89 	bl	8002530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2246      	movs	r2, #70	; 0x46
 8002022:	2101      	movs	r1, #1
 8002024:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	223e      	movs	r2, #62	; 0x3e
 800202a:	2101      	movs	r1, #1
 800202c:	5499      	strb	r1, [r3, r2]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	223f      	movs	r2, #63	; 0x3f
 8002032:	2101      	movs	r1, #1
 8002034:	5499      	strb	r1, [r3, r2]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2240      	movs	r2, #64	; 0x40
 800203a:	2101      	movs	r1, #1
 800203c:	5499      	strb	r1, [r3, r2]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2241      	movs	r2, #65	; 0x41
 8002042:	2101      	movs	r1, #1
 8002044:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2242      	movs	r2, #66	; 0x42
 800204a:	2101      	movs	r1, #1
 800204c:	5499      	strb	r1, [r3, r2]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2243      	movs	r2, #67	; 0x43
 8002052:	2101      	movs	r1, #1
 8002054:	5499      	strb	r1, [r3, r2]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2244      	movs	r2, #68	; 0x44
 800205a:	2101      	movs	r1, #1
 800205c:	5499      	strb	r1, [r3, r2]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2245      	movs	r2, #69	; 0x45
 8002062:	2101      	movs	r1, #1
 8002064:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	223d      	movs	r2, #61	; 0x3d
 800206a:	2101      	movs	r1, #1
 800206c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	0018      	movs	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	b002      	add	sp, #8
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	223d      	movs	r2, #61	; 0x3d
 8002084:	5c9b      	ldrb	r3, [r3, r2]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d001      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e03b      	b.n	8002108 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	223d      	movs	r2, #61	; 0x3d
 8002094:	2102      	movs	r1, #2
 8002096:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2101      	movs	r1, #1
 80020a4:	430a      	orrs	r2, r1
 80020a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a18      	ldr	r2, [pc, #96]	; (8002110 <HAL_TIM_Base_Start_IT+0x98>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00f      	beq.n	80020d2 <HAL_TIM_Base_Start_IT+0x5a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	05db      	lsls	r3, r3, #23
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d009      	beq.n	80020d2 <HAL_TIM_Base_Start_IT+0x5a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a14      	ldr	r2, [pc, #80]	; (8002114 <HAL_TIM_Base_Start_IT+0x9c>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d004      	beq.n	80020d2 <HAL_TIM_Base_Start_IT+0x5a>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a12      	ldr	r2, [pc, #72]	; (8002118 <HAL_TIM_Base_Start_IT+0xa0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d111      	bne.n	80020f6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2207      	movs	r2, #7
 80020da:	4013      	ands	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b06      	cmp	r3, #6
 80020e2:	d010      	beq.n	8002106 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2101      	movs	r1, #1
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f4:	e007      	b.n	8002106 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2101      	movs	r1, #1
 8002102:	430a      	orrs	r2, r1
 8002104:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	0018      	movs	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	b004      	add	sp, #16
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40012c00 	.word	0x40012c00
 8002114:	40000400 	.word	0x40000400
 8002118:	40014000 	.word	0x40014000

0800211c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	2202      	movs	r2, #2
 800212c:	4013      	ands	r3, r2
 800212e:	2b02      	cmp	r3, #2
 8002130:	d124      	bne.n	800217c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2202      	movs	r2, #2
 800213a:	4013      	ands	r3, r2
 800213c:	2b02      	cmp	r3, #2
 800213e:	d11d      	bne.n	800217c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2203      	movs	r2, #3
 8002146:	4252      	negs	r2, r2
 8002148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	2203      	movs	r2, #3
 8002158:	4013      	ands	r3, r2
 800215a:	d004      	beq.n	8002166 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	0018      	movs	r0, r3
 8002160:	f000 f9ce 	bl	8002500 <HAL_TIM_IC_CaptureCallback>
 8002164:	e007      	b.n	8002176 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	0018      	movs	r0, r3
 800216a:	f000 f9c1 	bl	80024f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	0018      	movs	r0, r3
 8002172:	f000 f9cd 	bl	8002510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	2204      	movs	r2, #4
 8002184:	4013      	ands	r3, r2
 8002186:	2b04      	cmp	r3, #4
 8002188:	d125      	bne.n	80021d6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2204      	movs	r2, #4
 8002192:	4013      	ands	r3, r2
 8002194:	2b04      	cmp	r3, #4
 8002196:	d11e      	bne.n	80021d6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2205      	movs	r2, #5
 800219e:	4252      	negs	r2, r2
 80021a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2202      	movs	r2, #2
 80021a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	23c0      	movs	r3, #192	; 0xc0
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4013      	ands	r3, r2
 80021b4:	d004      	beq.n	80021c0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	0018      	movs	r0, r3
 80021ba:	f000 f9a1 	bl	8002500 <HAL_TIM_IC_CaptureCallback>
 80021be:	e007      	b.n	80021d0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	0018      	movs	r0, r3
 80021c4:	f000 f994 	bl	80024f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	0018      	movs	r0, r3
 80021cc:	f000 f9a0 	bl	8002510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	2208      	movs	r2, #8
 80021de:	4013      	ands	r3, r2
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d124      	bne.n	800222e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2208      	movs	r2, #8
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d11d      	bne.n	800222e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2209      	movs	r2, #9
 80021f8:	4252      	negs	r2, r2
 80021fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2204      	movs	r2, #4
 8002200:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	2203      	movs	r2, #3
 800220a:	4013      	ands	r3, r2
 800220c:	d004      	beq.n	8002218 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	0018      	movs	r0, r3
 8002212:	f000 f975 	bl	8002500 <HAL_TIM_IC_CaptureCallback>
 8002216:	e007      	b.n	8002228 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	0018      	movs	r0, r3
 800221c:	f000 f968 	bl	80024f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	0018      	movs	r0, r3
 8002224:	f000 f974 	bl	8002510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	2210      	movs	r2, #16
 8002236:	4013      	ands	r3, r2
 8002238:	2b10      	cmp	r3, #16
 800223a:	d125      	bne.n	8002288 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2210      	movs	r2, #16
 8002244:	4013      	ands	r3, r2
 8002246:	2b10      	cmp	r3, #16
 8002248:	d11e      	bne.n	8002288 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2211      	movs	r2, #17
 8002250:	4252      	negs	r2, r2
 8002252:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2208      	movs	r2, #8
 8002258:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69da      	ldr	r2, [r3, #28]
 8002260:	23c0      	movs	r3, #192	; 0xc0
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4013      	ands	r3, r2
 8002266:	d004      	beq.n	8002272 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	0018      	movs	r0, r3
 800226c:	f000 f948 	bl	8002500 <HAL_TIM_IC_CaptureCallback>
 8002270:	e007      	b.n	8002282 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	0018      	movs	r0, r3
 8002276:	f000 f93b 	bl	80024f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	0018      	movs	r0, r3
 800227e:	f000 f947 	bl	8002510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	2201      	movs	r2, #1
 8002290:	4013      	ands	r3, r2
 8002292:	2b01      	cmp	r3, #1
 8002294:	d10f      	bne.n	80022b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2201      	movs	r2, #1
 800229e:	4013      	ands	r3, r2
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d108      	bne.n	80022b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2202      	movs	r2, #2
 80022aa:	4252      	negs	r2, r2
 80022ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	0018      	movs	r0, r3
 80022b2:	f7fe fe2f 	bl	8000f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	2280      	movs	r2, #128	; 0x80
 80022be:	4013      	ands	r3, r2
 80022c0:	2b80      	cmp	r3, #128	; 0x80
 80022c2:	d10f      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2280      	movs	r2, #128	; 0x80
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b80      	cmp	r3, #128	; 0x80
 80022d0:	d108      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2281      	movs	r2, #129	; 0x81
 80022d8:	4252      	negs	r2, r2
 80022da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	0018      	movs	r0, r3
 80022e0:	f000 faa6 	bl	8002830 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2240      	movs	r2, #64	; 0x40
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b40      	cmp	r3, #64	; 0x40
 80022f0:	d10f      	bne.n	8002312 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	2240      	movs	r2, #64	; 0x40
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b40      	cmp	r3, #64	; 0x40
 80022fe:	d108      	bne.n	8002312 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2241      	movs	r2, #65	; 0x41
 8002306:	4252      	negs	r2, r2
 8002308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	0018      	movs	r0, r3
 800230e:	f000 f907 	bl	8002520 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2220      	movs	r2, #32
 800231a:	4013      	ands	r3, r2
 800231c:	2b20      	cmp	r3, #32
 800231e:	d10f      	bne.n	8002340 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2220      	movs	r2, #32
 8002328:	4013      	ands	r3, r2
 800232a:	2b20      	cmp	r3, #32
 800232c:	d108      	bne.n	8002340 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2221      	movs	r2, #33	; 0x21
 8002334:	4252      	negs	r2, r2
 8002336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	0018      	movs	r0, r3
 800233c:	f000 fa70 	bl	8002820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b002      	add	sp, #8
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002352:	230f      	movs	r3, #15
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	223c      	movs	r2, #60	; 0x3c
 800235e:	5c9b      	ldrb	r3, [r3, r2]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_TIM_ConfigClockSource+0x20>
 8002364:	2302      	movs	r3, #2
 8002366:	e0bc      	b.n	80024e2 <HAL_TIM_ConfigClockSource+0x19a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	223c      	movs	r2, #60	; 0x3c
 800236c:	2101      	movs	r1, #1
 800236e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	223d      	movs	r2, #61	; 0x3d
 8002374:	2102      	movs	r1, #2
 8002376:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2277      	movs	r2, #119	; 0x77
 8002384:	4393      	bics	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4a58      	ldr	r2, [pc, #352]	; (80024ec <HAL_TIM_ConfigClockSource+0x1a4>)
 800238c:	4013      	ands	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	0192      	lsls	r2, r2, #6
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d040      	beq.n	8002426 <HAL_TIM_ConfigClockSource+0xde>
 80023a4:	2280      	movs	r2, #128	; 0x80
 80023a6:	0192      	lsls	r2, r2, #6
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d900      	bls.n	80023ae <HAL_TIM_ConfigClockSource+0x66>
 80023ac:	e088      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x178>
 80023ae:	2280      	movs	r2, #128	; 0x80
 80023b0:	0152      	lsls	r2, r2, #5
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d100      	bne.n	80023b8 <HAL_TIM_ConfigClockSource+0x70>
 80023b6:	e088      	b.n	80024ca <HAL_TIM_ConfigClockSource+0x182>
 80023b8:	2280      	movs	r2, #128	; 0x80
 80023ba:	0152      	lsls	r2, r2, #5
 80023bc:	4293      	cmp	r3, r2
 80023be:	d900      	bls.n	80023c2 <HAL_TIM_ConfigClockSource+0x7a>
 80023c0:	e07e      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x178>
 80023c2:	2b70      	cmp	r3, #112	; 0x70
 80023c4:	d018      	beq.n	80023f8 <HAL_TIM_ConfigClockSource+0xb0>
 80023c6:	d900      	bls.n	80023ca <HAL_TIM_ConfigClockSource+0x82>
 80023c8:	e07a      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x178>
 80023ca:	2b60      	cmp	r3, #96	; 0x60
 80023cc:	d04f      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x126>
 80023ce:	d900      	bls.n	80023d2 <HAL_TIM_ConfigClockSource+0x8a>
 80023d0:	e076      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x178>
 80023d2:	2b50      	cmp	r3, #80	; 0x50
 80023d4:	d03b      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x106>
 80023d6:	d900      	bls.n	80023da <HAL_TIM_ConfigClockSource+0x92>
 80023d8:	e072      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x178>
 80023da:	2b40      	cmp	r3, #64	; 0x40
 80023dc:	d057      	beq.n	800248e <HAL_TIM_ConfigClockSource+0x146>
 80023de:	d900      	bls.n	80023e2 <HAL_TIM_ConfigClockSource+0x9a>
 80023e0:	e06e      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x178>
 80023e2:	2b30      	cmp	r3, #48	; 0x30
 80023e4:	d063      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x166>
 80023e6:	d86b      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x178>
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d060      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x166>
 80023ec:	d868      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x178>
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d05d      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x166>
 80023f2:	2b10      	cmp	r3, #16
 80023f4:	d05b      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x166>
 80023f6:	e063      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	6899      	ldr	r1, [r3, #8]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f000 f98c 	bl	8002724 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2277      	movs	r2, #119	; 0x77
 8002418:	4313      	orrs	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	609a      	str	r2, [r3, #8]
      break;
 8002424:	e052      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6899      	ldr	r1, [r3, #8]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f000 f975 	bl	8002724 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	01c9      	lsls	r1, r1, #7
 8002448:	430a      	orrs	r2, r1
 800244a:	609a      	str	r2, [r3, #8]
      break;
 800244c:	e03e      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	6859      	ldr	r1, [r3, #4]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	001a      	movs	r2, r3
 800245c:	f000 f8e8 	bl	8002630 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2150      	movs	r1, #80	; 0x50
 8002466:	0018      	movs	r0, r3
 8002468:	f000 f942 	bl	80026f0 <TIM_ITRx_SetConfig>
      break;
 800246c:	e02e      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	6859      	ldr	r1, [r3, #4]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	001a      	movs	r2, r3
 800247c:	f000 f906 	bl	800268c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2160      	movs	r1, #96	; 0x60
 8002486:	0018      	movs	r0, r3
 8002488:	f000 f932 	bl	80026f0 <TIM_ITRx_SetConfig>
      break;
 800248c:	e01e      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6859      	ldr	r1, [r3, #4]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	001a      	movs	r2, r3
 800249c:	f000 f8c8 	bl	8002630 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2140      	movs	r1, #64	; 0x40
 80024a6:	0018      	movs	r0, r3
 80024a8:	f000 f922 	bl	80026f0 <TIM_ITRx_SetConfig>
      break;
 80024ac:	e00e      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0019      	movs	r1, r3
 80024b8:	0010      	movs	r0, r2
 80024ba:	f000 f919 	bl	80026f0 <TIM_ITRx_SetConfig>
      break;
 80024be:	e005      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80024c0:	230f      	movs	r3, #15
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
      break;
 80024c8:	e000      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80024ca:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	223d      	movs	r2, #61	; 0x3d
 80024d0:	2101      	movs	r1, #1
 80024d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	223c      	movs	r2, #60	; 0x3c
 80024d8:	2100      	movs	r1, #0
 80024da:	5499      	strb	r1, [r3, r2]

  return status;
 80024dc:	230f      	movs	r3, #15
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	781b      	ldrb	r3, [r3, #0]
}
 80024e2:	0018      	movs	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b004      	add	sp, #16
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	ffff00ff 	.word	0xffff00ff

080024f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024f8:	46c0      	nop			; (mov r8, r8)
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b002      	add	sp, #8
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002508:	46c0      	nop			; (mov r8, r8)
 800250a:	46bd      	mov	sp, r7
 800250c:	b002      	add	sp, #8
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002518:	46c0      	nop			; (mov r8, r8)
 800251a:	46bd      	mov	sp, r7
 800251c:	b002      	add	sp, #8
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002528:	46c0      	nop			; (mov r8, r8)
 800252a:	46bd      	mov	sp, r7
 800252c:	b002      	add	sp, #8
 800252e:	bd80      	pop	{r7, pc}

08002530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a34      	ldr	r2, [pc, #208]	; (8002614 <TIM_Base_SetConfig+0xe4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d008      	beq.n	800255a <TIM_Base_SetConfig+0x2a>
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	05db      	lsls	r3, r3, #23
 800254e:	429a      	cmp	r2, r3
 8002550:	d003      	beq.n	800255a <TIM_Base_SetConfig+0x2a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a30      	ldr	r2, [pc, #192]	; (8002618 <TIM_Base_SetConfig+0xe8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d108      	bne.n	800256c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2270      	movs	r2, #112	; 0x70
 800255e:	4393      	bics	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a29      	ldr	r2, [pc, #164]	; (8002614 <TIM_Base_SetConfig+0xe4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d018      	beq.n	80025a6 <TIM_Base_SetConfig+0x76>
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	05db      	lsls	r3, r3, #23
 800257a:	429a      	cmp	r2, r3
 800257c:	d013      	beq.n	80025a6 <TIM_Base_SetConfig+0x76>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a25      	ldr	r2, [pc, #148]	; (8002618 <TIM_Base_SetConfig+0xe8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00f      	beq.n	80025a6 <TIM_Base_SetConfig+0x76>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a24      	ldr	r2, [pc, #144]	; (800261c <TIM_Base_SetConfig+0xec>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00b      	beq.n	80025a6 <TIM_Base_SetConfig+0x76>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a23      	ldr	r2, [pc, #140]	; (8002620 <TIM_Base_SetConfig+0xf0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d007      	beq.n	80025a6 <TIM_Base_SetConfig+0x76>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a22      	ldr	r2, [pc, #136]	; (8002624 <TIM_Base_SetConfig+0xf4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d003      	beq.n	80025a6 <TIM_Base_SetConfig+0x76>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a21      	ldr	r2, [pc, #132]	; (8002628 <TIM_Base_SetConfig+0xf8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d108      	bne.n	80025b8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4a20      	ldr	r2, [pc, #128]	; (800262c <TIM_Base_SetConfig+0xfc>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2280      	movs	r2, #128	; 0x80
 80025bc:	4393      	bics	r3, r2
 80025be:	001a      	movs	r2, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a0c      	ldr	r2, [pc, #48]	; (8002614 <TIM_Base_SetConfig+0xe4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00b      	beq.n	80025fe <TIM_Base_SetConfig+0xce>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a0d      	ldr	r2, [pc, #52]	; (8002620 <TIM_Base_SetConfig+0xf0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d007      	beq.n	80025fe <TIM_Base_SetConfig+0xce>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a0c      	ldr	r2, [pc, #48]	; (8002624 <TIM_Base_SetConfig+0xf4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d003      	beq.n	80025fe <TIM_Base_SetConfig+0xce>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a0b      	ldr	r2, [pc, #44]	; (8002628 <TIM_Base_SetConfig+0xf8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d103      	bne.n	8002606 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	615a      	str	r2, [r3, #20]
}
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b004      	add	sp, #16
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40012c00 	.word	0x40012c00
 8002618:	40000400 	.word	0x40000400
 800261c:	40002000 	.word	0x40002000
 8002620:	40014000 	.word	0x40014000
 8002624:	40014400 	.word	0x40014400
 8002628:	40014800 	.word	0x40014800
 800262c:	fffffcff 	.word	0xfffffcff

08002630 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	2201      	movs	r2, #1
 8002648:	4393      	bics	r3, r2
 800264a:	001a      	movs	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	22f0      	movs	r2, #240	; 0xf0
 800265a:	4393      	bics	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	220a      	movs	r2, #10
 800266c:	4393      	bics	r3, r2
 800266e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	4313      	orrs	r3, r2
 8002676:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	621a      	str	r2, [r3, #32]
}
 8002684:	46c0      	nop			; (mov r8, r8)
 8002686:	46bd      	mov	sp, r7
 8002688:	b006      	add	sp, #24
 800268a:	bd80      	pop	{r7, pc}

0800268c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	2210      	movs	r2, #16
 800269e:	4393      	bics	r3, r2
 80026a0:	001a      	movs	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	4a0d      	ldr	r2, [pc, #52]	; (80026ec <TIM_TI2_ConfigInputStage+0x60>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	031b      	lsls	r3, r3, #12
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	22a0      	movs	r2, #160	; 0xa0
 80026c8:	4393      	bics	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	621a      	str	r2, [r3, #32]
}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b006      	add	sp, #24
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	ffff0fff 	.word	0xffff0fff

080026f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2270      	movs	r2, #112	; 0x70
 8002704:	4393      	bics	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	2207      	movs	r2, #7
 8002710:	4313      	orrs	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	609a      	str	r2, [r3, #8]
}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	46bd      	mov	sp, r7
 800271e:	b004      	add	sp, #16
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	4a09      	ldr	r2, [pc, #36]	; (8002760 <TIM_ETR_SetConfig+0x3c>)
 800273c:	4013      	ands	r3, r2
 800273e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	021a      	lsls	r2, r3, #8
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	431a      	orrs	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4313      	orrs	r3, r2
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	609a      	str	r2, [r3, #8]
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	b006      	add	sp, #24
 800275e:	bd80      	pop	{r7, pc}
 8002760:	ffff00ff 	.word	0xffff00ff

08002764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	223c      	movs	r2, #60	; 0x3c
 8002772:	5c9b      	ldrb	r3, [r3, r2]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002778:	2302      	movs	r3, #2
 800277a:	e047      	b.n	800280c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	223c      	movs	r2, #60	; 0x3c
 8002780:	2101      	movs	r1, #1
 8002782:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	223d      	movs	r2, #61	; 0x3d
 8002788:	2102      	movs	r1, #2
 800278a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2270      	movs	r2, #112	; 0x70
 80027a0:	4393      	bics	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a16      	ldr	r2, [pc, #88]	; (8002814 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d00f      	beq.n	80027e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	05db      	lsls	r3, r3, #23
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d009      	beq.n	80027e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a11      	ldr	r2, [pc, #68]	; (8002818 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d004      	beq.n	80027e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a10      	ldr	r2, [pc, #64]	; (800281c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d10c      	bne.n	80027fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2280      	movs	r2, #128	; 0x80
 80027e4:	4393      	bics	r3, r2
 80027e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	223d      	movs	r2, #61	; 0x3d
 80027fe:	2101      	movs	r1, #1
 8002800:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	223c      	movs	r2, #60	; 0x3c
 8002806:	2100      	movs	r1, #0
 8002808:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	0018      	movs	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	b004      	add	sp, #16
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40012c00 	.word	0x40012c00
 8002818:	40000400 	.word	0x40000400
 800281c:	40014000 	.word	0x40014000

08002820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002828:	46c0      	nop			; (mov r8, r8)
 800282a:	46bd      	mov	sp, r7
 800282c:	b002      	add	sp, #8
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002838:	46c0      	nop			; (mov r8, r8)
 800283a:	46bd      	mov	sp, r7
 800283c:	b002      	add	sp, #8
 800283e:	bd80      	pop	{r7, pc}

08002840 <__libc_init_array>:
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	2600      	movs	r6, #0
 8002844:	4d0c      	ldr	r5, [pc, #48]	; (8002878 <__libc_init_array+0x38>)
 8002846:	4c0d      	ldr	r4, [pc, #52]	; (800287c <__libc_init_array+0x3c>)
 8002848:	1b64      	subs	r4, r4, r5
 800284a:	10a4      	asrs	r4, r4, #2
 800284c:	42a6      	cmp	r6, r4
 800284e:	d109      	bne.n	8002864 <__libc_init_array+0x24>
 8002850:	2600      	movs	r6, #0
 8002852:	f000 f821 	bl	8002898 <_init>
 8002856:	4d0a      	ldr	r5, [pc, #40]	; (8002880 <__libc_init_array+0x40>)
 8002858:	4c0a      	ldr	r4, [pc, #40]	; (8002884 <__libc_init_array+0x44>)
 800285a:	1b64      	subs	r4, r4, r5
 800285c:	10a4      	asrs	r4, r4, #2
 800285e:	42a6      	cmp	r6, r4
 8002860:	d105      	bne.n	800286e <__libc_init_array+0x2e>
 8002862:	bd70      	pop	{r4, r5, r6, pc}
 8002864:	00b3      	lsls	r3, r6, #2
 8002866:	58eb      	ldr	r3, [r5, r3]
 8002868:	4798      	blx	r3
 800286a:	3601      	adds	r6, #1
 800286c:	e7ee      	b.n	800284c <__libc_init_array+0xc>
 800286e:	00b3      	lsls	r3, r6, #2
 8002870:	58eb      	ldr	r3, [r5, r3]
 8002872:	4798      	blx	r3
 8002874:	3601      	adds	r6, #1
 8002876:	e7f2      	b.n	800285e <__libc_init_array+0x1e>
 8002878:	08002920 	.word	0x08002920
 800287c:	08002920 	.word	0x08002920
 8002880:	08002920 	.word	0x08002920
 8002884:	08002924 	.word	0x08002924

08002888 <memset>:
 8002888:	0003      	movs	r3, r0
 800288a:	1882      	adds	r2, r0, r2
 800288c:	4293      	cmp	r3, r2
 800288e:	d100      	bne.n	8002892 <memset+0xa>
 8002890:	4770      	bx	lr
 8002892:	7019      	strb	r1, [r3, #0]
 8002894:	3301      	adds	r3, #1
 8002896:	e7f9      	b.n	800288c <memset+0x4>

08002898 <_init>:
 8002898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289e:	bc08      	pop	{r3}
 80028a0:	469e      	mov	lr, r3
 80028a2:	4770      	bx	lr

080028a4 <_fini>:
 80028a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028aa:	bc08      	pop	{r3}
 80028ac:	469e      	mov	lr, r3
 80028ae:	4770      	bx	lr

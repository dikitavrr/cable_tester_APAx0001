
CableTesterATAx0001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002498  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002554  08002554  00012554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800258c  0800258c  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  0800258c  0800258c  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800258c  0800258c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800258c  0800258c  0001258c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002590  08002590  00012590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000030  080025c4  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080025c4  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008139  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001497  00000000  00000000  00028191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  00029628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  00029ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e60  00000000  00000000  0002a710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009af1  00000000  00000000  00044570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a03d7  00000000  00000000  0004e061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee438  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f50  00000000  00000000  000ee488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000030 	.word	0x20000030
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800253c 	.word	0x0800253c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000034 	.word	0x20000034
 8000100:	0800253c 	.word	0x0800253c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f000 fd45 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 fac5 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 fb67 	bl	80008fc <MX_GPIO_Init>
  MX_TIM3_Init();
 800022e:	f000 fb0d 	bl	800084c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Установить все линии в первоначальное положение светодиодов
  HAL_GPIO_WritePin(STP_SR_LED_nCLR_GPIO_Port, STP_SR_LED_nCLR_Pin, GPIO_PIN_SET);
 8000232:	2390      	movs	r3, #144	; 0x90
 8000234:	05db      	lsls	r3, r3, #23
 8000236:	2201      	movs	r2, #1
 8000238:	2140      	movs	r1, #64	; 0x40
 800023a:	0018      	movs	r0, r3
 800023c:	f001 f80f 	bl	800125e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STP_SR_LED_CLK_GPIO_Port, STP_SR_LED_CLK_Pin, GPIO_PIN_RESET);
 8000240:	2390      	movs	r3, #144	; 0x90
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	2200      	movs	r2, #0
 8000246:	2180      	movs	r1, #128	; 0x80
 8000248:	0018      	movs	r0, r3
 800024a:	f001 f808 	bl	800125e <HAL_GPIO_WritePin>
  // Установить все линии в первоначальное положение прозвонки и чтения
  HAL_GPIO_WritePin(LINE_CALL_SR_CLK_GPIO_Port, LINE_CALL_SR_CLK_Pin, GPIO_PIN_RESET);
 800024e:	4b4d      	ldr	r3, [pc, #308]	; (8000384 <main+0x168>)
 8000250:	2200      	movs	r2, #0
 8000252:	2140      	movs	r1, #64	; 0x40
 8000254:	0018      	movs	r0, r3
 8000256:	f001 f802 	bl	800125e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LINE_RESPONSE_SR_CLK_GPIO_Port, LINE_RESPONSE_SR_CLK_Pin, GPIO_PIN_RESET);
 800025a:	4b4a      	ldr	r3, [pc, #296]	; (8000384 <main+0x168>)
 800025c:	2200      	movs	r2, #0
 800025e:	2108      	movs	r1, #8
 8000260:	0018      	movs	r0, r3
 8000262:	f000 fffc 	bl	800125e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LINE_CALL_SR_nCLR_GPIO_Port, LINE_CALL_SR_nCLR_Pin, GPIO_PIN_SET);
 8000266:	4b47      	ldr	r3, [pc, #284]	; (8000384 <main+0x168>)
 8000268:	2201      	movs	r2, #1
 800026a:	2120      	movs	r1, #32
 800026c:	0018      	movs	r0, r3
 800026e:	f000 fff6 	bl	800125e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LINE_RESPONSE_SR_SHnLD_GPIO_Port, LINE_RESPONSE_SR_SHnLD_Pin, GPIO_PIN_SET);
 8000272:	2380      	movs	r3, #128	; 0x80
 8000274:	0219      	lsls	r1, r3, #8
 8000276:	2390      	movs	r3, #144	; 0x90
 8000278:	05db      	lsls	r3, r3, #23
 800027a:	2201      	movs	r2, #1
 800027c:	0018      	movs	r0, r3
 800027e:	f000 ffee 	bl	800125e <HAL_GPIO_WritePin>



  ClearLEDSR();
 8000282:	f000 fbc5 	bl	8000a10 <ClearLEDSR>
  ClearCallSR();
 8000286:	f000 fc47 	bl	8000b18 <ClearCallSR>
  // Запустить таймер
  if (USE_TIMER) {

  HAL_TIM_Base_Start_IT(&htim3);
 800028a:	4b3f      	ldr	r3, [pc, #252]	; (8000388 <main+0x16c>)
 800028c:	0018      	movs	r0, r3
 800028e:	f001 fd45 	bl	8001d1c <HAL_TIM_Base_Start_IT>
  }

                                                   /* TIME SETTINGS*/

  /*AHBPrescTable * APBPrescTable */
  g_frequency = HAL_RCC_GetPCLK1Freq();
 8000292:	f001 fcdd 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 8000296:	0002      	movs	r2, r0
 8000298:	4b3c      	ldr	r3, [pc, #240]	; (800038c <main+0x170>)
 800029a:	601a      	str	r2, [r3, #0]

  //HAL_RCC_GetClockConfig(&sClokConfig, &pFLatency);
  //u32Prescaler = sClokConfig.APB1CLKDivider;
  u32Prescaler = htim3.Init.Prescaler;
 800029c:	4b3a      	ldr	r3, [pc, #232]	; (8000388 <main+0x16c>)
 800029e:	685a      	ldr	r2, [r3, #4]
 80002a0:	4b3b      	ldr	r3, [pc, #236]	; (8000390 <main+0x174>)
 80002a2:	601a      	str	r2, [r3, #0]
  g_u32TimePeriod = ((g_frequency * TIME_BLINKING_LED_MS) / ((u32Prescaler + 1) * 1000)) - 1;
 80002a4:	4b39      	ldr	r3, [pc, #228]	; (800038c <main+0x170>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2264      	movs	r2, #100	; 0x64
 80002aa:	435a      	muls	r2, r3
 80002ac:	0010      	movs	r0, r2
 80002ae:	4b38      	ldr	r3, [pc, #224]	; (8000390 <main+0x174>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	1c5a      	adds	r2, r3, #1
 80002b4:	0013      	movs	r3, r2
 80002b6:	015b      	lsls	r3, r3, #5
 80002b8:	1a9b      	subs	r3, r3, r2
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	189b      	adds	r3, r3, r2
 80002be:	00db      	lsls	r3, r3, #3
 80002c0:	0019      	movs	r1, r3
 80002c2:	f7ff ff1f 	bl	8000104 <__udivsi3>
 80002c6:	0003      	movs	r3, r0
 80002c8:	1e5a      	subs	r2, r3, #1
 80002ca:	4b32      	ldr	r3, [pc, #200]	; (8000394 <main+0x178>)
 80002cc:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_AUTORELOAD(&htim3, g_u32TimePeriod);
 80002ce:	4b2e      	ldr	r3, [pc, #184]	; (8000388 <main+0x16c>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a30      	ldr	r2, [pc, #192]	; (8000394 <main+0x178>)
 80002d4:	6812      	ldr	r2, [r2, #0]
 80002d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80002d8:	4b2e      	ldr	r3, [pc, #184]	; (8000394 <main+0x178>)
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <main+0x16c>)
 80002de:	60da      	str	r2, [r3, #12]

    /* USER CODE BEGIN 3 */

	                                                  /* ringing of lines */
//хочу чтобы 00000001 прошёл поочерёдно по 8 линиям и результат записался в двумерный массив
if (g_u8NeedToRingLine) {
 80002e0:	4b2d      	ldr	r3, [pc, #180]	; (8000398 <main+0x17c>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d100      	bne.n	80002ea <main+0xce>
 80002e8:	e07d      	b.n	80003e6 <main+0x1ca>

	ClearCallSR();
 80002ea:	f000 fc15 	bl	8000b18 <ClearCallSR>

	HAL_GPIO_WritePin(LINE_CALL_SR_DATA_GPIO_Port, LINE_CALL_SR_DATA_Pin, GPIO_PIN_SET);
 80002ee:	4b25      	ldr	r3, [pc, #148]	; (8000384 <main+0x168>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	2180      	movs	r1, #128	; 0x80
 80002f4:	0018      	movs	r0, r3
 80002f6:	f000 ffb2 	bl	800125e <HAL_GPIO_WritePin>

	for (CallColumn = 0; CallColumn < NUMBER_OF_LINES; CallColumn++) {
 80002fa:	4b28      	ldr	r3, [pc, #160]	; (800039c <main+0x180>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	701a      	strb	r2, [r3, #0]
 8000300:	e06d      	b.n	80003de <main+0x1c2>

		HAL_GPIO_WritePin(LINE_CALL_SR_CLK_GPIO_Port, LINE_CALL_SR_CLK_Pin, GPIO_PIN_SET);
 8000302:	4b20      	ldr	r3, [pc, #128]	; (8000384 <main+0x168>)
 8000304:	2201      	movs	r2, #1
 8000306:	2140      	movs	r1, #64	; 0x40
 8000308:	0018      	movs	r0, r3
 800030a:	f000 ffa8 	bl	800125e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LINE_CALL_SR_CLK_GPIO_Port, LINE_CALL_SR_CLK_Pin, GPIO_PIN_RESET);
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <main+0x168>)
 8000310:	2200      	movs	r2, #0
 8000312:	2140      	movs	r1, #64	; 0x40
 8000314:	0018      	movs	r0, r3
 8000316:	f000 ffa2 	bl	800125e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LINE_RESPONSE_SR_SHnLD_GPIO_Port, LINE_RESPONSE_SR_SHnLD_Pin, GPIO_PIN_RESET);
 800031a:	2380      	movs	r3, #128	; 0x80
 800031c:	0219      	lsls	r1, r3, #8
 800031e:	2390      	movs	r3, #144	; 0x90
 8000320:	05db      	lsls	r3, r3, #23
 8000322:	2200      	movs	r2, #0
 8000324:	0018      	movs	r0, r3
 8000326:	f000 ff9a 	bl	800125e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LINE_RESPONSE_SR_SHnLD_GPIO_Port, LINE_RESPONSE_SR_SHnLD_Pin, GPIO_PIN_SET);
 800032a:	2380      	movs	r3, #128	; 0x80
 800032c:	0219      	lsls	r1, r3, #8
 800032e:	2390      	movs	r3, #144	; 0x90
 8000330:	05db      	lsls	r3, r3, #23
 8000332:	2201      	movs	r2, #1
 8000334:	0018      	movs	r0, r3
 8000336:	f000 ff92 	bl	800125e <HAL_GPIO_WritePin>

		for (RespString = 0; RespString < NUMBER_OF_LINES; RespString++) {
 800033a:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <main+0x184>)
 800033c:	2200      	movs	r2, #0
 800033e:	701a      	strb	r2, [r3, #0]
 8000340:	e043      	b.n	80003ca <main+0x1ae>

	//		for (uint8_t i = 0; i < NUMBER_OF_LINES; i++) {
				HAL_GPIO_WritePin(LINE_RESPONSE_SR_CLK_GPIO_Port, LINE_RESPONSE_SR_CLK_Pin, GPIO_PIN_SET);
 8000342:	4b10      	ldr	r3, [pc, #64]	; (8000384 <main+0x168>)
 8000344:	2201      	movs	r2, #1
 8000346:	2108      	movs	r1, #8
 8000348:	0018      	movs	r0, r3
 800034a:	f000 ff88 	bl	800125e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LINE_RESPONSE_SR_CLK_GPIO_Port, LINE_RESPONSE_SR_CLK_Pin, GPIO_PIN_RESET);
 800034e:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <main+0x168>)
 8000350:	2200      	movs	r2, #0
 8000352:	2108      	movs	r1, #8
 8000354:	0018      	movs	r0, r3
 8000356:	f000 ff82 	bl	800125e <HAL_GPIO_WritePin>

				if (HAL_GPIO_ReadPin(LINE_RESPONSE_SR_DATA_GPIO_Port, LINE_RESPONSE_SR_DATA_Pin) == GPIO_PIN_SET) {
 800035a:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <main+0x168>)
 800035c:	2110      	movs	r1, #16
 800035e:	0018      	movs	r0, r3
 8000360:	f000 ff60 	bl	8001224 <HAL_GPIO_ReadPin>
 8000364:	0003      	movs	r3, r0
 8000366:	2b01      	cmp	r3, #1
 8000368:	d11e      	bne.n	80003a8 <main+0x18c>
					g_au8ResponsesData[CallColumn][RespString] = 1;
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <main+0x180>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	0018      	movs	r0, r3
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <main+0x184>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	0019      	movs	r1, r3
 8000376:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <main+0x188>)
 8000378:	00c3      	lsls	r3, r0, #3
 800037a:	18d3      	adds	r3, r2, r3
 800037c:	2201      	movs	r2, #1
 800037e:	545a      	strb	r2, [r3, r1]
 8000380:	e01d      	b.n	80003be <main+0x1a2>
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	48000400 	.word	0x48000400
 8000388:	2000004c 	.word	0x2000004c
 800038c:	200000ac 	.word	0x200000ac
 8000390:	200000a8 	.word	0x200000a8
 8000394:	200000a4 	.word	0x200000a4
 8000398:	20000003 	.word	0x20000003
 800039c:	200000b0 	.word	0x200000b0
 80003a0:	200000b1 	.word	0x200000b1
 80003a4:	200000b4 	.word	0x200000b4
				}
				else {
					g_au8ResponsesData[CallColumn][RespString] = 0;
 80003a8:	4bdb      	ldr	r3, [pc, #876]	; (8000718 <main+0x4fc>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	0018      	movs	r0, r3
 80003ae:	4bdb      	ldr	r3, [pc, #876]	; (800071c <main+0x500>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	0019      	movs	r1, r3
 80003b4:	4ada      	ldr	r2, [pc, #872]	; (8000720 <main+0x504>)
 80003b6:	00c3      	lsls	r3, r0, #3
 80003b8:	18d3      	adds	r3, r2, r3
 80003ba:	2200      	movs	r2, #0
 80003bc:	545a      	strb	r2, [r3, r1]
		for (RespString = 0; RespString < NUMBER_OF_LINES; RespString++) {
 80003be:	4bd7      	ldr	r3, [pc, #860]	; (800071c <main+0x500>)
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	3301      	adds	r3, #1
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	4bd5      	ldr	r3, [pc, #852]	; (800071c <main+0x500>)
 80003c8:	701a      	strb	r2, [r3, #0]
 80003ca:	4bd4      	ldr	r3, [pc, #848]	; (800071c <main+0x500>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b07      	cmp	r3, #7
 80003d0:	d9b7      	bls.n	8000342 <main+0x126>
	for (CallColumn = 0; CallColumn < NUMBER_OF_LINES; CallColumn++) {
 80003d2:	4bd1      	ldr	r3, [pc, #836]	; (8000718 <main+0x4fc>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	3301      	adds	r3, #1
 80003d8:	b2da      	uxtb	r2, r3
 80003da:	4bcf      	ldr	r3, [pc, #828]	; (8000718 <main+0x4fc>)
 80003dc:	701a      	strb	r2, [r3, #0]
 80003de:	4bce      	ldr	r3, [pc, #824]	; (8000718 <main+0x4fc>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b07      	cmp	r3, #7
 80003e4:	d98d      	bls.n	8000302 <main+0xe6>

                                                      /* data processing */
//хочу чтобы двумерный массив обработался и на основе обработки сгенерировались данные для отображения
	  //сформировали что отобразить

	  if (g_u8StepNumber == 0){
 80003e6:	4bcf      	ldr	r3, [pc, #828]	; (8000724 <main+0x508>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d000      	beq.n	80003f0 <main+0x1d4>
 80003ee:	e09b      	b.n	8000528 <main+0x30c>

		  if (g_u8ActiveRowColor == GREEN_COLOR) {
 80003f0:	4bcd      	ldr	r3, [pc, #820]	; (8000728 <main+0x50c>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d129      	bne.n	800044c <main+0x230>
			  if ((g_u8ActiveLED >= 0) && (g_u8ActiveLED < NUMBER_OF_LEDS/2)) {
 80003f8:	4bcc      	ldr	r3, [pc, #816]	; (800072c <main+0x510>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b07      	cmp	r3, #7
 80003fe:	d80d      	bhi.n	800041c <main+0x200>
				  g_u8LEDCallGreenData = (LED_ON << g_au8GreenCalls[g_u8ActiveRow]);
 8000400:	4bcb      	ldr	r3, [pc, #812]	; (8000730 <main+0x514>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	001a      	movs	r2, r3
 8000406:	4bcb      	ldr	r3, [pc, #812]	; (8000734 <main+0x518>)
 8000408:	5c9b      	ldrb	r3, [r3, r2]
 800040a:	001a      	movs	r2, r3
 800040c:	2301      	movs	r3, #1
 800040e:	4093      	lsls	r3, r2
 8000410:	b2da      	uxtb	r2, r3
 8000412:	4bc9      	ldr	r3, [pc, #804]	; (8000738 <main+0x51c>)
 8000414:	701a      	strb	r2, [r3, #0]
				  g_u8LEDCallRedData = LED_OFF;
 8000416:	4bc9      	ldr	r3, [pc, #804]	; (800073c <main+0x520>)
 8000418:	2200      	movs	r2, #0
 800041a:	701a      	strb	r2, [r3, #0]
			  }
			  if ((g_u8ActiveLED >= NUMBER_OF_LEDS/2) && (g_u8ActiveLED < NUMBER_OF_LEDS)) {
 800041c:	4bc3      	ldr	r3, [pc, #780]	; (800072c <main+0x510>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b07      	cmp	r3, #7
 8000422:	d913      	bls.n	800044c <main+0x230>
 8000424:	4bc1      	ldr	r3, [pc, #772]	; (800072c <main+0x510>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b0f      	cmp	r3, #15
 800042a:	d80f      	bhi.n	800044c <main+0x230>
			  g_u8LEDRespGreenData = (LED_ON << g_au8GreenResponses[NUMBER_OF_LINES - g_u8ActiveRow - 1]);
 800042c:	4bc0      	ldr	r3, [pc, #768]	; (8000730 <main+0x514>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	001a      	movs	r2, r3
 8000432:	2307      	movs	r3, #7
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	4ac2      	ldr	r2, [pc, #776]	; (8000740 <main+0x524>)
 8000438:	5cd3      	ldrb	r3, [r2, r3]
 800043a:	001a      	movs	r2, r3
 800043c:	2301      	movs	r3, #1
 800043e:	4093      	lsls	r3, r2
 8000440:	b2da      	uxtb	r2, r3
 8000442:	4bc0      	ldr	r3, [pc, #768]	; (8000744 <main+0x528>)
 8000444:	701a      	strb	r2, [r3, #0]
			  g_u8LEDRespRedData = LED_OFF;
 8000446:	4bc0      	ldr	r3, [pc, #768]	; (8000748 <main+0x52c>)
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  if (g_u8ActiveRowColor == RED_COLOR) {
 800044c:	4bb6      	ldr	r3, [pc, #728]	; (8000728 <main+0x50c>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b02      	cmp	r3, #2
 8000452:	d129      	bne.n	80004a8 <main+0x28c>
			  if ((g_u8ActiveLED >= 0) && (g_u8ActiveLED < NUMBER_OF_LEDS/2)) {
 8000454:	4bb5      	ldr	r3, [pc, #724]	; (800072c <main+0x510>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b07      	cmp	r3, #7
 800045a:	d80d      	bhi.n	8000478 <main+0x25c>
				  g_u8LEDCallRedData = LED_ON << g_au8RedCalls[g_u8ActiveRow];
 800045c:	4bb4      	ldr	r3, [pc, #720]	; (8000730 <main+0x514>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	001a      	movs	r2, r3
 8000462:	4bba      	ldr	r3, [pc, #744]	; (800074c <main+0x530>)
 8000464:	5c9b      	ldrb	r3, [r3, r2]
 8000466:	001a      	movs	r2, r3
 8000468:	2301      	movs	r3, #1
 800046a:	4093      	lsls	r3, r2
 800046c:	b2da      	uxtb	r2, r3
 800046e:	4bb3      	ldr	r3, [pc, #716]	; (800073c <main+0x520>)
 8000470:	701a      	strb	r2, [r3, #0]
				  g_u8LEDCallGreenData = LED_OFF;
 8000472:	4bb1      	ldr	r3, [pc, #708]	; (8000738 <main+0x51c>)
 8000474:	2200      	movs	r2, #0
 8000476:	701a      	strb	r2, [r3, #0]
			  }
			  if ((g_u8ActiveLED >= NUMBER_OF_LEDS/2) && (g_u8ActiveLED < NUMBER_OF_LEDS)) {
 8000478:	4bac      	ldr	r3, [pc, #688]	; (800072c <main+0x510>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b07      	cmp	r3, #7
 800047e:	d913      	bls.n	80004a8 <main+0x28c>
 8000480:	4baa      	ldr	r3, [pc, #680]	; (800072c <main+0x510>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b0f      	cmp	r3, #15
 8000486:	d80f      	bhi.n	80004a8 <main+0x28c>
				  g_u8LEDRespRedData = LED_ON << g_au8RedResponses[NUMBER_OF_LINES - g_u8ActiveRow - 1];
 8000488:	4ba9      	ldr	r3, [pc, #676]	; (8000730 <main+0x514>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	001a      	movs	r2, r3
 800048e:	2307      	movs	r3, #7
 8000490:	1a9b      	subs	r3, r3, r2
 8000492:	4aaf      	ldr	r2, [pc, #700]	; (8000750 <main+0x534>)
 8000494:	5cd3      	ldrb	r3, [r2, r3]
 8000496:	001a      	movs	r2, r3
 8000498:	2301      	movs	r3, #1
 800049a:	4093      	lsls	r3, r2
 800049c:	b2da      	uxtb	r2, r3
 800049e:	4baa      	ldr	r3, [pc, #680]	; (8000748 <main+0x52c>)
 80004a0:	701a      	strb	r2, [r3, #0]
				  g_u8LEDRespGreenData = LED_OFF;
 80004a2:	4ba8      	ldr	r3, [pc, #672]	; (8000744 <main+0x528>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  if (g_u8ActiveRowColor == YELLOW_COLOR) {
 80004a8:	4b9f      	ldr	r3, [pc, #636]	; (8000728 <main+0x50c>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d13b      	bne.n	8000528 <main+0x30c>
			  if ((g_u8ActiveLED >= 0) && (g_u8ActiveLED < NUMBER_OF_LEDS/2)) {
 80004b0:	4b9e      	ldr	r3, [pc, #632]	; (800072c <main+0x510>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b07      	cmp	r3, #7
 80004b6:	d815      	bhi.n	80004e4 <main+0x2c8>
				  g_u8LEDCallGreenData = LED_ON << g_au8GreenCalls[g_u8ActiveRow];
 80004b8:	4b9d      	ldr	r3, [pc, #628]	; (8000730 <main+0x514>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	001a      	movs	r2, r3
 80004be:	4b9d      	ldr	r3, [pc, #628]	; (8000734 <main+0x518>)
 80004c0:	5c9b      	ldrb	r3, [r3, r2]
 80004c2:	001a      	movs	r2, r3
 80004c4:	2301      	movs	r3, #1
 80004c6:	4093      	lsls	r3, r2
 80004c8:	b2da      	uxtb	r2, r3
 80004ca:	4b9b      	ldr	r3, [pc, #620]	; (8000738 <main+0x51c>)
 80004cc:	701a      	strb	r2, [r3, #0]
			      g_u8LEDCallRedData = LED_ON << g_au8RedCalls[g_u8ActiveRow];
 80004ce:	4b98      	ldr	r3, [pc, #608]	; (8000730 <main+0x514>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	001a      	movs	r2, r3
 80004d4:	4b9d      	ldr	r3, [pc, #628]	; (800074c <main+0x530>)
 80004d6:	5c9b      	ldrb	r3, [r3, r2]
 80004d8:	001a      	movs	r2, r3
 80004da:	2301      	movs	r3, #1
 80004dc:	4093      	lsls	r3, r2
 80004de:	b2da      	uxtb	r2, r3
 80004e0:	4b96      	ldr	r3, [pc, #600]	; (800073c <main+0x520>)
 80004e2:	701a      	strb	r2, [r3, #0]
			  }
			  if ((g_u8ActiveLED >= NUMBER_OF_LEDS/2) && (g_u8ActiveLED < NUMBER_OF_LEDS)) {
 80004e4:	4b91      	ldr	r3, [pc, #580]	; (800072c <main+0x510>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b07      	cmp	r3, #7
 80004ea:	d91d      	bls.n	8000528 <main+0x30c>
 80004ec:	4b8f      	ldr	r3, [pc, #572]	; (800072c <main+0x510>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b0f      	cmp	r3, #15
 80004f2:	d819      	bhi.n	8000528 <main+0x30c>
				  g_u8LEDRespGreenData = LED_ON << g_au8GreenResponses[NUMBER_OF_LINES - g_u8ActiveRow - 1];
 80004f4:	4b8e      	ldr	r3, [pc, #568]	; (8000730 <main+0x514>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	001a      	movs	r2, r3
 80004fa:	2307      	movs	r3, #7
 80004fc:	1a9b      	subs	r3, r3, r2
 80004fe:	4a90      	ldr	r2, [pc, #576]	; (8000740 <main+0x524>)
 8000500:	5cd3      	ldrb	r3, [r2, r3]
 8000502:	001a      	movs	r2, r3
 8000504:	2301      	movs	r3, #1
 8000506:	4093      	lsls	r3, r2
 8000508:	b2da      	uxtb	r2, r3
 800050a:	4b8e      	ldr	r3, [pc, #568]	; (8000744 <main+0x528>)
 800050c:	701a      	strb	r2, [r3, #0]
				  g_u8LEDRespRedData = LED_ON << g_au8RedResponses[NUMBER_OF_LINES - g_u8ActiveRow - 1];
 800050e:	4b88      	ldr	r3, [pc, #544]	; (8000730 <main+0x514>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	001a      	movs	r2, r3
 8000514:	2307      	movs	r3, #7
 8000516:	1a9b      	subs	r3, r3, r2
 8000518:	4a8d      	ldr	r2, [pc, #564]	; (8000750 <main+0x534>)
 800051a:	5cd3      	ldrb	r3, [r2, r3]
 800051c:	001a      	movs	r2, r3
 800051e:	2301      	movs	r3, #1
 8000520:	4093      	lsls	r3, r2
 8000522:	b2da      	uxtb	r2, r3
 8000524:	4b88      	ldr	r3, [pc, #544]	; (8000748 <main+0x52c>)
 8000526:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }

	  if (g_u8StepNumber != 0) {
 8000528:	4b7e      	ldr	r3, [pc, #504]	; (8000724 <main+0x508>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d05b      	beq.n	80005e8 <main+0x3cc>

	  //g_u8BinaryGreen = g_u8BinaryGreen | (SR_DATA_bm << g_au8GreenCalls[NUMBER_OF_LINES - g_u8StepNumber]); /*для того, чтобы осталось перемигиваться раскомментить*/

	 // g_u8BinaryRed = g_u8BinaryRed | (SR_DATA_bm << g_au8RedCalls[NUMBER_OF_LINES - g_u8StepNumber]);

		  if (g_u8ActiveRowColor == GREEN_COLOR) {
 8000530:	4b7d      	ldr	r3, [pc, #500]	; (8000728 <main+0x50c>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d129      	bne.n	800058c <main+0x370>

			  g_u8LEDCallGreenData = (LED_ON << g_au8GreenCalls[g_u8ActiveRow]) | (g_u8ColumnGreen);
 8000538:	4b7d      	ldr	r3, [pc, #500]	; (8000730 <main+0x514>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	001a      	movs	r2, r3
 800053e:	4b7d      	ldr	r3, [pc, #500]	; (8000734 <main+0x518>)
 8000540:	5c9b      	ldrb	r3, [r3, r2]
 8000542:	001a      	movs	r2, r3
 8000544:	2301      	movs	r3, #1
 8000546:	4093      	lsls	r3, r2
 8000548:	b25a      	sxtb	r2, r3
 800054a:	4b82      	ldr	r3, [pc, #520]	; (8000754 <main+0x538>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	b25b      	sxtb	r3, r3
 8000550:	4313      	orrs	r3, r2
 8000552:	b25b      	sxtb	r3, r3
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b78      	ldr	r3, [pc, #480]	; (8000738 <main+0x51c>)
 8000558:	701a      	strb	r2, [r3, #0]
			  g_u8LEDRespGreenData = (LED_ON << g_au8GreenResponses[NUMBER_OF_LINES - g_u8ActiveRow]) | (g_u8ColumnGreen);
 800055a:	4b75      	ldr	r3, [pc, #468]	; (8000730 <main+0x514>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	001a      	movs	r2, r3
 8000560:	2308      	movs	r3, #8
 8000562:	1a9b      	subs	r3, r3, r2
 8000564:	4a76      	ldr	r2, [pc, #472]	; (8000740 <main+0x524>)
 8000566:	5cd3      	ldrb	r3, [r2, r3]
 8000568:	001a      	movs	r2, r3
 800056a:	2301      	movs	r3, #1
 800056c:	4093      	lsls	r3, r2
 800056e:	b25a      	sxtb	r2, r3
 8000570:	4b78      	ldr	r3, [pc, #480]	; (8000754 <main+0x538>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	b25b      	sxtb	r3, r3
 8000576:	4313      	orrs	r3, r2
 8000578:	b25b      	sxtb	r3, r3
 800057a:	b2da      	uxtb	r2, r3
 800057c:	4b71      	ldr	r3, [pc, #452]	; (8000744 <main+0x528>)
 800057e:	701a      	strb	r2, [r3, #0]
			  g_u8LEDCallRedData = LED_OFF /*| (g_u8BinaryRed)*/;
 8000580:	4b6e      	ldr	r3, [pc, #440]	; (800073c <main+0x520>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
			  g_u8LEDRespRedData = LED_OFF /*| (g_u8BinaryRed)*/;
 8000586:	4b70      	ldr	r3, [pc, #448]	; (8000748 <main+0x52c>)
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
		  }
		  if (g_u8ActiveRowColor == RED_COLOR) {
 800058c:	4b66      	ldr	r3, [pc, #408]	; (8000728 <main+0x50c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b02      	cmp	r3, #2
 8000592:	d129      	bne.n	80005e8 <main+0x3cc>

			  g_u8LEDCallRedData = (LED_ON << g_au8RedCalls[g_u8ActiveRow]) | (g_u8ColumnRed);
 8000594:	4b66      	ldr	r3, [pc, #408]	; (8000730 <main+0x514>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	001a      	movs	r2, r3
 800059a:	4b6c      	ldr	r3, [pc, #432]	; (800074c <main+0x530>)
 800059c:	5c9b      	ldrb	r3, [r3, r2]
 800059e:	001a      	movs	r2, r3
 80005a0:	2301      	movs	r3, #1
 80005a2:	4093      	lsls	r3, r2
 80005a4:	b25a      	sxtb	r2, r3
 80005a6:	4b6c      	ldr	r3, [pc, #432]	; (8000758 <main+0x53c>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	4313      	orrs	r3, r2
 80005ae:	b25b      	sxtb	r3, r3
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b62      	ldr	r3, [pc, #392]	; (800073c <main+0x520>)
 80005b4:	701a      	strb	r2, [r3, #0]
			  g_u8LEDRespRedData = (LED_ON << g_au8RedResponses[NUMBER_OF_LINES - g_u8ActiveRow]) | (g_u8ColumnRed);
 80005b6:	4b5e      	ldr	r3, [pc, #376]	; (8000730 <main+0x514>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	001a      	movs	r2, r3
 80005bc:	2308      	movs	r3, #8
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	4a63      	ldr	r2, [pc, #396]	; (8000750 <main+0x534>)
 80005c2:	5cd3      	ldrb	r3, [r2, r3]
 80005c4:	001a      	movs	r2, r3
 80005c6:	2301      	movs	r3, #1
 80005c8:	4093      	lsls	r3, r2
 80005ca:	b25a      	sxtb	r2, r3
 80005cc:	4b62      	ldr	r3, [pc, #392]	; (8000758 <main+0x53c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	b25b      	sxtb	r3, r3
 80005d2:	4313      	orrs	r3, r2
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b5b      	ldr	r3, [pc, #364]	; (8000748 <main+0x52c>)
 80005da:	701a      	strb	r2, [r3, #0]
			  g_u8LEDCallGreenData = LED_OFF /*| (g_u8BinaryGreen)*/;
 80005dc:	4b56      	ldr	r3, [pc, #344]	; (8000738 <main+0x51c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
			  g_u8LEDRespGreenData = LED_OFF /*| (g_u8BinaryGreen)*/;
 80005e2:	4b58      	ldr	r3, [pc, #352]	; (8000744 <main+0x528>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
      }


	  //отобразили

	  if (g_u8NeedToDisplayLEDData) {
 80005e8:	4b5c      	ldr	r3, [pc, #368]	; (800075c <main+0x540>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d03a      	beq.n	8000666 <main+0x44a>
		  ClearLEDSR();
 80005f0:	f000 fa0e 	bl	8000a10 <ClearLEDSR>
		  LoadLEDSR();
 80005f4:	f000 fa20 	bl	8000a38 <LoadLEDSR>


		  if (USE_TIMER) {
			  g_u8NeedToDisplayLEDData = 0;
 80005f8:	4b58      	ldr	r3, [pc, #352]	; (800075c <main+0x540>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
		  }
		  g_u8ActiveLED++;
 80005fe:	4b4b      	ldr	r3, [pc, #300]	; (800072c <main+0x510>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b49      	ldr	r3, [pc, #292]	; (800072c <main+0x510>)
 8000608:	701a      	strb	r2, [r3, #0]
		  if (g_u8ActiveLED == NUMBER_OF_LEDS){
 800060a:	4b48      	ldr	r3, [pc, #288]	; (800072c <main+0x510>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b10      	cmp	r3, #16
 8000610:	d10f      	bne.n	8000632 <main+0x416>
		  g_u8ActiveRowColor++;
 8000612:	4b45      	ldr	r3, [pc, #276]	; (8000728 <main+0x50c>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4b43      	ldr	r3, [pc, #268]	; (8000728 <main+0x50c>)
 800061c:	701a      	strb	r2, [r3, #0]
		  g_u8ActiveLED = 0;
 800061e:	4b43      	ldr	r3, [pc, #268]	; (800072c <main+0x510>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
		  if (g_u8ActiveRowColor == NUMBER_OF_COLORS) {
 8000624:	4b40      	ldr	r3, [pc, #256]	; (8000728 <main+0x50c>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b04      	cmp	r3, #4
 800062a:	d102      	bne.n	8000632 <main+0x416>
			  g_u8ActiveRowColor = 1;
 800062c:	4b3e      	ldr	r3, [pc, #248]	; (8000728 <main+0x50c>)
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]

		  }
		  }
		 // g_u8ActiveRow++;

		  if (g_u8ActiveRow/* + g_u8StepNumber */== NUMBER_OF_LINES) {
 8000632:	4b3f      	ldr	r3, [pc, #252]	; (8000730 <main+0x514>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b08      	cmp	r3, #8
 8000638:	d102      	bne.n	8000640 <main+0x424>
			  g_u8ActiveRow = 0;
 800063a:	4b3d      	ldr	r3, [pc, #244]	; (8000730 <main+0x514>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
			  //g_u8StepNumber++;

			  }
		  g_u8ActiveRow++;
 8000640:	4b3b      	ldr	r3, [pc, #236]	; (8000730 <main+0x514>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	3301      	adds	r3, #1
 8000646:	b2da      	uxtb	r2, r3
 8000648:	4b39      	ldr	r3, [pc, #228]	; (8000730 <main+0x514>)
 800064a:	701a      	strb	r2, [r3, #0]
		  if (g_u8StepNumber == NUMBER_OF_LINES) {
 800064c:	4b35      	ldr	r3, [pc, #212]	; (8000724 <main+0x508>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b08      	cmp	r3, #8
 8000652:	d108      	bne.n	8000666 <main+0x44a>
				  //break;
				  g_u8StepNumber = 0;
 8000654:	4b33      	ldr	r3, [pc, #204]	; (8000724 <main+0x508>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
				  g_u8ColumnGreen = 0b00000000;
 800065a:	4b3e      	ldr	r3, [pc, #248]	; (8000754 <main+0x538>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
				  g_u8ColumnRed = 0b00000000;
 8000660:	4b3d      	ldr	r3, [pc, #244]	; (8000758 <main+0x53c>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
//			    g_u8DisplayAllLinesUnicolor = 1;


	  }

	  if (g_u8AllLinesUnicolor == GREEN_COLOR) {
 8000666:	4b3e      	ldr	r3, [pc, #248]	; (8000760 <main+0x544>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d10b      	bne.n	8000686 <main+0x46a>

		  g_u8AllLEDCallGreenData = LED_ON;
 800066e:	4b3d      	ldr	r3, [pc, #244]	; (8000764 <main+0x548>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDRespGreenData = LED_ON;
 8000674:	4b3c      	ldr	r3, [pc, #240]	; (8000768 <main+0x54c>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDCallRedData = LED_OFF;
 800067a:	4b3c      	ldr	r3, [pc, #240]	; (800076c <main+0x550>)
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDRespRedData = LED_OFF;
 8000680:	4b3b      	ldr	r3, [pc, #236]	; (8000770 <main+0x554>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
	  }

	  if (g_u8AllLinesUnicolor == RED_COLOR) {
 8000686:	4b36      	ldr	r3, [pc, #216]	; (8000760 <main+0x544>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b02      	cmp	r3, #2
 800068c:	d10b      	bne.n	80006a6 <main+0x48a>

		  g_u8AllLEDCallGreenData = LED_OFF;
 800068e:	4b35      	ldr	r3, [pc, #212]	; (8000764 <main+0x548>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDRespGreenData = LED_OFF;
 8000694:	4b34      	ldr	r3, [pc, #208]	; (8000768 <main+0x54c>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDCallRedData = LED_ON;
 800069a:	4b34      	ldr	r3, [pc, #208]	; (800076c <main+0x550>)
 800069c:	2201      	movs	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDRespRedData = LED_ON;
 80006a0:	4b33      	ldr	r3, [pc, #204]	; (8000770 <main+0x554>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
	  }

	  if (g_u8AllLinesUnicolor == YELLOW_COLOR) {
 80006a6:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <main+0x544>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d10b      	bne.n	80006c6 <main+0x4aa>

		  g_u8AllLEDCallGreenData = LED_ON;            //так горит жёлтый, в зависимости от того, что OFF будет другой цвет - цикл?? условие7??? чтобы по порядку с прерыванием
 80006ae:	4b2d      	ldr	r3, [pc, #180]	; (8000764 <main+0x548>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDRespGreenData = LED_ON;
 80006b4:	4b2c      	ldr	r3, [pc, #176]	; (8000768 <main+0x54c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDCallRedData = LED_ON;
 80006ba:	4b2c      	ldr	r3, [pc, #176]	; (800076c <main+0x550>)
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
		  g_u8AllLEDRespRedData = LED_ON;
 80006c0:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <main+0x554>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
	  }


	  if (g_u8DisplayAllLinesUnicolor) {
 80006c6:	4b2b      	ldr	r3, [pc, #172]	; (8000774 <main+0x558>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d100      	bne.n	80006d0 <main+0x4b4>
 80006ce:	e607      	b.n	80002e0 <main+0xc4>

	      HAL_GPIO_WritePin(LED_CALL_GREEN_SR_DATA_GPIO_Port, LED_CALL_GREEN_SR_DATA_Pin, g_u8AllLEDCallGreenData);
 80006d0:	4b24      	ldr	r3, [pc, #144]	; (8000764 <main+0x548>)
 80006d2:	781a      	ldrb	r2, [r3, #0]
 80006d4:	2390      	movs	r3, #144	; 0x90
 80006d6:	05db      	lsls	r3, r3, #23
 80006d8:	2120      	movs	r1, #32
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 fdbf 	bl	800125e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_RESP_GREEN_SR_DATA_GPIO_Port, LED_RESP_GREEN_SR_DATA_Pin, g_u8AllLEDRespGreenData);
 80006e0:	4b21      	ldr	r3, [pc, #132]	; (8000768 <main+0x54c>)
 80006e2:	781a      	ldrb	r2, [r3, #0]
 80006e4:	2390      	movs	r3, #144	; 0x90
 80006e6:	05db      	lsls	r3, r3, #23
 80006e8:	2108      	movs	r1, #8
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 fdb7 	bl	800125e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_CALL_RED_SR_DATA_GPIO_Port, LED_CALL_RED_SR_DATA_Pin, g_u8AllLEDCallRedData);
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <main+0x550>)
 80006f2:	781a      	ldrb	r2, [r3, #0]
 80006f4:	2390      	movs	r3, #144	; 0x90
 80006f6:	05db      	lsls	r3, r3, #23
 80006f8:	2110      	movs	r1, #16
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 fdaf 	bl	800125e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_RESP_RED_SR_DATA_GPIO_Port, LED_RESP_RED_SR_DATA_Pin, g_u8AllLEDRespRedData);
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <main+0x554>)
 8000702:	781a      	ldrb	r2, [r3, #0]
 8000704:	2390      	movs	r3, #144	; 0x90
 8000706:	05db      	lsls	r3, r3, #23
 8000708:	2104      	movs	r1, #4
 800070a:	0018      	movs	r0, r3
 800070c:	f000 fda7 	bl	800125e <HAL_GPIO_WritePin>
		  for (uint8_t n = 0; n < NUMBER_OF_LINES; n++) {
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
 8000716:	e042      	b.n	800079e <main+0x582>
 8000718:	200000b0 	.word	0x200000b0
 800071c:	200000b1 	.word	0x200000b1
 8000720:	200000b4 	.word	0x200000b4
 8000724:	2000009e 	.word	0x2000009e
 8000728:	20000000 	.word	0x20000000
 800072c:	2000009d 	.word	0x2000009d
 8000730:	2000009c 	.word	0x2000009c
 8000734:	20000004 	.word	0x20000004
 8000738:	20000094 	.word	0x20000094
 800073c:	20000096 	.word	0x20000096
 8000740:	2000000c 	.word	0x2000000c
 8000744:	20000095 	.word	0x20000095
 8000748:	20000097 	.word	0x20000097
 800074c:	20000014 	.word	0x20000014
 8000750:	2000001c 	.word	0x2000001c
 8000754:	200000a0 	.word	0x200000a0
 8000758:	200000a1 	.word	0x200000a1
 800075c:	20000002 	.word	0x20000002
 8000760:	20000001 	.word	0x20000001
 8000764:	20000098 	.word	0x20000098
 8000768:	20000099 	.word	0x20000099
 800076c:	2000009a 	.word	0x2000009a
 8000770:	2000009b 	.word	0x2000009b
 8000774:	2000009f 	.word	0x2000009f
			  HAL_GPIO_WritePin(STP_SR_LED_CLK_GPIO_Port, STP_SR_LED_CLK_Pin, GPIO_PIN_SET);
 8000778:	2390      	movs	r3, #144	; 0x90
 800077a:	05db      	lsls	r3, r3, #23
 800077c:	2201      	movs	r2, #1
 800077e:	2180      	movs	r1, #128	; 0x80
 8000780:	0018      	movs	r0, r3
 8000782:	f000 fd6c 	bl	800125e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(STP_SR_LED_CLK_GPIO_Port, STP_SR_LED_CLK_Pin, GPIO_PIN_RESET);
 8000786:	2390      	movs	r3, #144	; 0x90
 8000788:	05db      	lsls	r3, r3, #23
 800078a:	2200      	movs	r2, #0
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	0018      	movs	r0, r3
 8000790:	f000 fd65 	bl	800125e <HAL_GPIO_WritePin>
		  for (uint8_t n = 0; n < NUMBER_OF_LINES; n++) {
 8000794:	1dfb      	adds	r3, r7, #7
 8000796:	781a      	ldrb	r2, [r3, #0]
 8000798:	1dfb      	adds	r3, r7, #7
 800079a:	3201      	adds	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b07      	cmp	r3, #7
 80007a4:	d9e8      	bls.n	8000778 <main+0x55c>
		  }
		  g_u8DisplayAllLinesUnicolor = 0;
 80007a6:	4b02      	ldr	r3, [pc, #8]	; (80007b0 <main+0x594>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
if (g_u8NeedToRingLine) {
 80007ac:	e598      	b.n	80002e0 <main+0xc4>
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	2000009f 	.word	0x2000009f

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b093      	sub	sp, #76	; 0x4c
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	2414      	movs	r4, #20
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	0018      	movs	r0, r3
 80007c0:	2334      	movs	r3, #52	; 0x34
 80007c2:	001a      	movs	r2, r3
 80007c4:	2100      	movs	r1, #0
 80007c6:	f001 feb1 	bl	800252c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	0018      	movs	r0, r3
 80007ce:	2310      	movs	r3, #16
 80007d0:	001a      	movs	r2, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	f001 feaa 	bl	800252c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d8:	0021      	movs	r1, r4
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2202      	movs	r2, #2
 80007de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2201      	movs	r2, #1
 80007e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2210      	movs	r2, #16
 80007ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2202      	movs	r2, #2
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2280      	movs	r2, #128	; 0x80
 80007f6:	0212      	lsls	r2, r2, #8
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2280      	movs	r2, #128	; 0x80
 80007fe:	0312      	lsls	r2, r2, #12
 8000800:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2200      	movs	r2, #0
 8000806:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000808:	187b      	adds	r3, r7, r1
 800080a:	0018      	movs	r0, r3
 800080c:	f000 fd44 	bl	8001298 <HAL_RCC_OscConfig>
 8000810:	1e03      	subs	r3, r0, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000814:	f000 f9a8 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2207      	movs	r2, #7
 800081c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2202      	movs	r2, #2
 8000822:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2280      	movs	r2, #128	; 0x80
 8000828:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2101      	movs	r1, #1
 8000834:	0018      	movs	r0, r3
 8000836:	f001 f8b5 	bl	80019a4 <HAL_RCC_ClockConfig>
 800083a:	1e03      	subs	r3, r0, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800083e:	f000 f993 	bl	8000b68 <Error_Handler>
  }
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b013      	add	sp, #76	; 0x4c
 8000848:	bd90      	pop	{r4, r7, pc}
	...

0800084c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000852:	2308      	movs	r3, #8
 8000854:	18fb      	adds	r3, r7, r3
 8000856:	0018      	movs	r0, r3
 8000858:	2310      	movs	r3, #16
 800085a:	001a      	movs	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f001 fe65 	bl	800252c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000862:	003b      	movs	r3, r7
 8000864:	0018      	movs	r0, r3
 8000866:	2308      	movs	r3, #8
 8000868:	001a      	movs	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	f001 fe5e 	bl	800252c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <MX_TIM3_Init+0xa0>)
 8000872:	4a1f      	ldr	r2, [pc, #124]	; (80008f0 <MX_TIM3_Init+0xa4>)
 8000874:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 8000876:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <MX_TIM3_Init+0xa0>)
 8000878:	4a1e      	ldr	r2, [pc, #120]	; (80008f4 <MX_TIM3_Init+0xa8>)
 800087a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087c:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <MX_TIM3_Init+0xa0>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64999;
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_TIM3_Init+0xa0>)
 8000884:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <MX_TIM3_Init+0xac>)
 8000886:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_TIM3_Init+0xa0>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_TIM3_Init+0xa0>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_TIM3_Init+0xa0>)
 8000896:	0018      	movs	r0, r3
 8000898:	f001 f9f0 	bl	8001c7c <HAL_TIM_Base_Init>
 800089c:	1e03      	subs	r3, r0, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80008a0:	f000 f962 	bl	8000b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a4:	2108      	movs	r1, #8
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2280      	movs	r2, #128	; 0x80
 80008aa:	0152      	lsls	r2, r2, #5
 80008ac:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008ae:	187a      	adds	r2, r7, r1
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_TIM3_Init+0xa0>)
 80008b2:	0011      	movs	r1, r2
 80008b4:	0018      	movs	r0, r3
 80008b6:	f001 fb99 	bl	8001fec <HAL_TIM_ConfigClockSource>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80008be:	f000 f953 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c2:	003b      	movs	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c8:	003b      	movs	r3, r7
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ce:	003a      	movs	r2, r7
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_TIM3_Init+0xa0>)
 80008d2:	0011      	movs	r1, r2
 80008d4:	0018      	movs	r0, r3
 80008d6:	f001 fd97 	bl	8002408 <HAL_TIMEx_MasterConfigSynchronization>
 80008da:	1e03      	subs	r3, r0, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80008de:	f000 f943 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b006      	add	sp, #24
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	2000004c 	.word	0x2000004c
 80008f0:	40000400 	.word	0x40000400
 80008f4:	00003e7f 	.word	0x00003e7f
 80008f8:	0000fde7 	.word	0x0000fde7

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b089      	sub	sp, #36	; 0x24
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	240c      	movs	r4, #12
 8000904:	193b      	adds	r3, r7, r4
 8000906:	0018      	movs	r0, r3
 8000908:	2314      	movs	r3, #20
 800090a:	001a      	movs	r2, r3
 800090c:	2100      	movs	r1, #0
 800090e:	f001 fe0d 	bl	800252c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b3c      	ldr	r3, [pc, #240]	; (8000a04 <MX_GPIO_Init+0x108>)
 8000914:	695a      	ldr	r2, [r3, #20]
 8000916:	4b3b      	ldr	r3, [pc, #236]	; (8000a04 <MX_GPIO_Init+0x108>)
 8000918:	2180      	movs	r1, #128	; 0x80
 800091a:	0289      	lsls	r1, r1, #10
 800091c:	430a      	orrs	r2, r1
 800091e:	615a      	str	r2, [r3, #20]
 8000920:	4b38      	ldr	r3, [pc, #224]	; (8000a04 <MX_GPIO_Init+0x108>)
 8000922:	695a      	ldr	r2, [r3, #20]
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	029b      	lsls	r3, r3, #10
 8000928:	4013      	ands	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b35      	ldr	r3, [pc, #212]	; (8000a04 <MX_GPIO_Init+0x108>)
 8000930:	695a      	ldr	r2, [r3, #20]
 8000932:	4b34      	ldr	r3, [pc, #208]	; (8000a04 <MX_GPIO_Init+0x108>)
 8000934:	2180      	movs	r1, #128	; 0x80
 8000936:	02c9      	lsls	r1, r1, #11
 8000938:	430a      	orrs	r2, r1
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	4b31      	ldr	r3, [pc, #196]	; (8000a04 <MX_GPIO_Init+0x108>)
 800093e:	695a      	ldr	r2, [r3, #20]
 8000940:	2380      	movs	r3, #128	; 0x80
 8000942:	02db      	lsls	r3, r3, #11
 8000944:	4013      	ands	r3, r2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RESP_RED_SR_DATA_Pin|LED_RESP_GREEN_SR_DATA_Pin|LED_CALL_RED_SR_DATA_Pin|LED_CALL_GREEN_SR_DATA_Pin
 800094a:	492f      	ldr	r1, [pc, #188]	; (8000a08 <MX_GPIO_Init+0x10c>)
 800094c:	2390      	movs	r3, #144	; 0x90
 800094e:	05db      	lsls	r3, r3, #23
 8000950:	2200      	movs	r2, #0
 8000952:	0018      	movs	r0, r3
 8000954:	f000 fc83 	bl	800125e <HAL_GPIO_WritePin>
                          |STP_SR_LED_nCLR_Pin|STP_SR_LED_CLK_Pin|LINE_RESPONSE_SR_SHnLD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LINE_RESPONSE_SR_CLK_Pin|LINE_CALL_SR_nCLR_Pin|LINE_CALL_SR_CLK_Pin|LINE_CALL_SR_DATA_Pin, GPIO_PIN_RESET);
 8000958:	4b2c      	ldr	r3, [pc, #176]	; (8000a0c <MX_GPIO_Init+0x110>)
 800095a:	2200      	movs	r2, #0
 800095c:	21e8      	movs	r1, #232	; 0xe8
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fc7d 	bl	800125e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RESP_RED_SR_DATA_Pin LED_RESP_GREEN_SR_DATA_Pin LED_CALL_RED_SR_DATA_Pin LED_CALL_GREEN_SR_DATA_Pin
                           STP_SR_LED_nCLR_Pin STP_SR_LED_CLK_Pin */
  GPIO_InitStruct.Pin = LED_RESP_RED_SR_DATA_Pin|LED_RESP_GREEN_SR_DATA_Pin|LED_CALL_RED_SR_DATA_Pin|LED_CALL_GREEN_SR_DATA_Pin
 8000964:	193b      	adds	r3, r7, r4
 8000966:	22fc      	movs	r2, #252	; 0xfc
 8000968:	601a      	str	r2, [r3, #0]
                          |STP_SR_LED_nCLR_Pin|STP_SR_LED_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	193b      	adds	r3, r7, r4
 800096c:	2201      	movs	r2, #1
 800096e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	193b      	adds	r3, r7, r4
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000976:	193b      	adds	r3, r7, r4
 8000978:	2201      	movs	r2, #1
 800097a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	193a      	adds	r2, r7, r4
 800097e:	2390      	movs	r3, #144	; 0x90
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	0011      	movs	r1, r2
 8000984:	0018      	movs	r0, r3
 8000986:	f000 fad5 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LINE_RESPONSE_SR_SHnLD_Pin */
  GPIO_InitStruct.Pin = LINE_RESPONSE_SR_SHnLD_Pin;
 800098a:	0021      	movs	r1, r4
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2280      	movs	r2, #128	; 0x80
 8000990:	0212      	lsls	r2, r2, #8
 8000992:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	000c      	movs	r4, r1
 8000996:	193b      	adds	r3, r7, r4
 8000998:	2201      	movs	r2, #1
 800099a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LINE_RESPONSE_SR_SHnLD_GPIO_Port, &GPIO_InitStruct);
 80009a8:	193a      	adds	r2, r7, r4
 80009aa:	2390      	movs	r3, #144	; 0x90
 80009ac:	05db      	lsls	r3, r3, #23
 80009ae:	0011      	movs	r1, r2
 80009b0:	0018      	movs	r0, r3
 80009b2:	f000 fabf 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LINE_RESPONSE_SR_CLK_Pin LINE_CALL_SR_nCLR_Pin LINE_CALL_SR_CLK_Pin LINE_CALL_SR_DATA_Pin */
  GPIO_InitStruct.Pin = LINE_RESPONSE_SR_CLK_Pin|LINE_CALL_SR_nCLR_Pin|LINE_CALL_SR_CLK_Pin|LINE_CALL_SR_DATA_Pin;
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	22e8      	movs	r2, #232	; 0xe8
 80009ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	2201      	movs	r2, #1
 80009c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <MX_GPIO_Init+0x110>)
 80009d2:	0019      	movs	r1, r3
 80009d4:	0010      	movs	r0, r2
 80009d6:	f000 faad 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LINE_RESPONSE_SR_DATA_Pin */
  GPIO_InitStruct.Pin = LINE_RESPONSE_SR_DATA_Pin;
 80009da:	0021      	movs	r1, r4
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2210      	movs	r2, #16
 80009e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LINE_RESPONSE_SR_DATA_GPIO_Port, &GPIO_InitStruct);
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <MX_GPIO_Init+0x110>)
 80009f2:	0019      	movs	r1, r3
 80009f4:	0010      	movs	r0, r2
 80009f6:	f000 fa9d 	bl	8000f34 <HAL_GPIO_Init>

}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b009      	add	sp, #36	; 0x24
 8000a00:	bd90      	pop	{r4, r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	40021000 	.word	0x40021000
 8000a08:	000080fc 	.word	0x000080fc
 8000a0c:	48000400 	.word	0x48000400

08000a10 <ClearLEDSR>:

/* USER CODE BEGIN 4 */

void ClearLEDSR(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(STP_SR_LED_nCLR_GPIO_Port, STP_SR_LED_nCLR_Pin, GPIO_PIN_RESET);
 8000a14:	2390      	movs	r3, #144	; 0x90
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2140      	movs	r1, #64	; 0x40
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f000 fc1e 	bl	800125e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STP_SR_LED_nCLR_GPIO_Port, STP_SR_LED_nCLR_Pin, GPIO_PIN_SET);
 8000a22:	2390      	movs	r3, #144	; 0x90
 8000a24:	05db      	lsls	r3, r3, #23
 8000a26:	2201      	movs	r2, #1
 8000a28:	2140      	movs	r1, #64	; 0x40
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f000 fc17 	bl	800125e <HAL_GPIO_WritePin>
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <LoadLEDSR>:

void LoadLEDSR(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < NUMBER_OF_LINES; i++) {
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
 8000a44:	e056      	b.n	8000af4 <LoadLEDSR+0xbc>
        HAL_GPIO_WritePin(LED_CALL_GREEN_SR_DATA_GPIO_Port, LED_CALL_GREEN_SR_DATA_Pin, (g_u8LEDCallGreenData & SR_DATA_bm));
 8000a46:	4b30      	ldr	r3, [pc, #192]	; (8000b08 <LoadLEDSR+0xd0>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	2390      	movs	r3, #144	; 0x90
 8000a52:	05db      	lsls	r3, r3, #23
 8000a54:	2120      	movs	r1, #32
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 fc01 	bl	800125e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RESP_GREEN_SR_DATA_GPIO_Port, LED_RESP_GREEN_SR_DATA_Pin, (g_u8LEDRespGreenData & SR_DATA_bm));
 8000a5c:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <LoadLEDSR+0xd4>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2201      	movs	r2, #1
 8000a62:	4013      	ands	r3, r2
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	2390      	movs	r3, #144	; 0x90
 8000a68:	05db      	lsls	r3, r3, #23
 8000a6a:	2108      	movs	r1, #8
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f000 fbf6 	bl	800125e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_CALL_RED_SR_DATA_GPIO_Port, LED_CALL_RED_SR_DATA_Pin, (g_u8LEDCallRedData & SR_DATA_bm));
 8000a72:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <LoadLEDSR+0xd8>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2201      	movs	r2, #1
 8000a78:	4013      	ands	r3, r2
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	2390      	movs	r3, #144	; 0x90
 8000a7e:	05db      	lsls	r3, r3, #23
 8000a80:	2110      	movs	r1, #16
 8000a82:	0018      	movs	r0, r3
 8000a84:	f000 fbeb 	bl	800125e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RESP_RED_SR_DATA_GPIO_Port, LED_RESP_RED_SR_DATA_Pin, (g_u8LEDRespRedData & SR_DATA_bm));
 8000a88:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <LoadLEDSR+0xdc>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4013      	ands	r3, r2
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	2390      	movs	r3, #144	; 0x90
 8000a94:	05db      	lsls	r3, r3, #23
 8000a96:	2104      	movs	r1, #4
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f000 fbe0 	bl	800125e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(STP_SR_LED_CLK_GPIO_Port, STP_SR_LED_CLK_Pin, GPIO_PIN_SET);
 8000a9e:	2390      	movs	r3, #144	; 0x90
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2180      	movs	r1, #128	; 0x80
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 fbd9 	bl	800125e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STP_SR_LED_CLK_GPIO_Port, STP_SR_LED_CLK_Pin, GPIO_PIN_RESET);
 8000aac:	2390      	movs	r3, #144	; 0x90
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2180      	movs	r1, #128	; 0x80
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f000 fbd2 	bl	800125e <HAL_GPIO_WritePin>

		g_u8LEDCallGreenData = g_u8LEDCallGreenData >> 1;
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <LoadLEDSR+0xd0>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	085b      	lsrs	r3, r3, #1
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <LoadLEDSR+0xd0>)
 8000ac4:	701a      	strb	r2, [r3, #0]
		g_u8LEDRespGreenData = g_u8LEDRespGreenData >> 1;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <LoadLEDSR+0xd4>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	085b      	lsrs	r3, r3, #1
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <LoadLEDSR+0xd4>)
 8000ad0:	701a      	strb	r2, [r3, #0]
		g_u8LEDCallRedData = g_u8LEDCallRedData >> 1;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <LoadLEDSR+0xd8>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	085b      	lsrs	r3, r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <LoadLEDSR+0xd8>)
 8000adc:	701a      	strb	r2, [r3, #0]
		g_u8LEDRespRedData = g_u8LEDRespRedData >> 1;
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <LoadLEDSR+0xdc>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	085b      	lsrs	r3, r3, #1
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <LoadLEDSR+0xdc>)
 8000ae8:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_LINES; i++) {
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781a      	ldrb	r2, [r3, #0]
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	3201      	adds	r2, #1
 8000af2:	701a      	strb	r2, [r3, #0]
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b07      	cmp	r3, #7
 8000afa:	d9a4      	bls.n	8000a46 <LoadLEDSR+0xe>
	}
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b002      	add	sp, #8
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	20000094 	.word	0x20000094
 8000b0c:	20000095 	.word	0x20000095
 8000b10:	20000096 	.word	0x20000096
 8000b14:	20000097 	.word	0x20000097

08000b18 <ClearCallSR>:

void ClearCallSR(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LINE_CALL_SR_nCLR_GPIO_Port, LINE_CALL_SR_nCLR_Pin, GPIO_PIN_RESET);
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <ClearCallSR+0x24>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2120      	movs	r1, #32
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 fb9b 	bl	800125e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LINE_CALL_SR_nCLR_GPIO_Port, LINE_CALL_SR_nCLR_Pin, GPIO_PIN_SET);
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <ClearCallSR+0x24>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2120      	movs	r1, #32
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f000 fb95 	bl	800125e <HAL_GPIO_WritePin>
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	48000400 	.word	0x48000400

08000b40 <HAL_TIM_PeriodElapsedCallback>:
//	if (ActiveRowColor == NUMBER_OF_COLORS){
//		ActiveRowColor = 0;
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	if (htim == &htim3)
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d102      	bne.n	8000b56 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		g_u8NeedToDisplayLEDData = 1;
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]


	}
}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b002      	add	sp, #8
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	2000004c 	.word	0x2000004c
 8000b64:	20000002 	.word	0x20000002

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>
	...

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b7c:	699a      	ldr	r2, [r3, #24]
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	430a      	orrs	r2, r1
 8000b84:	619a      	str	r2, [r3, #24]
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b94:	69da      	ldr	r2, [r3, #28]
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b98:	2180      	movs	r1, #128	; 0x80
 8000b9a:	0549      	lsls	r1, r1, #21
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	61da      	str	r2, [r3, #28]
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <HAL_MspInit+0x44>)
 8000ba2:	69da      	ldr	r2, [r3, #28]
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	055b      	lsls	r3, r3, #21
 8000ba8:	4013      	ands	r3, r2
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b002      	add	sp, #8
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	; (8000c00 <HAL_TIM_Base_MspInit+0x44>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d113      	bne.n	8000bf6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <HAL_TIM_Base_MspInit+0x48>)
 8000bd0:	69da      	ldr	r2, [r3, #28]
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <HAL_TIM_Base_MspInit+0x48>)
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	61da      	str	r2, [r3, #28]
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_TIM_Base_MspInit+0x48>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	2202      	movs	r2, #2
 8000be0:	4013      	ands	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	2010      	movs	r0, #16
 8000bec:	f000 f970 	bl	8000ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bf0:	2010      	movs	r0, #16
 8000bf2:	f000 f982 	bl	8000efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b004      	add	sp, #16
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	40000400 	.word	0x40000400
 8000c04:	40021000 	.word	0x40021000

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <NMI_Handler+0x4>

08000c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <HardFault_Handler+0x4>

08000c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2c:	f000 f888 	bl	8000d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <TIM3_IRQHandler+0x14>)
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f001 f8be 	bl	8001dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	2000004c 	.word	0x2000004c

08000c50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c5c:	480d      	ldr	r0, [pc, #52]	; (8000c94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c5e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c60:	f7ff fff6 	bl	8000c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c66:	490d      	ldr	r1, [pc, #52]	; (8000c9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c68:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <LoopForever+0xe>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ca8 <LoopForever+0x16>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c8a:	f001 fc2b 	bl	80024e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c8e:	f7ff fac5 	bl	800021c <main>

08000c92 <LoopForever>:

LoopForever:
    b LoopForever
 8000c92:	e7fe      	b.n	8000c92 <LoopForever>
  ldr   r0, =_estack
 8000c94:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000ca0:	08002594 	.word	0x08002594
  ldr r2, =_sbss
 8000ca4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000ca8:	200000f8 	.word	0x200000f8

08000cac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC1_COMP_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <HAL_Init+0x24>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_Init+0x24>)
 8000cba:	2110      	movs	r1, #16
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f809 	bl	8000cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc6:	f7ff ff55 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	0018      	movs	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	40022000 	.word	0x40022000

08000cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <HAL_InitTick+0x5c>)
 8000ce2:	681c      	ldr	r4, [r3, #0]
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <HAL_InitTick+0x60>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	0019      	movs	r1, r3
 8000cea:	23fa      	movs	r3, #250	; 0xfa
 8000cec:	0098      	lsls	r0, r3, #2
 8000cee:	f7ff fa09 	bl	8000104 <__udivsi3>
 8000cf2:	0003      	movs	r3, r0
 8000cf4:	0019      	movs	r1, r3
 8000cf6:	0020      	movs	r0, r4
 8000cf8:	f7ff fa04 	bl	8000104 <__udivsi3>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f000 f90b 	bl	8000f1a <HAL_SYSTICK_Config>
 8000d04:	1e03      	subs	r3, r0, #0
 8000d06:	d001      	beq.n	8000d0c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e00f      	b.n	8000d2c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d80b      	bhi.n	8000d2a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	2301      	movs	r3, #1
 8000d16:	425b      	negs	r3, r3
 8000d18:	2200      	movs	r2, #0
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f000 f8d8 	bl	8000ed0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_InitTick+0x64>)
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e000      	b.n	8000d2c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b003      	add	sp, #12
 8000d32:	bd90      	pop	{r4, r7, pc}
 8000d34:	20000024 	.word	0x20000024
 8000d38:	2000002c 	.word	0x2000002c
 8000d3c:	20000028 	.word	0x20000028

08000d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_IncTick+0x1c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	001a      	movs	r2, r3
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_IncTick+0x20>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	18d2      	adds	r2, r2, r3
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <HAL_IncTick+0x20>)
 8000d52:	601a      	str	r2, [r3, #0]
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	2000002c 	.word	0x2000002c
 8000d60:	200000f4 	.word	0x200000f4

08000d64 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <HAL_GetTick+0x10>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	200000f4 	.word	0x200000f4

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	0002      	movs	r2, r0
 8000d80:	1dfb      	adds	r3, r7, #7
 8000d82:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b7f      	cmp	r3, #127	; 0x7f
 8000d8a:	d809      	bhi.n	8000da0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	001a      	movs	r2, r3
 8000d92:	231f      	movs	r3, #31
 8000d94:	401a      	ands	r2, r3
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_EnableIRQ+0x30>)
 8000d98:	2101      	movs	r1, #1
 8000d9a:	4091      	lsls	r1, r2
 8000d9c:	000a      	movs	r2, r1
 8000d9e:	601a      	str	r2, [r3, #0]
  }
}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b002      	add	sp, #8
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	e000e100 	.word	0xe000e100

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	0002      	movs	r2, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8000dc0:	d828      	bhi.n	8000e14 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc2:	4a2f      	ldr	r2, [pc, #188]	; (8000e80 <__NVIC_SetPriority+0xd4>)
 8000dc4:	1dfb      	adds	r3, r7, #7
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	089b      	lsrs	r3, r3, #2
 8000dcc:	33c0      	adds	r3, #192	; 0xc0
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	589b      	ldr	r3, [r3, r2]
 8000dd2:	1dfa      	adds	r2, r7, #7
 8000dd4:	7812      	ldrb	r2, [r2, #0]
 8000dd6:	0011      	movs	r1, r2
 8000dd8:	2203      	movs	r2, #3
 8000dda:	400a      	ands	r2, r1
 8000ddc:	00d2      	lsls	r2, r2, #3
 8000dde:	21ff      	movs	r1, #255	; 0xff
 8000de0:	4091      	lsls	r1, r2
 8000de2:	000a      	movs	r2, r1
 8000de4:	43d2      	mvns	r2, r2
 8000de6:	401a      	ands	r2, r3
 8000de8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	019b      	lsls	r3, r3, #6
 8000dee:	22ff      	movs	r2, #255	; 0xff
 8000df0:	401a      	ands	r2, r3
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	0018      	movs	r0, r3
 8000df8:	2303      	movs	r3, #3
 8000dfa:	4003      	ands	r3, r0
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e00:	481f      	ldr	r0, [pc, #124]	; (8000e80 <__NVIC_SetPriority+0xd4>)
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	b25b      	sxtb	r3, r3
 8000e08:	089b      	lsrs	r3, r3, #2
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	33c0      	adds	r3, #192	; 0xc0
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e12:	e031      	b.n	8000e78 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e14:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <__NVIC_SetPriority+0xd8>)
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	400b      	ands	r3, r1
 8000e20:	3b08      	subs	r3, #8
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	3306      	adds	r3, #6
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	18d3      	adds	r3, r2, r3
 8000e2a:	3304      	adds	r3, #4
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	1dfa      	adds	r2, r7, #7
 8000e30:	7812      	ldrb	r2, [r2, #0]
 8000e32:	0011      	movs	r1, r2
 8000e34:	2203      	movs	r2, #3
 8000e36:	400a      	ands	r2, r1
 8000e38:	00d2      	lsls	r2, r2, #3
 8000e3a:	21ff      	movs	r1, #255	; 0xff
 8000e3c:	4091      	lsls	r1, r2
 8000e3e:	000a      	movs	r2, r1
 8000e40:	43d2      	mvns	r2, r2
 8000e42:	401a      	ands	r2, r3
 8000e44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	019b      	lsls	r3, r3, #6
 8000e4a:	22ff      	movs	r2, #255	; 0xff
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	0018      	movs	r0, r3
 8000e54:	2303      	movs	r3, #3
 8000e56:	4003      	ands	r3, r0
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e5c:	4809      	ldr	r0, [pc, #36]	; (8000e84 <__NVIC_SetPriority+0xd8>)
 8000e5e:	1dfb      	adds	r3, r7, #7
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	001c      	movs	r4, r3
 8000e64:	230f      	movs	r3, #15
 8000e66:	4023      	ands	r3, r4
 8000e68:	3b08      	subs	r3, #8
 8000e6a:	089b      	lsrs	r3, r3, #2
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	3306      	adds	r3, #6
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	18c3      	adds	r3, r0, r3
 8000e74:	3304      	adds	r3, #4
 8000e76:	601a      	str	r2, [r3, #0]
}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b003      	add	sp, #12
 8000e7e:	bd90      	pop	{r4, r7, pc}
 8000e80:	e000e100 	.word	0xe000e100
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	1e5a      	subs	r2, r3, #1
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	045b      	lsls	r3, r3, #17
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d301      	bcc.n	8000ea0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e010      	b.n	8000ec2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <SysTick_Config+0x44>)
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	3a01      	subs	r2, #1
 8000ea6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	425b      	negs	r3, r3
 8000eac:	2103      	movs	r1, #3
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f7ff ff7c 	bl	8000dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <SysTick_Config+0x44>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SysTick_Config+0x44>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b002      	add	sp, #8
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	210f      	movs	r1, #15
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	1c02      	adds	r2, r0, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	0011      	movs	r1, r2
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff ff5d 	bl	8000dac <__NVIC_SetPriority>
}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b004      	add	sp, #16
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	0002      	movs	r2, r0
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f7ff ff33 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b002      	add	sp, #8
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	0018      	movs	r0, r3
 8000f26:	f7ff ffaf 	bl	8000e88 <SysTick_Config>
 8000f2a:	0003      	movs	r3, r0
}
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b002      	add	sp, #8
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f42:	e155      	b.n	80011f0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2101      	movs	r1, #1
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	000a      	movs	r2, r1
 8000f50:	4013      	ands	r3, r2
 8000f52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d100      	bne.n	8000f5c <HAL_GPIO_Init+0x28>
 8000f5a:	e146      	b.n	80011ea <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2203      	movs	r2, #3
 8000f62:	4013      	ands	r3, r2
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d005      	beq.n	8000f74 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d130      	bne.n	8000fd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	409a      	lsls	r2, r3
 8000f82:	0013      	movs	r3, r2
 8000f84:	43da      	mvns	r2, r3
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	409a      	lsls	r2, r3
 8000f96:	0013      	movs	r3, r2
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000faa:	2201      	movs	r2, #1
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
 8000fb0:	0013      	movs	r3, r2
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	091b      	lsrs	r3, r3, #4
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	409a      	lsls	r2, r3
 8000fc8:	0013      	movs	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2203      	movs	r2, #3
 8000fdc:	4013      	ands	r3, r2
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	d017      	beq.n	8001012 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2203      	movs	r2, #3
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	409a      	lsls	r2, r3
 8001004:	0013      	movs	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2203      	movs	r2, #3
 8001018:	4013      	ands	r3, r2
 800101a:	2b02      	cmp	r3, #2
 800101c:	d123      	bne.n	8001066 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	08da      	lsrs	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3208      	adds	r2, #8
 8001026:	0092      	lsls	r2, r2, #2
 8001028:	58d3      	ldr	r3, [r2, r3]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	2207      	movs	r2, #7
 8001030:	4013      	ands	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	220f      	movs	r2, #15
 8001036:	409a      	lsls	r2, r3
 8001038:	0013      	movs	r3, r2
 800103a:	43da      	mvns	r2, r3
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	691a      	ldr	r2, [r3, #16]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	2107      	movs	r1, #7
 800104a:	400b      	ands	r3, r1
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	409a      	lsls	r2, r3
 8001050:	0013      	movs	r3, r2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	08da      	lsrs	r2, r3, #3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3208      	adds	r2, #8
 8001060:	0092      	lsls	r2, r2, #2
 8001062:	6939      	ldr	r1, [r7, #16]
 8001064:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2203      	movs	r2, #3
 8001072:	409a      	lsls	r2, r3
 8001074:	0013      	movs	r3, r2
 8001076:	43da      	mvns	r2, r3
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2203      	movs	r2, #3
 8001084:	401a      	ands	r2, r3
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	409a      	lsls	r2, r3
 800108c:	0013      	movs	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	23c0      	movs	r3, #192	; 0xc0
 80010a0:	029b      	lsls	r3, r3, #10
 80010a2:	4013      	ands	r3, r2
 80010a4:	d100      	bne.n	80010a8 <HAL_GPIO_Init+0x174>
 80010a6:	e0a0      	b.n	80011ea <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a8:	4b57      	ldr	r3, [pc, #348]	; (8001208 <HAL_GPIO_Init+0x2d4>)
 80010aa:	699a      	ldr	r2, [r3, #24]
 80010ac:	4b56      	ldr	r3, [pc, #344]	; (8001208 <HAL_GPIO_Init+0x2d4>)
 80010ae:	2101      	movs	r1, #1
 80010b0:	430a      	orrs	r2, r1
 80010b2:	619a      	str	r2, [r3, #24]
 80010b4:	4b54      	ldr	r3, [pc, #336]	; (8001208 <HAL_GPIO_Init+0x2d4>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	2201      	movs	r2, #1
 80010ba:	4013      	ands	r3, r2
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010c0:	4a52      	ldr	r2, [pc, #328]	; (800120c <HAL_GPIO_Init+0x2d8>)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	589b      	ldr	r3, [r3, r2]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	2203      	movs	r2, #3
 80010d2:	4013      	ands	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	220f      	movs	r2, #15
 80010d8:	409a      	lsls	r2, r3
 80010da:	0013      	movs	r3, r2
 80010dc:	43da      	mvns	r2, r3
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	2390      	movs	r3, #144	; 0x90
 80010e8:	05db      	lsls	r3, r3, #23
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d019      	beq.n	8001122 <HAL_GPIO_Init+0x1ee>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a47      	ldr	r2, [pc, #284]	; (8001210 <HAL_GPIO_Init+0x2dc>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d013      	beq.n	800111e <HAL_GPIO_Init+0x1ea>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a46      	ldr	r2, [pc, #280]	; (8001214 <HAL_GPIO_Init+0x2e0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d00d      	beq.n	800111a <HAL_GPIO_Init+0x1e6>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a45      	ldr	r2, [pc, #276]	; (8001218 <HAL_GPIO_Init+0x2e4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d007      	beq.n	8001116 <HAL_GPIO_Init+0x1e2>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a44      	ldr	r2, [pc, #272]	; (800121c <HAL_GPIO_Init+0x2e8>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d101      	bne.n	8001112 <HAL_GPIO_Init+0x1de>
 800110e:	2304      	movs	r3, #4
 8001110:	e008      	b.n	8001124 <HAL_GPIO_Init+0x1f0>
 8001112:	2305      	movs	r3, #5
 8001114:	e006      	b.n	8001124 <HAL_GPIO_Init+0x1f0>
 8001116:	2303      	movs	r3, #3
 8001118:	e004      	b.n	8001124 <HAL_GPIO_Init+0x1f0>
 800111a:	2302      	movs	r3, #2
 800111c:	e002      	b.n	8001124 <HAL_GPIO_Init+0x1f0>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <HAL_GPIO_Init+0x1f0>
 8001122:	2300      	movs	r3, #0
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	2103      	movs	r1, #3
 8001128:	400a      	ands	r2, r1
 800112a:	0092      	lsls	r2, r2, #2
 800112c:	4093      	lsls	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001134:	4935      	ldr	r1, [pc, #212]	; (800120c <HAL_GPIO_Init+0x2d8>)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3302      	adds	r3, #2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001142:	4b37      	ldr	r3, [pc, #220]	; (8001220 <HAL_GPIO_Init+0x2ec>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43da      	mvns	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	035b      	lsls	r3, r3, #13
 800115a:	4013      	ands	r3, r2
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001166:	4b2e      	ldr	r3, [pc, #184]	; (8001220 <HAL_GPIO_Init+0x2ec>)
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800116c:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <HAL_GPIO_Init+0x2ec>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	43da      	mvns	r2, r3
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	039b      	lsls	r3, r3, #14
 8001184:	4013      	ands	r3, r2
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001190:	4b23      	ldr	r3, [pc, #140]	; (8001220 <HAL_GPIO_Init+0x2ec>)
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001196:	4b22      	ldr	r3, [pc, #136]	; (8001220 <HAL_GPIO_Init+0x2ec>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	43da      	mvns	r2, r3
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	029b      	lsls	r3, r3, #10
 80011ae:	4013      	ands	r3, r2
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HAL_GPIO_Init+0x2ec>)
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <HAL_GPIO_Init+0x2ec>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	43da      	mvns	r2, r3
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	025b      	lsls	r3, r3, #9
 80011d8:	4013      	ands	r3, r2
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_GPIO_Init+0x2ec>)
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	3301      	adds	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	40da      	lsrs	r2, r3
 80011f8:	1e13      	subs	r3, r2, #0
 80011fa:	d000      	beq.n	80011fe <HAL_GPIO_Init+0x2ca>
 80011fc:	e6a2      	b.n	8000f44 <HAL_GPIO_Init+0x10>
  } 
}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	46c0      	nop			; (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	b006      	add	sp, #24
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40021000 	.word	0x40021000
 800120c:	40010000 	.word	0x40010000
 8001210:	48000400 	.word	0x48000400
 8001214:	48000800 	.word	0x48000800
 8001218:	48000c00 	.word	0x48000c00
 800121c:	48001000 	.word	0x48001000
 8001220:	40010400 	.word	0x40010400

08001224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	000a      	movs	r2, r1
 800122e:	1cbb      	adds	r3, r7, #2
 8001230:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	1cba      	adds	r2, r7, #2
 8001238:	8812      	ldrh	r2, [r2, #0]
 800123a:	4013      	ands	r3, r2
 800123c:	d004      	beq.n	8001248 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800123e:	230f      	movs	r3, #15
 8001240:	18fb      	adds	r3, r7, r3
 8001242:	2201      	movs	r2, #1
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	e003      	b.n	8001250 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001248:	230f      	movs	r3, #15
 800124a:	18fb      	adds	r3, r7, r3
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001250:	230f      	movs	r3, #15
 8001252:	18fb      	adds	r3, r7, r3
 8001254:	781b      	ldrb	r3, [r3, #0]
  }
 8001256:	0018      	movs	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	b004      	add	sp, #16
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	0008      	movs	r0, r1
 8001268:	0011      	movs	r1, r2
 800126a:	1cbb      	adds	r3, r7, #2
 800126c:	1c02      	adds	r2, r0, #0
 800126e:	801a      	strh	r2, [r3, #0]
 8001270:	1c7b      	adds	r3, r7, #1
 8001272:	1c0a      	adds	r2, r1, #0
 8001274:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001276:	1c7b      	adds	r3, r7, #1
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d004      	beq.n	8001288 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800127e:	1cbb      	adds	r3, r7, #2
 8001280:	881a      	ldrh	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001286:	e003      	b.n	8001290 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001288:	1cbb      	adds	r3, r7, #2
 800128a:	881a      	ldrh	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b002      	add	sp, #8
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d102      	bne.n	80012ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	f000 fb76 	bl	8001998 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2201      	movs	r2, #1
 80012b2:	4013      	ands	r3, r2
 80012b4:	d100      	bne.n	80012b8 <HAL_RCC_OscConfig+0x20>
 80012b6:	e08e      	b.n	80013d6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012b8:	4bc5      	ldr	r3, [pc, #788]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	220c      	movs	r2, #12
 80012be:	4013      	ands	r3, r2
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d00e      	beq.n	80012e2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012c4:	4bc2      	ldr	r3, [pc, #776]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	220c      	movs	r2, #12
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b08      	cmp	r3, #8
 80012ce:	d117      	bne.n	8001300 <HAL_RCC_OscConfig+0x68>
 80012d0:	4bbf      	ldr	r3, [pc, #764]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	23c0      	movs	r3, #192	; 0xc0
 80012d6:	025b      	lsls	r3, r3, #9
 80012d8:	401a      	ands	r2, r3
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	025b      	lsls	r3, r3, #9
 80012de:	429a      	cmp	r2, r3
 80012e0:	d10e      	bne.n	8001300 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e2:	4bbb      	ldr	r3, [pc, #748]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	029b      	lsls	r3, r3, #10
 80012ea:	4013      	ands	r3, r2
 80012ec:	d100      	bne.n	80012f0 <HAL_RCC_OscConfig+0x58>
 80012ee:	e071      	b.n	80013d4 <HAL_RCC_OscConfig+0x13c>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d000      	beq.n	80012fa <HAL_RCC_OscConfig+0x62>
 80012f8:	e06c      	b.n	80013d4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	f000 fb4c 	bl	8001998 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d107      	bne.n	8001318 <HAL_RCC_OscConfig+0x80>
 8001308:	4bb1      	ldr	r3, [pc, #708]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4bb0      	ldr	r3, [pc, #704]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 800130e:	2180      	movs	r1, #128	; 0x80
 8001310:	0249      	lsls	r1, r1, #9
 8001312:	430a      	orrs	r2, r1
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e02f      	b.n	8001378 <HAL_RCC_OscConfig+0xe0>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10c      	bne.n	800133a <HAL_RCC_OscConfig+0xa2>
 8001320:	4bab      	ldr	r3, [pc, #684]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4baa      	ldr	r3, [pc, #680]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001326:	49ab      	ldr	r1, [pc, #684]	; (80015d4 <HAL_RCC_OscConfig+0x33c>)
 8001328:	400a      	ands	r2, r1
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	4ba8      	ldr	r3, [pc, #672]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4ba7      	ldr	r3, [pc, #668]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001332:	49a9      	ldr	r1, [pc, #676]	; (80015d8 <HAL_RCC_OscConfig+0x340>)
 8001334:	400a      	ands	r2, r1
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e01e      	b.n	8001378 <HAL_RCC_OscConfig+0xe0>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b05      	cmp	r3, #5
 8001340:	d10e      	bne.n	8001360 <HAL_RCC_OscConfig+0xc8>
 8001342:	4ba3      	ldr	r3, [pc, #652]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4ba2      	ldr	r3, [pc, #648]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001348:	2180      	movs	r1, #128	; 0x80
 800134a:	02c9      	lsls	r1, r1, #11
 800134c:	430a      	orrs	r2, r1
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	4b9f      	ldr	r3, [pc, #636]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b9e      	ldr	r3, [pc, #632]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	0249      	lsls	r1, r1, #9
 800135a:	430a      	orrs	r2, r1
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	e00b      	b.n	8001378 <HAL_RCC_OscConfig+0xe0>
 8001360:	4b9b      	ldr	r3, [pc, #620]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b9a      	ldr	r3, [pc, #616]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001366:	499b      	ldr	r1, [pc, #620]	; (80015d4 <HAL_RCC_OscConfig+0x33c>)
 8001368:	400a      	ands	r2, r1
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	4b98      	ldr	r3, [pc, #608]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b97      	ldr	r3, [pc, #604]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001372:	4999      	ldr	r1, [pc, #612]	; (80015d8 <HAL_RCC_OscConfig+0x340>)
 8001374:	400a      	ands	r2, r1
 8001376:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d014      	beq.n	80013aa <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fcf0 	bl	8000d64 <HAL_GetTick>
 8001384:	0003      	movs	r3, r0
 8001386:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800138a:	f7ff fceb 	bl	8000d64 <HAL_GetTick>
 800138e:	0002      	movs	r2, r0
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b64      	cmp	r3, #100	; 0x64
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e2fd      	b.n	8001998 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139c:	4b8c      	ldr	r3, [pc, #560]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	029b      	lsls	r3, r3, #10
 80013a4:	4013      	ands	r3, r2
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0xf2>
 80013a8:	e015      	b.n	80013d6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013aa:	f7ff fcdb 	bl	8000d64 <HAL_GetTick>
 80013ae:	0003      	movs	r3, r0
 80013b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fcd6 	bl	8000d64 <HAL_GetTick>
 80013b8:	0002      	movs	r2, r0
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e2e8      	b.n	8001998 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c6:	4b82      	ldr	r3, [pc, #520]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	029b      	lsls	r3, r3, #10
 80013ce:	4013      	ands	r3, r2
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x11c>
 80013d2:	e000      	b.n	80013d6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2202      	movs	r2, #2
 80013dc:	4013      	ands	r3, r2
 80013de:	d100      	bne.n	80013e2 <HAL_RCC_OscConfig+0x14a>
 80013e0:	e06c      	b.n	80014bc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013e2:	4b7b      	ldr	r3, [pc, #492]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	220c      	movs	r2, #12
 80013e8:	4013      	ands	r3, r2
 80013ea:	d00e      	beq.n	800140a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013ec:	4b78      	ldr	r3, [pc, #480]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	220c      	movs	r2, #12
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d11f      	bne.n	8001438 <HAL_RCC_OscConfig+0x1a0>
 80013f8:	4b75      	ldr	r3, [pc, #468]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	23c0      	movs	r3, #192	; 0xc0
 80013fe:	025b      	lsls	r3, r3, #9
 8001400:	401a      	ands	r2, r3
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	429a      	cmp	r2, r3
 8001408:	d116      	bne.n	8001438 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	4b71      	ldr	r3, [pc, #452]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2202      	movs	r2, #2
 8001410:	4013      	ands	r3, r2
 8001412:	d005      	beq.n	8001420 <HAL_RCC_OscConfig+0x188>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d001      	beq.n	8001420 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e2bb      	b.n	8001998 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001420:	4b6b      	ldr	r3, [pc, #428]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	22f8      	movs	r2, #248	; 0xf8
 8001426:	4393      	bics	r3, r2
 8001428:	0019      	movs	r1, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	00da      	lsls	r2, r3, #3
 8001430:	4b67      	ldr	r3, [pc, #412]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001432:	430a      	orrs	r2, r1
 8001434:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001436:	e041      	b.n	80014bc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d024      	beq.n	800148a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001440:	4b63      	ldr	r3, [pc, #396]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b62      	ldr	r3, [pc, #392]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001446:	2101      	movs	r1, #1
 8001448:	430a      	orrs	r2, r1
 800144a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fc8a 	bl	8000d64 <HAL_GetTick>
 8001450:	0003      	movs	r3, r0
 8001452:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001456:	f7ff fc85 	bl	8000d64 <HAL_GetTick>
 800145a:	0002      	movs	r2, r0
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e297      	b.n	8001998 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001468:	4b59      	ldr	r3, [pc, #356]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2202      	movs	r2, #2
 800146e:	4013      	ands	r3, r2
 8001470:	d0f1      	beq.n	8001456 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001472:	4b57      	ldr	r3, [pc, #348]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	22f8      	movs	r2, #248	; 0xf8
 8001478:	4393      	bics	r3, r2
 800147a:	0019      	movs	r1, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	00da      	lsls	r2, r3, #3
 8001482:	4b53      	ldr	r3, [pc, #332]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001484:	430a      	orrs	r2, r1
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	e018      	b.n	80014bc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148a:	4b51      	ldr	r3, [pc, #324]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4b50      	ldr	r3, [pc, #320]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001490:	2101      	movs	r1, #1
 8001492:	438a      	bics	r2, r1
 8001494:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7ff fc65 	bl	8000d64 <HAL_GetTick>
 800149a:	0003      	movs	r3, r0
 800149c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff fc60 	bl	8000d64 <HAL_GetTick>
 80014a4:	0002      	movs	r2, r0
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e272      	b.n	8001998 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2202      	movs	r2, #2
 80014b8:	4013      	ands	r3, r2
 80014ba:	d1f1      	bne.n	80014a0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2208      	movs	r2, #8
 80014c2:	4013      	ands	r3, r2
 80014c4:	d036      	beq.n	8001534 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d019      	beq.n	8001502 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ce:	4b40      	ldr	r3, [pc, #256]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 80014d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014d2:	4b3f      	ldr	r3, [pc, #252]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 80014d4:	2101      	movs	r1, #1
 80014d6:	430a      	orrs	r2, r1
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014da:	f7ff fc43 	bl	8000d64 <HAL_GetTick>
 80014de:	0003      	movs	r3, r0
 80014e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e4:	f7ff fc3e 	bl	8000d64 <HAL_GetTick>
 80014e8:	0002      	movs	r2, r0
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e250      	b.n	8001998 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f6:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 80014f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fa:	2202      	movs	r2, #2
 80014fc:	4013      	ands	r3, r2
 80014fe:	d0f1      	beq.n	80014e4 <HAL_RCC_OscConfig+0x24c>
 8001500:	e018      	b.n	8001534 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001502:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001506:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001508:	2101      	movs	r1, #1
 800150a:	438a      	bics	r2, r1
 800150c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150e:	f7ff fc29 	bl	8000d64 <HAL_GetTick>
 8001512:	0003      	movs	r3, r0
 8001514:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001518:	f7ff fc24 	bl	8000d64 <HAL_GetTick>
 800151c:	0002      	movs	r2, r0
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e236      	b.n	8001998 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800152a:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	2202      	movs	r2, #2
 8001530:	4013      	ands	r3, r2
 8001532:	d1f1      	bne.n	8001518 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2204      	movs	r2, #4
 800153a:	4013      	ands	r3, r2
 800153c:	d100      	bne.n	8001540 <HAL_RCC_OscConfig+0x2a8>
 800153e:	e0b5      	b.n	80016ac <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001540:	201f      	movs	r0, #31
 8001542:	183b      	adds	r3, r7, r0
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001548:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 800154a:	69da      	ldr	r2, [r3, #28]
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	055b      	lsls	r3, r3, #21
 8001550:	4013      	ands	r3, r2
 8001552:	d110      	bne.n	8001576 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001556:	69da      	ldr	r2, [r3, #28]
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 800155a:	2180      	movs	r1, #128	; 0x80
 800155c:	0549      	lsls	r1, r1, #21
 800155e:	430a      	orrs	r2, r1
 8001560:	61da      	str	r2, [r3, #28]
 8001562:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 8001564:	69da      	ldr	r2, [r3, #28]
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	055b      	lsls	r3, r3, #21
 800156a:	4013      	ands	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001570:	183b      	adds	r3, r7, r0
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <HAL_RCC_OscConfig+0x344>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4013      	ands	r3, r2
 8001580:	d11a      	bne.n	80015b8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <HAL_RCC_OscConfig+0x344>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <HAL_RCC_OscConfig+0x344>)
 8001588:	2180      	movs	r1, #128	; 0x80
 800158a:	0049      	lsls	r1, r1, #1
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001590:	f7ff fbe8 	bl	8000d64 <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159a:	f7ff fbe3 	bl	8000d64 <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b64      	cmp	r3, #100	; 0x64
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e1f5      	b.n	8001998 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_RCC_OscConfig+0x344>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4013      	ands	r3, r2
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d10f      	bne.n	80015e0 <HAL_RCC_OscConfig+0x348>
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 80015c2:	6a1a      	ldr	r2, [r3, #32]
 80015c4:	4b02      	ldr	r3, [pc, #8]	; (80015d0 <HAL_RCC_OscConfig+0x338>)
 80015c6:	2101      	movs	r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	621a      	str	r2, [r3, #32]
 80015cc:	e036      	b.n	800163c <HAL_RCC_OscConfig+0x3a4>
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	40021000 	.word	0x40021000
 80015d4:	fffeffff 	.word	0xfffeffff
 80015d8:	fffbffff 	.word	0xfffbffff
 80015dc:	40007000 	.word	0x40007000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d10c      	bne.n	8001602 <HAL_RCC_OscConfig+0x36a>
 80015e8:	4bca      	ldr	r3, [pc, #808]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80015ea:	6a1a      	ldr	r2, [r3, #32]
 80015ec:	4bc9      	ldr	r3, [pc, #804]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80015ee:	2101      	movs	r1, #1
 80015f0:	438a      	bics	r2, r1
 80015f2:	621a      	str	r2, [r3, #32]
 80015f4:	4bc7      	ldr	r3, [pc, #796]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80015f6:	6a1a      	ldr	r2, [r3, #32]
 80015f8:	4bc6      	ldr	r3, [pc, #792]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80015fa:	2104      	movs	r1, #4
 80015fc:	438a      	bics	r2, r1
 80015fe:	621a      	str	r2, [r3, #32]
 8001600:	e01c      	b.n	800163c <HAL_RCC_OscConfig+0x3a4>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b05      	cmp	r3, #5
 8001608:	d10c      	bne.n	8001624 <HAL_RCC_OscConfig+0x38c>
 800160a:	4bc2      	ldr	r3, [pc, #776]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 800160c:	6a1a      	ldr	r2, [r3, #32]
 800160e:	4bc1      	ldr	r3, [pc, #772]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 8001610:	2104      	movs	r1, #4
 8001612:	430a      	orrs	r2, r1
 8001614:	621a      	str	r2, [r3, #32]
 8001616:	4bbf      	ldr	r3, [pc, #764]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 8001618:	6a1a      	ldr	r2, [r3, #32]
 800161a:	4bbe      	ldr	r3, [pc, #760]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 800161c:	2101      	movs	r1, #1
 800161e:	430a      	orrs	r2, r1
 8001620:	621a      	str	r2, [r3, #32]
 8001622:	e00b      	b.n	800163c <HAL_RCC_OscConfig+0x3a4>
 8001624:	4bbb      	ldr	r3, [pc, #748]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 8001626:	6a1a      	ldr	r2, [r3, #32]
 8001628:	4bba      	ldr	r3, [pc, #744]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 800162a:	2101      	movs	r1, #1
 800162c:	438a      	bics	r2, r1
 800162e:	621a      	str	r2, [r3, #32]
 8001630:	4bb8      	ldr	r3, [pc, #736]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 8001632:	6a1a      	ldr	r2, [r3, #32]
 8001634:	4bb7      	ldr	r3, [pc, #732]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 8001636:	2104      	movs	r1, #4
 8001638:	438a      	bics	r2, r1
 800163a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d014      	beq.n	800166e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001644:	f7ff fb8e 	bl	8000d64 <HAL_GetTick>
 8001648:	0003      	movs	r3, r0
 800164a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164c:	e009      	b.n	8001662 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800164e:	f7ff fb89 	bl	8000d64 <HAL_GetTick>
 8001652:	0002      	movs	r2, r0
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	4aaf      	ldr	r2, [pc, #700]	; (8001918 <HAL_RCC_OscConfig+0x680>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e19a      	b.n	8001998 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001662:	4bac      	ldr	r3, [pc, #688]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	2202      	movs	r2, #2
 8001668:	4013      	ands	r3, r2
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x3b6>
 800166c:	e013      	b.n	8001696 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166e:	f7ff fb79 	bl	8000d64 <HAL_GetTick>
 8001672:	0003      	movs	r3, r0
 8001674:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001676:	e009      	b.n	800168c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001678:	f7ff fb74 	bl	8000d64 <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	4aa5      	ldr	r2, [pc, #660]	; (8001918 <HAL_RCC_OscConfig+0x680>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e185      	b.n	8001998 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168c:	4ba1      	ldr	r3, [pc, #644]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	2202      	movs	r2, #2
 8001692:	4013      	ands	r3, r2
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001696:	231f      	movs	r3, #31
 8001698:	18fb      	adds	r3, r7, r3
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d105      	bne.n	80016ac <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a0:	4b9c      	ldr	r3, [pc, #624]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80016a2:	69da      	ldr	r2, [r3, #28]
 80016a4:	4b9b      	ldr	r3, [pc, #620]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80016a6:	499d      	ldr	r1, [pc, #628]	; (800191c <HAL_RCC_OscConfig+0x684>)
 80016a8:	400a      	ands	r2, r1
 80016aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2210      	movs	r2, #16
 80016b2:	4013      	ands	r3, r2
 80016b4:	d063      	beq.n	800177e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d12a      	bne.n	8001714 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016be:	4b95      	ldr	r3, [pc, #596]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80016c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016c2:	4b94      	ldr	r3, [pc, #592]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80016c4:	2104      	movs	r1, #4
 80016c6:	430a      	orrs	r2, r1
 80016c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80016ca:	4b92      	ldr	r3, [pc, #584]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80016cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ce:	4b91      	ldr	r3, [pc, #580]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80016d0:	2101      	movs	r1, #1
 80016d2:	430a      	orrs	r2, r1
 80016d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fb45 	bl	8000d64 <HAL_GetTick>
 80016da:	0003      	movs	r3, r0
 80016dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016e0:	f7ff fb40 	bl	8000d64 <HAL_GetTick>
 80016e4:	0002      	movs	r2, r0
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e152      	b.n	8001998 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016f2:	4b88      	ldr	r3, [pc, #544]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80016f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f6:	2202      	movs	r2, #2
 80016f8:	4013      	ands	r3, r2
 80016fa:	d0f1      	beq.n	80016e0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016fc:	4b85      	ldr	r3, [pc, #532]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80016fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001700:	22f8      	movs	r2, #248	; 0xf8
 8001702:	4393      	bics	r3, r2
 8001704:	0019      	movs	r1, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	00da      	lsls	r2, r3, #3
 800170c:	4b81      	ldr	r3, [pc, #516]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 800170e:	430a      	orrs	r2, r1
 8001710:	635a      	str	r2, [r3, #52]	; 0x34
 8001712:	e034      	b.n	800177e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	3305      	adds	r3, #5
 800171a:	d111      	bne.n	8001740 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800171c:	4b7d      	ldr	r3, [pc, #500]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 800171e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001720:	4b7c      	ldr	r3, [pc, #496]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 8001722:	2104      	movs	r1, #4
 8001724:	438a      	bics	r2, r1
 8001726:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001728:	4b7a      	ldr	r3, [pc, #488]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 800172a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172c:	22f8      	movs	r2, #248	; 0xf8
 800172e:	4393      	bics	r3, r2
 8001730:	0019      	movs	r1, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	00da      	lsls	r2, r3, #3
 8001738:	4b76      	ldr	r3, [pc, #472]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 800173a:	430a      	orrs	r2, r1
 800173c:	635a      	str	r2, [r3, #52]	; 0x34
 800173e:	e01e      	b.n	800177e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001740:	4b74      	ldr	r3, [pc, #464]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 8001742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001744:	4b73      	ldr	r3, [pc, #460]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 8001746:	2104      	movs	r1, #4
 8001748:	430a      	orrs	r2, r1
 800174a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800174c:	4b71      	ldr	r3, [pc, #452]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 800174e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001750:	4b70      	ldr	r3, [pc, #448]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 8001752:	2101      	movs	r1, #1
 8001754:	438a      	bics	r2, r1
 8001756:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001758:	f7ff fb04 	bl	8000d64 <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001762:	f7ff faff 	bl	8000d64 <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e111      	b.n	8001998 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001774:	4b67      	ldr	r3, [pc, #412]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 8001776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001778:	2202      	movs	r2, #2
 800177a:	4013      	ands	r3, r2
 800177c:	d1f1      	bne.n	8001762 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2220      	movs	r2, #32
 8001784:	4013      	ands	r3, r2
 8001786:	d05c      	beq.n	8001842 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001788:	4b62      	ldr	r3, [pc, #392]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	220c      	movs	r2, #12
 800178e:	4013      	ands	r3, r2
 8001790:	2b0c      	cmp	r3, #12
 8001792:	d00e      	beq.n	80017b2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001794:	4b5f      	ldr	r3, [pc, #380]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	220c      	movs	r2, #12
 800179a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800179c:	2b08      	cmp	r3, #8
 800179e:	d114      	bne.n	80017ca <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80017a0:	4b5c      	ldr	r3, [pc, #368]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	23c0      	movs	r3, #192	; 0xc0
 80017a6:	025b      	lsls	r3, r3, #9
 80017a8:	401a      	ands	r2, r3
 80017aa:	23c0      	movs	r3, #192	; 0xc0
 80017ac:	025b      	lsls	r3, r3, #9
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d10b      	bne.n	80017ca <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80017b2:	4b58      	ldr	r3, [pc, #352]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80017b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	029b      	lsls	r3, r3, #10
 80017ba:	4013      	ands	r3, r2
 80017bc:	d040      	beq.n	8001840 <HAL_RCC_OscConfig+0x5a8>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d03c      	beq.n	8001840 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0e6      	b.n	8001998 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d01b      	beq.n	800180a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80017d2:	4b50      	ldr	r3, [pc, #320]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80017d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017d6:	4b4f      	ldr	r3, [pc, #316]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80017d8:	2180      	movs	r1, #128	; 0x80
 80017da:	0249      	lsls	r1, r1, #9
 80017dc:	430a      	orrs	r2, r1
 80017de:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fac0 	bl	8000d64 <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ea:	f7ff fabb 	bl	8000d64 <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e0cd      	b.n	8001998 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017fc:	4b45      	ldr	r3, [pc, #276]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80017fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	029b      	lsls	r3, r3, #10
 8001804:	4013      	ands	r3, r2
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x552>
 8001808:	e01b      	b.n	8001842 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800180a:	4b42      	ldr	r3, [pc, #264]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 800180c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800180e:	4b41      	ldr	r3, [pc, #260]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 8001810:	4943      	ldr	r1, [pc, #268]	; (8001920 <HAL_RCC_OscConfig+0x688>)
 8001812:	400a      	ands	r2, r1
 8001814:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001816:	f7ff faa5 	bl	8000d64 <HAL_GetTick>
 800181a:	0003      	movs	r3, r0
 800181c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001820:	f7ff faa0 	bl	8000d64 <HAL_GetTick>
 8001824:	0002      	movs	r2, r0
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e0b2      	b.n	8001998 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001832:	4b38      	ldr	r3, [pc, #224]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 8001834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	029b      	lsls	r3, r3, #10
 800183a:	4013      	ands	r3, r2
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x588>
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001840:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	2b00      	cmp	r3, #0
 8001848:	d100      	bne.n	800184c <HAL_RCC_OscConfig+0x5b4>
 800184a:	e0a4      	b.n	8001996 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800184c:	4b31      	ldr	r3, [pc, #196]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	220c      	movs	r2, #12
 8001852:	4013      	ands	r3, r2
 8001854:	2b08      	cmp	r3, #8
 8001856:	d100      	bne.n	800185a <HAL_RCC_OscConfig+0x5c2>
 8001858:	e078      	b.n	800194c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	2b02      	cmp	r3, #2
 8001860:	d14c      	bne.n	80018fc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001862:	4b2c      	ldr	r3, [pc, #176]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b2b      	ldr	r3, [pc, #172]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 8001868:	492e      	ldr	r1, [pc, #184]	; (8001924 <HAL_RCC_OscConfig+0x68c>)
 800186a:	400a      	ands	r2, r1
 800186c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186e:	f7ff fa79 	bl	8000d64 <HAL_GetTick>
 8001872:	0003      	movs	r3, r0
 8001874:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff fa74 	bl	8000d64 <HAL_GetTick>
 800187c:	0002      	movs	r2, r0
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e086      	b.n	8001998 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188a:	4b22      	ldr	r3, [pc, #136]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	049b      	lsls	r3, r3, #18
 8001892:	4013      	ands	r3, r2
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001896:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 8001898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189a:	220f      	movs	r2, #15
 800189c:	4393      	bics	r3, r2
 800189e:	0019      	movs	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80018a6:	430a      	orrs	r2, r1
 80018a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4a1e      	ldr	r2, [pc, #120]	; (8001928 <HAL_RCC_OscConfig+0x690>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	0019      	movs	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018bc:	431a      	orrs	r2, r3
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80018c0:	430a      	orrs	r2, r1
 80018c2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	0449      	lsls	r1, r1, #17
 80018ce:	430a      	orrs	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d2:	f7ff fa47 	bl	8000d64 <HAL_GetTick>
 80018d6:	0003      	movs	r3, r0
 80018d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff fa42 	bl	8000d64 <HAL_GetTick>
 80018e0:	0002      	movs	r2, r0
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e054      	b.n	8001998 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	049b      	lsls	r3, r3, #18
 80018f6:	4013      	ands	r3, r2
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x644>
 80018fa:	e04c      	b.n	8001996 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <HAL_RCC_OscConfig+0x67c>)
 8001902:	4908      	ldr	r1, [pc, #32]	; (8001924 <HAL_RCC_OscConfig+0x68c>)
 8001904:	400a      	ands	r2, r1
 8001906:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff fa2c 	bl	8000d64 <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001910:	e015      	b.n	800193e <HAL_RCC_OscConfig+0x6a6>
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	40021000 	.word	0x40021000
 8001918:	00001388 	.word	0x00001388
 800191c:	efffffff 	.word	0xefffffff
 8001920:	fffeffff 	.word	0xfffeffff
 8001924:	feffffff 	.word	0xfeffffff
 8001928:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192c:	f7ff fa1a 	bl	8000d64 <HAL_GetTick>
 8001930:	0002      	movs	r2, r0
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e02c      	b.n	8001998 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193e:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <HAL_RCC_OscConfig+0x708>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	049b      	lsls	r3, r3, #18
 8001946:	4013      	ands	r3, r2
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x694>
 800194a:	e024      	b.n	8001996 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e01f      	b.n	8001998 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_RCC_OscConfig+0x708>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_RCC_OscConfig+0x708>)
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	23c0      	movs	r3, #192	; 0xc0
 8001968:	025b      	lsls	r3, r3, #9
 800196a:	401a      	ands	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	429a      	cmp	r2, r3
 8001972:	d10e      	bne.n	8001992 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	220f      	movs	r2, #15
 8001978:	401a      	ands	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d107      	bne.n	8001992 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	23f0      	movs	r3, #240	; 0xf0
 8001986:	039b      	lsls	r3, r3, #14
 8001988:	401a      	ands	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800198e:	429a      	cmp	r2, r3
 8001990:	d001      	beq.n	8001996 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	0018      	movs	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	b008      	add	sp, #32
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000

080019a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0bf      	b.n	8001b38 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b8:	4b61      	ldr	r3, [pc, #388]	; (8001b40 <HAL_RCC_ClockConfig+0x19c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2201      	movs	r2, #1
 80019be:	4013      	ands	r3, r2
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d911      	bls.n	80019ea <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b5e      	ldr	r3, [pc, #376]	; (8001b40 <HAL_RCC_ClockConfig+0x19c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2201      	movs	r2, #1
 80019cc:	4393      	bics	r3, r2
 80019ce:	0019      	movs	r1, r3
 80019d0:	4b5b      	ldr	r3, [pc, #364]	; (8001b40 <HAL_RCC_ClockConfig+0x19c>)
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d8:	4b59      	ldr	r3, [pc, #356]	; (8001b40 <HAL_RCC_ClockConfig+0x19c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2201      	movs	r2, #1
 80019de:	4013      	ands	r3, r2
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e0a6      	b.n	8001b38 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2202      	movs	r2, #2
 80019f0:	4013      	ands	r3, r2
 80019f2:	d015      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2204      	movs	r2, #4
 80019fa:	4013      	ands	r3, r2
 80019fc:	d006      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019fe:	4b51      	ldr	r3, [pc, #324]	; (8001b44 <HAL_RCC_ClockConfig+0x1a0>)
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	4b50      	ldr	r3, [pc, #320]	; (8001b44 <HAL_RCC_ClockConfig+0x1a0>)
 8001a04:	21e0      	movs	r1, #224	; 0xe0
 8001a06:	00c9      	lsls	r1, r1, #3
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a0c:	4b4d      	ldr	r3, [pc, #308]	; (8001b44 <HAL_RCC_ClockConfig+0x1a0>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	22f0      	movs	r2, #240	; 0xf0
 8001a12:	4393      	bics	r3, r2
 8001a14:	0019      	movs	r1, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	4b4a      	ldr	r3, [pc, #296]	; (8001b44 <HAL_RCC_ClockConfig+0x1a0>)
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2201      	movs	r2, #1
 8001a26:	4013      	ands	r3, r2
 8001a28:	d04c      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d107      	bne.n	8001a42 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	4b44      	ldr	r3, [pc, #272]	; (8001b44 <HAL_RCC_ClockConfig+0x1a0>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	029b      	lsls	r3, r3, #10
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d120      	bne.n	8001a80 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e07a      	b.n	8001b38 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d107      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a4a:	4b3e      	ldr	r3, [pc, #248]	; (8001b44 <HAL_RCC_ClockConfig+0x1a0>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	049b      	lsls	r3, r3, #18
 8001a52:	4013      	ands	r3, r2
 8001a54:	d114      	bne.n	8001a80 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e06e      	b.n	8001b38 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a62:	4b38      	ldr	r3, [pc, #224]	; (8001b44 <HAL_RCC_ClockConfig+0x1a0>)
 8001a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	029b      	lsls	r3, r3, #10
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d108      	bne.n	8001a80 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e062      	b.n	8001b38 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a72:	4b34      	ldr	r3, [pc, #208]	; (8001b44 <HAL_RCC_ClockConfig+0x1a0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2202      	movs	r2, #2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e05b      	b.n	8001b38 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a80:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <HAL_RCC_ClockConfig+0x1a0>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2203      	movs	r2, #3
 8001a86:	4393      	bics	r3, r2
 8001a88:	0019      	movs	r1, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <HAL_RCC_ClockConfig+0x1a0>)
 8001a90:	430a      	orrs	r2, r1
 8001a92:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a94:	f7ff f966 	bl	8000d64 <HAL_GetTick>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9c:	e009      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9e:	f7ff f961 	bl	8000d64 <HAL_GetTick>
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	4a27      	ldr	r2, [pc, #156]	; (8001b48 <HAL_RCC_ClockConfig+0x1a4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e042      	b.n	8001b38 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_RCC_ClockConfig+0x1a0>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	220c      	movs	r2, #12
 8001ab8:	401a      	ands	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d1ec      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <HAL_RCC_ClockConfig+0x19c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4013      	ands	r3, r2
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d211      	bcs.n	8001af6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <HAL_RCC_ClockConfig+0x19c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	4393      	bics	r3, r2
 8001ada:	0019      	movs	r1, r3
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_RCC_ClockConfig+0x19c>)
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <HAL_RCC_ClockConfig+0x19c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4013      	ands	r3, r2
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e020      	b.n	8001b38 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2204      	movs	r2, #4
 8001afc:	4013      	ands	r3, r2
 8001afe:	d009      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b00:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <HAL_RCC_ClockConfig+0x1a0>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4a11      	ldr	r2, [pc, #68]	; (8001b4c <HAL_RCC_ClockConfig+0x1a8>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	0019      	movs	r1, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <HAL_RCC_ClockConfig+0x1a0>)
 8001b10:	430a      	orrs	r2, r1
 8001b12:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b14:	f000 f820 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8001b18:	0001      	movs	r1, r0
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <HAL_RCC_ClockConfig+0x1a0>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	091b      	lsrs	r3, r3, #4
 8001b20:	220f      	movs	r2, #15
 8001b22:	4013      	ands	r3, r2
 8001b24:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <HAL_RCC_ClockConfig+0x1ac>)
 8001b26:	5cd3      	ldrb	r3, [r2, r3]
 8001b28:	000a      	movs	r2, r1
 8001b2a:	40da      	lsrs	r2, r3
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_RCC_ClockConfig+0x1b0>)
 8001b2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b30:	2003      	movs	r0, #3
 8001b32:	f7ff f8d1 	bl	8000cd8 <HAL_InitTick>
  
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	0018      	movs	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b004      	add	sp, #16
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40022000 	.word	0x40022000
 8001b44:	40021000 	.word	0x40021000
 8001b48:	00001388 	.word	0x00001388
 8001b4c:	fffff8ff 	.word	0xfffff8ff
 8001b50:	08002554 	.word	0x08002554
 8001b54:	20000024 	.word	0x20000024

08001b58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001b72:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2b0c      	cmp	r3, #12
 8001b80:	d046      	beq.n	8001c10 <HAL_RCC_GetSysClockFreq+0xb8>
 8001b82:	d848      	bhi.n	8001c16 <HAL_RCC_GetSysClockFreq+0xbe>
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d002      	beq.n	8001b8e <HAL_RCC_GetSysClockFreq+0x36>
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d003      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0x3c>
 8001b8c:	e043      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b8e:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001b90:	613b      	str	r3, [r7, #16]
      break;
 8001b92:	e043      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	0c9b      	lsrs	r3, r3, #18
 8001b98:	220f      	movs	r2, #15
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	4a24      	ldr	r2, [pc, #144]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001b9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ba0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ba2:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	4013      	ands	r3, r2
 8001baa:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001bac:	5cd3      	ldrb	r3, [r2, r3]
 8001bae:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	23c0      	movs	r3, #192	; 0xc0
 8001bb4:	025b      	lsls	r3, r3, #9
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	025b      	lsls	r3, r3, #9
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d109      	bne.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	481a      	ldr	r0, [pc, #104]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001bc4:	f7fe fa9e 	bl	8000104 <__udivsi3>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	001a      	movs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4353      	muls	r3, r2
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	e01a      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	23c0      	movs	r3, #192	; 0xc0
 8001bd8:	025b      	lsls	r3, r3, #9
 8001bda:	401a      	ands	r2, r3
 8001bdc:	23c0      	movs	r3, #192	; 0xc0
 8001bde:	025b      	lsls	r3, r3, #9
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d109      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	4814      	ldr	r0, [pc, #80]	; (8001c38 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001be8:	f7fe fa8c 	bl	8000104 <__udivsi3>
 8001bec:	0003      	movs	r3, r0
 8001bee:	001a      	movs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4353      	muls	r3, r2
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	480c      	ldr	r0, [pc, #48]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001bfc:	f7fe fa82 	bl	8000104 <__udivsi3>
 8001c00:	0003      	movs	r3, r0
 8001c02:	001a      	movs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4353      	muls	r3, r2
 8001c08:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	613b      	str	r3, [r7, #16]
      break;
 8001c0e:	e005      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001c12:	613b      	str	r3, [r7, #16]
      break;
 8001c14:	e002      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c18:	613b      	str	r3, [r7, #16]
      break;
 8001c1a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c1c:	693b      	ldr	r3, [r7, #16]
}
 8001c1e:	0018      	movs	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b006      	add	sp, #24
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	007a1200 	.word	0x007a1200
 8001c30:	0800256c 	.word	0x0800256c
 8001c34:	0800257c 	.word	0x0800257c
 8001c38:	02dc6c00 	.word	0x02dc6c00

08001c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c40:	4b02      	ldr	r3, [pc, #8]	; (8001c4c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	20000024 	.word	0x20000024

08001c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c54:	f7ff fff2 	bl	8001c3c <HAL_RCC_GetHCLKFreq>
 8001c58:	0001      	movs	r1, r0
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	0a1b      	lsrs	r3, r3, #8
 8001c60:	2207      	movs	r2, #7
 8001c62:	4013      	ands	r3, r2
 8001c64:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c66:	5cd3      	ldrb	r3, [r2, r3]
 8001c68:	40d9      	lsrs	r1, r3
 8001c6a:	000b      	movs	r3, r1
}    
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	40021000 	.word	0x40021000
 8001c78:	08002564 	.word	0x08002564

08001c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e042      	b.n	8001d14 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	223d      	movs	r2, #61	; 0x3d
 8001c92:	5c9b      	ldrb	r3, [r3, r2]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d107      	bne.n	8001caa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	223c      	movs	r2, #60	; 0x3c
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f7fe ff89 	bl	8000bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	223d      	movs	r2, #61	; 0x3d
 8001cae:	2102      	movs	r1, #2
 8001cb0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	0019      	movs	r1, r3
 8001cbc:	0010      	movs	r0, r2
 8001cbe:	f000 fa89 	bl	80021d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2246      	movs	r2, #70	; 0x46
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	223e      	movs	r2, #62	; 0x3e
 8001cce:	2101      	movs	r1, #1
 8001cd0:	5499      	strb	r1, [r3, r2]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	223f      	movs	r2, #63	; 0x3f
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	5499      	strb	r1, [r3, r2]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2240      	movs	r2, #64	; 0x40
 8001cde:	2101      	movs	r1, #1
 8001ce0:	5499      	strb	r1, [r3, r2]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2241      	movs	r2, #65	; 0x41
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2242      	movs	r2, #66	; 0x42
 8001cee:	2101      	movs	r1, #1
 8001cf0:	5499      	strb	r1, [r3, r2]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2243      	movs	r2, #67	; 0x43
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	5499      	strb	r1, [r3, r2]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2244      	movs	r2, #68	; 0x44
 8001cfe:	2101      	movs	r1, #1
 8001d00:	5499      	strb	r1, [r3, r2]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2245      	movs	r2, #69	; 0x45
 8001d06:	2101      	movs	r1, #1
 8001d08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	223d      	movs	r2, #61	; 0x3d
 8001d0e:	2101      	movs	r1, #1
 8001d10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	0018      	movs	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b002      	add	sp, #8
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	223d      	movs	r2, #61	; 0x3d
 8001d28:	5c9b      	ldrb	r3, [r3, r2]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d001      	beq.n	8001d34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e03b      	b.n	8001dac <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	223d      	movs	r2, #61	; 0x3d
 8001d38:	2102      	movs	r1, #2
 8001d3a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2101      	movs	r1, #1
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <HAL_TIM_Base_Start_IT+0x98>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00f      	beq.n	8001d76 <HAL_TIM_Base_Start_IT+0x5a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	05db      	lsls	r3, r3, #23
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d009      	beq.n	8001d76 <HAL_TIM_Base_Start_IT+0x5a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d004      	beq.n	8001d76 <HAL_TIM_Base_Start_IT+0x5a>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <HAL_TIM_Base_Start_IT+0xa0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d111      	bne.n	8001d9a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	4013      	ands	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2b06      	cmp	r3, #6
 8001d86:	d010      	beq.n	8001daa <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2101      	movs	r1, #1
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d98:	e007      	b.n	8001daa <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2101      	movs	r1, #1
 8001da6:	430a      	orrs	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	0018      	movs	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b004      	add	sp, #16
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40012c00 	.word	0x40012c00
 8001db8:	40000400 	.word	0x40000400
 8001dbc:	40014000 	.word	0x40014000

08001dc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d124      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d11d      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2203      	movs	r2, #3
 8001dea:	4252      	negs	r2, r2
 8001dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d004      	beq.n	8001e0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	0018      	movs	r0, r3
 8001e04:	f000 f9ce 	bl	80021a4 <HAL_TIM_IC_CaptureCallback>
 8001e08:	e007      	b.n	8001e1a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f000 f9c1 	bl	8002194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	0018      	movs	r0, r3
 8001e16:	f000 f9cd 	bl	80021b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	2204      	movs	r2, #4
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d125      	bne.n	8001e7a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2204      	movs	r2, #4
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d11e      	bne.n	8001e7a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2205      	movs	r2, #5
 8001e42:	4252      	negs	r2, r2
 8001e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2202      	movs	r2, #2
 8001e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	23c0      	movs	r3, #192	; 0xc0
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4013      	ands	r3, r2
 8001e58:	d004      	beq.n	8001e64 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f000 f9a1 	bl	80021a4 <HAL_TIM_IC_CaptureCallback>
 8001e62:	e007      	b.n	8001e74 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	0018      	movs	r0, r3
 8001e68:	f000 f994 	bl	8002194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f000 f9a0 	bl	80021b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	2208      	movs	r2, #8
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d124      	bne.n	8001ed2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	2208      	movs	r2, #8
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d11d      	bne.n	8001ed2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2209      	movs	r2, #9
 8001e9c:	4252      	negs	r2, r2
 8001e9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	2203      	movs	r2, #3
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d004      	beq.n	8001ebc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f000 f975 	bl	80021a4 <HAL_TIM_IC_CaptureCallback>
 8001eba:	e007      	b.n	8001ecc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f000 f968 	bl	8002194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f000 f974 	bl	80021b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	2210      	movs	r2, #16
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b10      	cmp	r3, #16
 8001ede:	d125      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2210      	movs	r2, #16
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d11e      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2211      	movs	r2, #17
 8001ef4:	4252      	negs	r2, r2
 8001ef6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2208      	movs	r2, #8
 8001efc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	69da      	ldr	r2, [r3, #28]
 8001f04:	23c0      	movs	r3, #192	; 0xc0
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d004      	beq.n	8001f16 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f000 f948 	bl	80021a4 <HAL_TIM_IC_CaptureCallback>
 8001f14:	e007      	b.n	8001f26 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f000 f93b 	bl	8002194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	0018      	movs	r0, r3
 8001f22:	f000 f947 	bl	80021b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2201      	movs	r2, #1
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d10f      	bne.n	8001f5a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2201      	movs	r2, #1
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d108      	bne.n	8001f5a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	4252      	negs	r2, r2
 8001f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7fe fdf3 	bl	8000b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	2280      	movs	r2, #128	; 0x80
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b80      	cmp	r3, #128	; 0x80
 8001f66:	d10f      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	2280      	movs	r2, #128	; 0x80
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b80      	cmp	r3, #128	; 0x80
 8001f74:	d108      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2281      	movs	r2, #129	; 0x81
 8001f7c:	4252      	negs	r2, r2
 8001f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	0018      	movs	r0, r3
 8001f84:	f000 faa6 	bl	80024d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	2240      	movs	r2, #64	; 0x40
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b40      	cmp	r3, #64	; 0x40
 8001f94:	d10f      	bne.n	8001fb6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2240      	movs	r2, #64	; 0x40
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b40      	cmp	r3, #64	; 0x40
 8001fa2:	d108      	bne.n	8001fb6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2241      	movs	r2, #65	; 0x41
 8001faa:	4252      	negs	r2, r2
 8001fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f000 f907 	bl	80021c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d10f      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b20      	cmp	r3, #32
 8001fd0:	d108      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2221      	movs	r2, #33	; 0x21
 8001fd8:	4252      	negs	r2, r2
 8001fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f000 fa70 	bl	80024c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff6:	230f      	movs	r3, #15
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	223c      	movs	r2, #60	; 0x3c
 8002002:	5c9b      	ldrb	r3, [r3, r2]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_TIM_ConfigClockSource+0x20>
 8002008:	2302      	movs	r3, #2
 800200a:	e0bc      	b.n	8002186 <HAL_TIM_ConfigClockSource+0x19a>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	223c      	movs	r2, #60	; 0x3c
 8002010:	2101      	movs	r1, #1
 8002012:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	223d      	movs	r2, #61	; 0x3d
 8002018:	2102      	movs	r1, #2
 800201a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2277      	movs	r2, #119	; 0x77
 8002028:	4393      	bics	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4a58      	ldr	r2, [pc, #352]	; (8002190 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002030:	4013      	ands	r3, r2
 8002032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2280      	movs	r2, #128	; 0x80
 8002042:	0192      	lsls	r2, r2, #6
 8002044:	4293      	cmp	r3, r2
 8002046:	d040      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0xde>
 8002048:	2280      	movs	r2, #128	; 0x80
 800204a:	0192      	lsls	r2, r2, #6
 800204c:	4293      	cmp	r3, r2
 800204e:	d900      	bls.n	8002052 <HAL_TIM_ConfigClockSource+0x66>
 8002050:	e088      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x178>
 8002052:	2280      	movs	r2, #128	; 0x80
 8002054:	0152      	lsls	r2, r2, #5
 8002056:	4293      	cmp	r3, r2
 8002058:	d100      	bne.n	800205c <HAL_TIM_ConfigClockSource+0x70>
 800205a:	e088      	b.n	800216e <HAL_TIM_ConfigClockSource+0x182>
 800205c:	2280      	movs	r2, #128	; 0x80
 800205e:	0152      	lsls	r2, r2, #5
 8002060:	4293      	cmp	r3, r2
 8002062:	d900      	bls.n	8002066 <HAL_TIM_ConfigClockSource+0x7a>
 8002064:	e07e      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x178>
 8002066:	2b70      	cmp	r3, #112	; 0x70
 8002068:	d018      	beq.n	800209c <HAL_TIM_ConfigClockSource+0xb0>
 800206a:	d900      	bls.n	800206e <HAL_TIM_ConfigClockSource+0x82>
 800206c:	e07a      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x178>
 800206e:	2b60      	cmp	r3, #96	; 0x60
 8002070:	d04f      	beq.n	8002112 <HAL_TIM_ConfigClockSource+0x126>
 8002072:	d900      	bls.n	8002076 <HAL_TIM_ConfigClockSource+0x8a>
 8002074:	e076      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x178>
 8002076:	2b50      	cmp	r3, #80	; 0x50
 8002078:	d03b      	beq.n	80020f2 <HAL_TIM_ConfigClockSource+0x106>
 800207a:	d900      	bls.n	800207e <HAL_TIM_ConfigClockSource+0x92>
 800207c:	e072      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x178>
 800207e:	2b40      	cmp	r3, #64	; 0x40
 8002080:	d057      	beq.n	8002132 <HAL_TIM_ConfigClockSource+0x146>
 8002082:	d900      	bls.n	8002086 <HAL_TIM_ConfigClockSource+0x9a>
 8002084:	e06e      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x178>
 8002086:	2b30      	cmp	r3, #48	; 0x30
 8002088:	d063      	beq.n	8002152 <HAL_TIM_ConfigClockSource+0x166>
 800208a:	d86b      	bhi.n	8002164 <HAL_TIM_ConfigClockSource+0x178>
 800208c:	2b20      	cmp	r3, #32
 800208e:	d060      	beq.n	8002152 <HAL_TIM_ConfigClockSource+0x166>
 8002090:	d868      	bhi.n	8002164 <HAL_TIM_ConfigClockSource+0x178>
 8002092:	2b00      	cmp	r3, #0
 8002094:	d05d      	beq.n	8002152 <HAL_TIM_ConfigClockSource+0x166>
 8002096:	2b10      	cmp	r3, #16
 8002098:	d05b      	beq.n	8002152 <HAL_TIM_ConfigClockSource+0x166>
 800209a:	e063      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	6899      	ldr	r1, [r3, #8]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f000 f98c 	bl	80023c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2277      	movs	r2, #119	; 0x77
 80020bc:	4313      	orrs	r3, r2
 80020be:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	609a      	str	r2, [r3, #8]
      break;
 80020c8:	e052      	b.n	8002170 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6899      	ldr	r1, [r3, #8]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f000 f975 	bl	80023c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2180      	movs	r1, #128	; 0x80
 80020ea:	01c9      	lsls	r1, r1, #7
 80020ec:	430a      	orrs	r2, r1
 80020ee:	609a      	str	r2, [r3, #8]
      break;
 80020f0:	e03e      	b.n	8002170 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6859      	ldr	r1, [r3, #4]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	001a      	movs	r2, r3
 8002100:	f000 f8e8 	bl	80022d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2150      	movs	r1, #80	; 0x50
 800210a:	0018      	movs	r0, r3
 800210c:	f000 f942 	bl	8002394 <TIM_ITRx_SetConfig>
      break;
 8002110:	e02e      	b.n	8002170 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	001a      	movs	r2, r3
 8002120:	f000 f906 	bl	8002330 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2160      	movs	r1, #96	; 0x60
 800212a:	0018      	movs	r0, r3
 800212c:	f000 f932 	bl	8002394 <TIM_ITRx_SetConfig>
      break;
 8002130:	e01e      	b.n	8002170 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	6859      	ldr	r1, [r3, #4]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	001a      	movs	r2, r3
 8002140:	f000 f8c8 	bl	80022d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2140      	movs	r1, #64	; 0x40
 800214a:	0018      	movs	r0, r3
 800214c:	f000 f922 	bl	8002394 <TIM_ITRx_SetConfig>
      break;
 8002150:	e00e      	b.n	8002170 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	0019      	movs	r1, r3
 800215c:	0010      	movs	r0, r2
 800215e:	f000 f919 	bl	8002394 <TIM_ITRx_SetConfig>
      break;
 8002162:	e005      	b.n	8002170 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002164:	230f      	movs	r3, #15
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
      break;
 800216c:	e000      	b.n	8002170 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800216e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	223d      	movs	r2, #61	; 0x3d
 8002174:	2101      	movs	r1, #1
 8002176:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	223c      	movs	r2, #60	; 0x3c
 800217c:	2100      	movs	r1, #0
 800217e:	5499      	strb	r1, [r3, r2]

  return status;
 8002180:	230f      	movs	r3, #15
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	781b      	ldrb	r3, [r3, #0]
}
 8002186:	0018      	movs	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	b004      	add	sp, #16
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	ffff00ff 	.word	0xffff00ff

08002194 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800219c:	46c0      	nop			; (mov r8, r8)
 800219e:	46bd      	mov	sp, r7
 80021a0:	b002      	add	sp, #8
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b002      	add	sp, #8
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021bc:	46c0      	nop			; (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	b002      	add	sp, #8
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021cc:	46c0      	nop			; (mov r8, r8)
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b002      	add	sp, #8
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a34      	ldr	r2, [pc, #208]	; (80022b8 <TIM_Base_SetConfig+0xe4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d008      	beq.n	80021fe <TIM_Base_SetConfig+0x2a>
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	05db      	lsls	r3, r3, #23
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d003      	beq.n	80021fe <TIM_Base_SetConfig+0x2a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a30      	ldr	r2, [pc, #192]	; (80022bc <TIM_Base_SetConfig+0xe8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d108      	bne.n	8002210 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2270      	movs	r2, #112	; 0x70
 8002202:	4393      	bics	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4313      	orrs	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a29      	ldr	r2, [pc, #164]	; (80022b8 <TIM_Base_SetConfig+0xe4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d018      	beq.n	800224a <TIM_Base_SetConfig+0x76>
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	05db      	lsls	r3, r3, #23
 800221e:	429a      	cmp	r2, r3
 8002220:	d013      	beq.n	800224a <TIM_Base_SetConfig+0x76>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a25      	ldr	r2, [pc, #148]	; (80022bc <TIM_Base_SetConfig+0xe8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00f      	beq.n	800224a <TIM_Base_SetConfig+0x76>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a24      	ldr	r2, [pc, #144]	; (80022c0 <TIM_Base_SetConfig+0xec>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00b      	beq.n	800224a <TIM_Base_SetConfig+0x76>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a23      	ldr	r2, [pc, #140]	; (80022c4 <TIM_Base_SetConfig+0xf0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d007      	beq.n	800224a <TIM_Base_SetConfig+0x76>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a22      	ldr	r2, [pc, #136]	; (80022c8 <TIM_Base_SetConfig+0xf4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d003      	beq.n	800224a <TIM_Base_SetConfig+0x76>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a21      	ldr	r2, [pc, #132]	; (80022cc <TIM_Base_SetConfig+0xf8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d108      	bne.n	800225c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4a20      	ldr	r2, [pc, #128]	; (80022d0 <TIM_Base_SetConfig+0xfc>)
 800224e:	4013      	ands	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2280      	movs	r2, #128	; 0x80
 8002260:	4393      	bics	r3, r2
 8002262:	001a      	movs	r2, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	4313      	orrs	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a0c      	ldr	r2, [pc, #48]	; (80022b8 <TIM_Base_SetConfig+0xe4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00b      	beq.n	80022a2 <TIM_Base_SetConfig+0xce>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <TIM_Base_SetConfig+0xf0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d007      	beq.n	80022a2 <TIM_Base_SetConfig+0xce>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a0c      	ldr	r2, [pc, #48]	; (80022c8 <TIM_Base_SetConfig+0xf4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d003      	beq.n	80022a2 <TIM_Base_SetConfig+0xce>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a0b      	ldr	r2, [pc, #44]	; (80022cc <TIM_Base_SetConfig+0xf8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d103      	bne.n	80022aa <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	615a      	str	r2, [r3, #20]
}
 80022b0:	46c0      	nop			; (mov r8, r8)
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b004      	add	sp, #16
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40012c00 	.word	0x40012c00
 80022bc:	40000400 	.word	0x40000400
 80022c0:	40002000 	.word	0x40002000
 80022c4:	40014000 	.word	0x40014000
 80022c8:	40014400 	.word	0x40014400
 80022cc:	40014800 	.word	0x40014800
 80022d0:	fffffcff 	.word	0xfffffcff

080022d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	2201      	movs	r2, #1
 80022ec:	4393      	bics	r3, r2
 80022ee:	001a      	movs	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	22f0      	movs	r2, #240	; 0xf0
 80022fe:	4393      	bics	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	220a      	movs	r2, #10
 8002310:	4393      	bics	r3, r2
 8002312:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	621a      	str	r2, [r3, #32]
}
 8002328:	46c0      	nop			; (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	b006      	add	sp, #24
 800232e:	bd80      	pop	{r7, pc}

08002330 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	2210      	movs	r2, #16
 8002342:	4393      	bics	r3, r2
 8002344:	001a      	movs	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	4a0d      	ldr	r2, [pc, #52]	; (8002390 <TIM_TI2_ConfigInputStage+0x60>)
 800235a:	4013      	ands	r3, r2
 800235c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	031b      	lsls	r3, r3, #12
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4313      	orrs	r3, r2
 8002366:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	22a0      	movs	r2, #160	; 0xa0
 800236c:	4393      	bics	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	621a      	str	r2, [r3, #32]
}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	46bd      	mov	sp, r7
 800238a:	b006      	add	sp, #24
 800238c:	bd80      	pop	{r7, pc}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	ffff0fff 	.word	0xffff0fff

08002394 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2270      	movs	r2, #112	; 0x70
 80023a8:	4393      	bics	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	2207      	movs	r2, #7
 80023b4:	4313      	orrs	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	609a      	str	r2, [r3, #8]
}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	46bd      	mov	sp, r7
 80023c2:	b004      	add	sp, #16
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	4a09      	ldr	r2, [pc, #36]	; (8002404 <TIM_ETR_SetConfig+0x3c>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	021a      	lsls	r2, r3, #8
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	609a      	str	r2, [r3, #8]
}
 80023fc:	46c0      	nop			; (mov r8, r8)
 80023fe:	46bd      	mov	sp, r7
 8002400:	b006      	add	sp, #24
 8002402:	bd80      	pop	{r7, pc}
 8002404:	ffff00ff 	.word	0xffff00ff

08002408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	223c      	movs	r2, #60	; 0x3c
 8002416:	5c9b      	ldrb	r3, [r3, r2]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800241c:	2302      	movs	r3, #2
 800241e:	e047      	b.n	80024b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	223c      	movs	r2, #60	; 0x3c
 8002424:	2101      	movs	r1, #1
 8002426:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	223d      	movs	r2, #61	; 0x3d
 800242c:	2102      	movs	r1, #2
 800242e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2270      	movs	r2, #112	; 0x70
 8002444:	4393      	bics	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4313      	orrs	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a16      	ldr	r2, [pc, #88]	; (80024b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d00f      	beq.n	8002484 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	05db      	lsls	r3, r3, #23
 800246c:	429a      	cmp	r2, r3
 800246e:	d009      	beq.n	8002484 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a11      	ldr	r2, [pc, #68]	; (80024bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d004      	beq.n	8002484 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a10      	ldr	r2, [pc, #64]	; (80024c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d10c      	bne.n	800249e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2280      	movs	r2, #128	; 0x80
 8002488:	4393      	bics	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	4313      	orrs	r3, r2
 8002494:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	223d      	movs	r2, #61	; 0x3d
 80024a2:	2101      	movs	r1, #1
 80024a4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	223c      	movs	r2, #60	; 0x3c
 80024aa:	2100      	movs	r1, #0
 80024ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	0018      	movs	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b004      	add	sp, #16
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40012c00 	.word	0x40012c00
 80024bc:	40000400 	.word	0x40000400
 80024c0:	40014000 	.word	0x40014000

080024c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024cc:	46c0      	nop			; (mov r8, r8)
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b002      	add	sp, #8
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024dc:	46c0      	nop			; (mov r8, r8)
 80024de:	46bd      	mov	sp, r7
 80024e0:	b002      	add	sp, #8
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <__libc_init_array>:
 80024e4:	b570      	push	{r4, r5, r6, lr}
 80024e6:	2600      	movs	r6, #0
 80024e8:	4d0c      	ldr	r5, [pc, #48]	; (800251c <__libc_init_array+0x38>)
 80024ea:	4c0d      	ldr	r4, [pc, #52]	; (8002520 <__libc_init_array+0x3c>)
 80024ec:	1b64      	subs	r4, r4, r5
 80024ee:	10a4      	asrs	r4, r4, #2
 80024f0:	42a6      	cmp	r6, r4
 80024f2:	d109      	bne.n	8002508 <__libc_init_array+0x24>
 80024f4:	2600      	movs	r6, #0
 80024f6:	f000 f821 	bl	800253c <_init>
 80024fa:	4d0a      	ldr	r5, [pc, #40]	; (8002524 <__libc_init_array+0x40>)
 80024fc:	4c0a      	ldr	r4, [pc, #40]	; (8002528 <__libc_init_array+0x44>)
 80024fe:	1b64      	subs	r4, r4, r5
 8002500:	10a4      	asrs	r4, r4, #2
 8002502:	42a6      	cmp	r6, r4
 8002504:	d105      	bne.n	8002512 <__libc_init_array+0x2e>
 8002506:	bd70      	pop	{r4, r5, r6, pc}
 8002508:	00b3      	lsls	r3, r6, #2
 800250a:	58eb      	ldr	r3, [r5, r3]
 800250c:	4798      	blx	r3
 800250e:	3601      	adds	r6, #1
 8002510:	e7ee      	b.n	80024f0 <__libc_init_array+0xc>
 8002512:	00b3      	lsls	r3, r6, #2
 8002514:	58eb      	ldr	r3, [r5, r3]
 8002516:	4798      	blx	r3
 8002518:	3601      	adds	r6, #1
 800251a:	e7f2      	b.n	8002502 <__libc_init_array+0x1e>
 800251c:	0800258c 	.word	0x0800258c
 8002520:	0800258c 	.word	0x0800258c
 8002524:	0800258c 	.word	0x0800258c
 8002528:	08002590 	.word	0x08002590

0800252c <memset>:
 800252c:	0003      	movs	r3, r0
 800252e:	1882      	adds	r2, r0, r2
 8002530:	4293      	cmp	r3, r2
 8002532:	d100      	bne.n	8002536 <memset+0xa>
 8002534:	4770      	bx	lr
 8002536:	7019      	strb	r1, [r3, #0]
 8002538:	3301      	adds	r3, #1
 800253a:	e7f9      	b.n	8002530 <memset+0x4>

0800253c <_init>:
 800253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002542:	bc08      	pop	{r3}
 8002544:	469e      	mov	lr, r3
 8002546:	4770      	bx	lr

08002548 <_fini>:
 8002548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800254e:	bc08      	pop	{r3}
 8002550:	469e      	mov	lr, r3
 8002552:	4770      	bx	lr
